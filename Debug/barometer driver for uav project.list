
barometer driver for uav project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091bc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  080092d0  080092d0  000192d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097d4  080097d4  00020250  2**0
                  CONTENTS
  4 .ARM          00000000  080097d4  080097d4  00020250  2**0
                  CONTENTS
  5 .preinit_array 00000000  080097d4  080097d4  00020250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097d4  080097d4  000197d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097d8  080097d8  000197d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  080097dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  20000250  08009a2c  00020250  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08009a2c  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008197  00000000  00000000  00020279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019e6  00000000  00000000  00028410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000890  00000000  00000000  00029df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b0  00000000  00000000  0002a688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001856b  00000000  00000000  0002ae38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b688  00000000  00000000  000433a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084a31  00000000  00000000  0004ea2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d345c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a14  00000000  00000000  000d34ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000250 	.word	0x20000250
 800012c:	00000000 	.word	0x00000000
 8000130:	080092b4 	.word	0x080092b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000254 	.word	0x20000254
 800014c:	080092b4 	.word	0x080092b4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2iz>:
 800113c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001144:	d30f      	bcc.n	8001166 <__aeabi_f2iz+0x2a>
 8001146:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d90d      	bls.n	800116c <__aeabi_f2iz+0x30>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001158:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800115c:	fa23 f002 	lsr.w	r0, r3, r2
 8001160:	bf18      	it	ne
 8001162:	4240      	negne	r0, r0
 8001164:	4770      	bx	lr
 8001166:	f04f 0000 	mov.w	r0, #0
 800116a:	4770      	bx	lr
 800116c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001170:	d101      	bne.n	8001176 <__aeabi_f2iz+0x3a>
 8001172:	0242      	lsls	r2, r0, #9
 8001174:	d105      	bne.n	8001182 <__aeabi_f2iz+0x46>
 8001176:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800117a:	bf08      	it	eq
 800117c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001180:	4770      	bx	lr
 8001182:	f04f 0000 	mov.w	r0, #0
 8001186:	4770      	bx	lr

08001188 <__aeabi_d2lz>:
 8001188:	b538      	push	{r3, r4, r5, lr}
 800118a:	4605      	mov	r5, r0
 800118c:	460c      	mov	r4, r1
 800118e:	2200      	movs	r2, #0
 8001190:	2300      	movs	r3, #0
 8001192:	4628      	mov	r0, r5
 8001194:	4621      	mov	r1, r4
 8001196:	f7ff fc11 	bl	80009bc <__aeabi_dcmplt>
 800119a:	b928      	cbnz	r0, 80011a8 <__aeabi_d2lz+0x20>
 800119c:	4628      	mov	r0, r5
 800119e:	4621      	mov	r1, r4
 80011a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011a4:	f000 b80a 	b.w	80011bc <__aeabi_d2ulz>
 80011a8:	4628      	mov	r0, r5
 80011aa:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011ae:	f000 f805 	bl	80011bc <__aeabi_d2ulz>
 80011b2:	4240      	negs	r0, r0
 80011b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011b8:	bd38      	pop	{r3, r4, r5, pc}
 80011ba:	bf00      	nop

080011bc <__aeabi_d2ulz>:
 80011bc:	b5d0      	push	{r4, r6, r7, lr}
 80011be:	2200      	movs	r2, #0
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <__aeabi_d2ulz+0x34>)
 80011c2:	4606      	mov	r6, r0
 80011c4:	460f      	mov	r7, r1
 80011c6:	f7ff f987 	bl	80004d8 <__aeabi_dmul>
 80011ca:	f7ff fc5d 	bl	8000a88 <__aeabi_d2uiz>
 80011ce:	4604      	mov	r4, r0
 80011d0:	f7ff f908 	bl	80003e4 <__aeabi_ui2d>
 80011d4:	2200      	movs	r2, #0
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <__aeabi_d2ulz+0x38>)
 80011d8:	f7ff f97e 	bl	80004d8 <__aeabi_dmul>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4630      	mov	r0, r6
 80011e2:	4639      	mov	r1, r7
 80011e4:	f7fe ffc0 	bl	8000168 <__aeabi_dsub>
 80011e8:	f7ff fc4e 	bl	8000a88 <__aeabi_d2uiz>
 80011ec:	4621      	mov	r1, r4
 80011ee:	bdd0      	pop	{r4, r6, r7, pc}
 80011f0:	3df00000 	.word	0x3df00000
 80011f4:	41f00000 	.word	0x41f00000

080011f8 <BMP180_write_parmeters_hardware_interface>:
 *  Created on: Sep 9, 2024
 *      Author: kirollous hazem
 */
#include "BMP180 hardware interface.h"
extern I2C_HandleTypeDef hi2c1;//i got the hi2c1 from the main.c
uint8_t BMP180_write_parmeters_hardware_interface(uint8_t sla,uint8_t *Data,uint8_t length){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af02      	add	r7, sp, #8
 80011fe:	4603      	mov	r3, r0
 8001200:	6039      	str	r1, [r7, #0]
 8001202:	71fb      	strb	r3, [r7, #7]
 8001204:	4613      	mov	r3, r2
 8001206:	71bb      	strb	r3, [r7, #6]


	HAL_StatusTypeDef ok = HAL_I2C_Master_Transmit(&hi2c1, //this transmit to confirm which reg address i want to reach
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	b29b      	uxth	r3, r3
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	b299      	uxth	r1, r3
 8001210:	79bb      	ldrb	r3, [r7, #6]
 8001212:	b29b      	uxth	r3, r3
 8001214:	2264      	movs	r2, #100	; 0x64
 8001216:	9200      	str	r2, [sp, #0]
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	4807      	ldr	r0, [pc, #28]	; (8001238 <BMP180_write_parmeters_hardware_interface+0x40>)
 800121c:	f000 ff30 	bl	8002080 <HAL_I2C_Master_Transmit>
 8001220:	4603      	mov	r3, r0
 8001222:	73fb      	strb	r3, [r7, #15]
			sla << 1 /*we shifted by on to creat the last bit we removed to make it generic in the generic driver
			 then now we re return the last bit to make the transmit function abl to handle the last bit*/
			 ,Data, length, 100);
	return (ok == HAL_OK) ? 1 : 0;
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	2b00      	cmp	r3, #0
 8001228:	bf0c      	ite	eq
 800122a:	2301      	moveq	r3, #1
 800122c:	2300      	movne	r3, #0
 800122e:	b2db      	uxtb	r3, r3
}
 8001230:	4618      	mov	r0, r3
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	2000026c 	.word	0x2000026c

0800123c <BMP180_read_parmeters_hardware_interface>:


uint8_t BMP180_read_parmeters_hardware_interface(uint8_t sla,uint8_t *Data,uint8_t length){
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af02      	add	r7, sp, #8
 8001242:	4603      	mov	r3, r0
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	71fb      	strb	r3, [r7, #7]
 8001248:	4613      	mov	r3, r2
 800124a:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ok = HAL_I2C_Master_Receive(&hi2c1, //this transmit to confirm which reg address i want to reach
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	b29b      	uxth	r3, r3
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	b299      	uxth	r1, r3
 8001254:	79bb      	ldrb	r3, [r7, #6]
 8001256:	b29b      	uxth	r3, r3
 8001258:	2264      	movs	r2, #100	; 0x64
 800125a:	9200      	str	r2, [sp, #0]
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	4807      	ldr	r0, [pc, #28]	; (800127c <BMP180_read_parmeters_hardware_interface+0x40>)
 8001260:	f001 f80c 	bl	800227c <HAL_I2C_Master_Receive>
 8001264:	4603      	mov	r3, r0
 8001266:	73fb      	strb	r3, [r7, #15]
				sla<<1 ,Data, length, 100);
		return (ok == HAL_OK) ? 1 : 0;
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	2b00      	cmp	r3, #0
 800126c:	bf0c      	ite	eq
 800126e:	2301      	moveq	r3, #1
 8001270:	2300      	movne	r3, #0
 8001272:	b2db      	uxtb	r3, r3


}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	2000026c 	.word	0x2000026c

08001280 <BMP180_delay_hardware_interface>:
uint8_t BMP180_delay_hardware_interface(uint8_t delay){
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(delay);
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f000 fb0f 	bl	80018b0 <HAL_Delay>
}
 8001292:	bf00      	nop
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af02      	add	r7, sp, #8
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


	HAL_Init();
 80012a2:	f000 faa3 	bl	80017ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a6:	f000 f845 	bl	8001334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012aa:	f000 f8b7 	bl	800141c <MX_GPIO_Init>
  MX_I2C1_Init();
 80012ae:	f000 f887 	bl	80013c0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
 bmp_180_init(&B);
 80012b2:	481b      	ldr	r0, [pc, #108]	; (8001320 <main+0x84>)
 80012b4:	f002 fabc 	bl	8003830 <bmp_180_init>
  Alcd_Init(&lcd1, 2, 0);
 80012b8:	2200      	movs	r2, #0
 80012ba:	2102      	movs	r1, #2
 80012bc:	4819      	ldr	r0, [pc, #100]	; (8001324 <main+0x88>)
 80012be:	f002 fddd 	bl	8003e7c <Alcd_Init>
  	// Alcd_PutAt(&lcd1,1,0,"HAzEM");
  	Alcd_PutAt_n(&lcd1, 0, 0, "kiroo", Str_Len("kiroo"));
 80012c2:	4819      	ldr	r0, [pc, #100]	; (8001328 <main+0x8c>)
 80012c4:	f002 ff02 	bl	80040cc <Str_Len>
 80012c8:	4603      	mov	r3, r0
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	4b16      	ldr	r3, [pc, #88]	; (8001328 <main+0x8c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	2100      	movs	r1, #0
 80012d4:	4813      	ldr	r0, [pc, #76]	; (8001324 <main+0x88>)
 80012d6:	f002 fe8c 	bl	8003ff2 <Alcd_PutAt_n>
  	Alcd_Clear(&lcd1);
 80012da:	4812      	ldr	r0, [pc, #72]	; (8001324 <main+0x88>)
 80012dc:	f002 fea2 	bl	8004024 <Alcd_Clear>
  	HAL_Delay(100);
 80012e0:	2064      	movs	r0, #100	; 0x64
 80012e2:	f000 fae5 	bl	80018b0 <HAL_Delay>
	 data[0]=0xaa;
	 HAL_I2C_Master_Transmit(&hi2c1,0x77<<1, data, 1, 100);
	 HAL_I2C_Master_Receive(&hi2c1,0x77<<1, data, 1, 100);*/

	float alt;
  bmp_180_read_altitude(&B, &alt);
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	4619      	mov	r1, r3
 80012ea:	480d      	ldr	r0, [pc, #52]	; (8001320 <main+0x84>)
 80012ec:	f002 fca0 	bl	8003c30 <bmp_180_read_altitude>
	  sprintf(sprintf_buffer, "alt in cm%.2f", alt);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff f898 	bl	8000428 <__aeabi_f2d>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	490b      	ldr	r1, [pc, #44]	; (800132c <main+0x90>)
 80012fe:	480c      	ldr	r0, [pc, #48]	; (8001330 <main+0x94>)
 8001300:	f003 fd9e 	bl	8004e40 <siprintf>
	  		Alcd_PutAt_n(&lcd1, 0, 0,sprintf_buffer , strlen(sprintf_buffer));
 8001304:	480a      	ldr	r0, [pc, #40]	; (8001330 <main+0x94>)
 8001306:	f7fe ff23 	bl	8000150 <strlen>
 800130a:	4603      	mov	r3, r0
 800130c:	b2db      	uxtb	r3, r3
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	4b07      	ldr	r3, [pc, #28]	; (8001330 <main+0x94>)
 8001312:	2200      	movs	r2, #0
 8001314:	2100      	movs	r1, #0
 8001316:	4803      	ldr	r0, [pc, #12]	; (8001324 <main+0x88>)
 8001318:	f002 fe6b 	bl	8003ff2 <Alcd_PutAt_n>
  {
 800131c:	e7e3      	b.n	80012e6 <main+0x4a>
 800131e:	bf00      	nop
 8001320:	20000020 	.word	0x20000020
 8001324:	20000000 	.word	0x20000000
 8001328:	080092d0 	.word	0x080092d0
 800132c:	080092d8 	.word	0x080092d8
 8001330:	200002c0 	.word	0x200002c0

08001334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b090      	sub	sp, #64	; 0x40
 8001338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133a:	f107 0318 	add.w	r3, r7, #24
 800133e:	2228      	movs	r2, #40	; 0x28
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f002 ff02 	bl	800414c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001356:	2301      	movs	r3, #1
 8001358:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800135a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800135e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001360:	2300      	movs	r3, #0
 8001362:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001364:	2301      	movs	r3, #1
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001368:	2302      	movs	r3, #2
 800136a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800136c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001370:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001372:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001376:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001378:	f107 0318 	add.w	r3, r7, #24
 800137c:	4618      	mov	r0, r3
 800137e:	f001 fd6f 	bl	8002e60 <HAL_RCC_OscConfig>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001388:	f000 f876 	bl	8001478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800138c:	230f      	movs	r3, #15
 800138e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001390:	2302      	movs	r3, #2
 8001392:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001398:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800139c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	2102      	movs	r1, #2
 80013a6:	4618      	mov	r0, r3
 80013a8:	f001 ffdc 	bl	8003364 <HAL_RCC_ClockConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80013b2:	f000 f861 	bl	8001478 <Error_Handler>
  }
}
 80013b6:	bf00      	nop
 80013b8:	3740      	adds	r7, #64	; 0x40
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <MX_I2C1_Init+0x50>)
 80013c6:	4a13      	ldr	r2, [pc, #76]	; (8001414 <MX_I2C1_Init+0x54>)
 80013c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <MX_I2C1_Init+0x50>)
 80013cc:	4a12      	ldr	r2, [pc, #72]	; (8001418 <MX_I2C1_Init+0x58>)
 80013ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <MX_I2C1_Init+0x50>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <MX_I2C1_Init+0x50>)
 80013d8:	2200      	movs	r2, #0
 80013da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <MX_I2C1_Init+0x50>)
 80013de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <MX_I2C1_Init+0x50>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MX_I2C1_Init+0x50>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <MX_I2C1_Init+0x50>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <MX_I2C1_Init+0x50>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013fc:	4804      	ldr	r0, [pc, #16]	; (8001410 <MX_I2C1_Init+0x50>)
 80013fe:	f000 fcfb 	bl	8001df8 <HAL_I2C_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001408:	f000 f836 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	2000026c 	.word	0x2000026c
 8001414:	40005400 	.word	0x40005400
 8001418:	000186a0 	.word	0x000186a0

0800141c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001422:	4b14      	ldr	r3, [pc, #80]	; (8001474 <MX_GPIO_Init+0x58>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	4a13      	ldr	r2, [pc, #76]	; (8001474 <MX_GPIO_Init+0x58>)
 8001428:	f043 0320 	orr.w	r3, r3, #32
 800142c:	6193      	str	r3, [r2, #24]
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <MX_GPIO_Init+0x58>)
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	f003 0320 	and.w	r3, r3, #32
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <MX_GPIO_Init+0x58>)
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	4a0d      	ldr	r2, [pc, #52]	; (8001474 <MX_GPIO_Init+0x58>)
 8001440:	f043 0304 	orr.w	r3, r3, #4
 8001444:	6193      	str	r3, [r2, #24]
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <MX_GPIO_Init+0x58>)
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <MX_GPIO_Init+0x58>)
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	4a07      	ldr	r2, [pc, #28]	; (8001474 <MX_GPIO_Init+0x58>)
 8001458:	f043 0308 	orr.w	r3, r3, #8
 800145c:	6193      	str	r3, [r2, #24]
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <MX_GPIO_Init+0x58>)
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800146a:	bf00      	nop
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr
 8001474:	40021000 	.word	0x40021000

08001478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800147c:	b672      	cpsid	i
}
 800147e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001480:	e7fe      	b.n	8001480 <Error_Handler+0x8>
	...

08001484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800148a:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <HAL_MspInit+0x5c>)
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	4a14      	ldr	r2, [pc, #80]	; (80014e0 <HAL_MspInit+0x5c>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6193      	str	r3, [r2, #24]
 8001496:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <HAL_MspInit+0x5c>)
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <HAL_MspInit+0x5c>)
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	4a0e      	ldr	r2, [pc, #56]	; (80014e0 <HAL_MspInit+0x5c>)
 80014a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ac:	61d3      	str	r3, [r2, #28]
 80014ae:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <HAL_MspInit+0x5c>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <HAL_MspInit+0x60>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <HAL_MspInit+0x60>)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d6:	bf00      	nop
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40010000 	.word	0x40010000

080014e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 0310 	add.w	r3, r7, #16
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a15      	ldr	r2, [pc, #84]	; (8001558 <HAL_I2C_MspInit+0x70>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d123      	bne.n	8001550 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001508:	4b14      	ldr	r3, [pc, #80]	; (800155c <HAL_I2C_MspInit+0x74>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	4a13      	ldr	r2, [pc, #76]	; (800155c <HAL_I2C_MspInit+0x74>)
 800150e:	f043 0308 	orr.w	r3, r3, #8
 8001512:	6193      	str	r3, [r2, #24]
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <HAL_I2C_MspInit+0x74>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	f003 0308 	and.w	r3, r3, #8
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001520:	23c0      	movs	r3, #192	; 0xc0
 8001522:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001524:	2312      	movs	r3, #18
 8001526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001528:	2303      	movs	r3, #3
 800152a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	4619      	mov	r1, r3
 8001532:	480b      	ldr	r0, [pc, #44]	; (8001560 <HAL_I2C_MspInit+0x78>)
 8001534:	f000 fac4 	bl	8001ac0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <HAL_I2C_MspInit+0x74>)
 800153a:	69db      	ldr	r3, [r3, #28]
 800153c:	4a07      	ldr	r2, [pc, #28]	; (800155c <HAL_I2C_MspInit+0x74>)
 800153e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001542:	61d3      	str	r3, [r2, #28]
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <HAL_I2C_MspInit+0x74>)
 8001546:	69db      	ldr	r3, [r3, #28]
 8001548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001550:	bf00      	nop
 8001552:	3720      	adds	r7, #32
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40005400 	.word	0x40005400
 800155c:	40021000 	.word	0x40021000
 8001560:	40010c00 	.word	0x40010c00

08001564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <NMI_Handler+0x4>

0800156a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800156e:	e7fe      	b.n	800156e <HardFault_Handler+0x4>

08001570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <MemManage_Handler+0x4>

08001576 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800157a:	e7fe      	b.n	800157a <BusFault_Handler+0x4>

0800157c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <UsageFault_Handler+0x4>

08001582 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr

0800158e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr

0800159a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr

080015a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015aa:	f000 f965 	bl	8001878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  return 1;
 80015b6:	2301      	movs	r3, #1
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr

080015c0 <_kill>:

int _kill(int pid, int sig)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015ca:	f002 fd95 	bl	80040f8 <__errno>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2216      	movs	r2, #22
 80015d2:	601a      	str	r2, [r3, #0]
  return -1;
 80015d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <_exit>:

void _exit (int status)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015e8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff ffe7 	bl	80015c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015f2:	e7fe      	b.n	80015f2 <_exit+0x12>

080015f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	e00a      	b.n	800161c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001606:	f3af 8000 	nop.w
 800160a:	4601      	mov	r1, r0
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	1c5a      	adds	r2, r3, #1
 8001610:	60ba      	str	r2, [r7, #8]
 8001612:	b2ca      	uxtb	r2, r1
 8001614:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	3301      	adds	r3, #1
 800161a:	617b      	str	r3, [r7, #20]
 800161c:	697a      	ldr	r2, [r7, #20]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	429a      	cmp	r2, r3
 8001622:	dbf0      	blt.n	8001606 <_read+0x12>
  }

  return len;
 8001624:	687b      	ldr	r3, [r7, #4]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af00      	add	r7, sp, #0
 8001634:	60f8      	str	r0, [r7, #12]
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	e009      	b.n	8001654 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	1c5a      	adds	r2, r3, #1
 8001644:	60ba      	str	r2, [r7, #8]
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	3301      	adds	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	697a      	ldr	r2, [r7, #20]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	429a      	cmp	r2, r3
 800165a:	dbf1      	blt.n	8001640 <_write+0x12>
  }
  return len;
 800165c:	687b      	ldr	r3, [r7, #4]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <_close>:

int _close(int file)
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800166e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001672:	4618      	mov	r0, r3
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr

0800167c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800168c:	605a      	str	r2, [r3, #4]
  return 0;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr

0800169a <_isatty>:

int _isatty(int file)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016a2:	2301      	movs	r3, #1
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr

080016ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b085      	sub	sp, #20
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	60f8      	str	r0, [r7, #12]
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr
	...

080016c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d0:	4a14      	ldr	r2, [pc, #80]	; (8001724 <_sbrk+0x5c>)
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <_sbrk+0x60>)
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016dc:	4b13      	ldr	r3, [pc, #76]	; (800172c <_sbrk+0x64>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d102      	bne.n	80016ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <_sbrk+0x64>)
 80016e6:	4a12      	ldr	r2, [pc, #72]	; (8001730 <_sbrk+0x68>)
 80016e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <_sbrk+0x64>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d207      	bcs.n	8001708 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f8:	f002 fcfe 	bl	80040f8 <__errno>
 80016fc:	4603      	mov	r3, r0
 80016fe:	220c      	movs	r2, #12
 8001700:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
 8001706:	e009      	b.n	800171c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <_sbrk+0x64>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800170e:	4b07      	ldr	r3, [pc, #28]	; (800172c <_sbrk+0x64>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	4a05      	ldr	r2, [pc, #20]	; (800172c <_sbrk+0x64>)
 8001718:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800171a:	68fb      	ldr	r3, [r7, #12]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20005000 	.word	0x20005000
 8001728:	00000400 	.word	0x00000400
 800172c:	200002d4 	.word	0x200002d4
 8001730:	200002f0 	.word	0x200002f0

08001734 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr

08001740 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001740:	f7ff fff8 	bl	8001734 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001744:	480b      	ldr	r0, [pc, #44]	; (8001774 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001746:	490c      	ldr	r1, [pc, #48]	; (8001778 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001748:	4a0c      	ldr	r2, [pc, #48]	; (800177c <LoopFillZerobss+0x16>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800174c:	e002      	b.n	8001754 <LoopCopyDataInit>

0800174e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001752:	3304      	adds	r3, #4

08001754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001758:	d3f9      	bcc.n	800174e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175a:	4a09      	ldr	r2, [pc, #36]	; (8001780 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800175c:	4c09      	ldr	r4, [pc, #36]	; (8001784 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001760:	e001      	b.n	8001766 <LoopFillZerobss>

08001762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001764:	3204      	adds	r2, #4

08001766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001768:	d3fb      	bcc.n	8001762 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800176a:	f002 fccb 	bl	8004104 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800176e:	f7ff fd95 	bl	800129c <main>
  bx lr
 8001772:	4770      	bx	lr
  ldr r0, =_sdata
 8001774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001778:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 800177c:	080097dc 	.word	0x080097dc
  ldr r2, =_sbss
 8001780:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8001784:	200002ec 	.word	0x200002ec

08001788 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001788:	e7fe      	b.n	8001788 <ADC1_2_IRQHandler>
	...

0800178c <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001790:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <DWT_Delay_Init+0x58>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	4a13      	ldr	r2, [pc, #76]	; (80017e4 <DWT_Delay_Init+0x58>)
 8001796:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800179a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <DWT_Delay_Init+0x58>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	4a10      	ldr	r2, [pc, #64]	; (80017e4 <DWT_Delay_Init+0x58>)
 80017a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017a6:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80017a8:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <DWT_Delay_Init+0x5c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0e      	ldr	r2, [pc, #56]	; (80017e8 <DWT_Delay_Init+0x5c>)
 80017ae:	f023 0301 	bic.w	r3, r3, #1
 80017b2:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <DWT_Delay_Init+0x5c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a0b      	ldr	r2, [pc, #44]	; (80017e8 <DWT_Delay_Init+0x5c>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80017c0:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <DWT_Delay_Init+0x5c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 80017c6:	bf00      	nop
     __ASM volatile ("NOP");
 80017c8:	bf00      	nop
  __ASM volatile ("NOP");
 80017ca:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <DWT_Delay_Init+0x5c>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 80017d4:	2300      	movs	r3, #0
 80017d6:	e000      	b.n	80017da <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 80017d8:	2301      	movs	r3, #1
  }
}
 80017da:	4618      	mov	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000edf0 	.word	0xe000edf0
 80017e8:	e0001000 	.word	0xe0001000

080017ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <HAL_Init+0x28>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a07      	ldr	r2, [pc, #28]	; (8001814 <HAL_Init+0x28>)
 80017f6:	f043 0310 	orr.w	r3, r3, #16
 80017fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017fc:	2003      	movs	r0, #3
 80017fe:	f000 f92b 	bl	8001a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001802:	200f      	movs	r0, #15
 8001804:	f000 f808 	bl	8001818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001808:	f7ff fe3c 	bl	8001484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40022000 	.word	0x40022000

08001818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_InitTick+0x54>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_InitTick+0x58>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4619      	mov	r1, r3
 800182a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001832:	fbb2 f3f3 	udiv	r3, r2, r3
 8001836:	4618      	mov	r0, r3
 8001838:	f000 f935 	bl	8001aa6 <HAL_SYSTICK_Config>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e00e      	b.n	8001864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b0f      	cmp	r3, #15
 800184a:	d80a      	bhi.n	8001862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800184c:	2200      	movs	r2, #0
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	f000 f90b 	bl	8001a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001858:	4a06      	ldr	r2, [pc, #24]	; (8001874 <HAL_InitTick+0x5c>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	e000      	b.n	8001864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000070 	.word	0x20000070
 8001870:	20000078 	.word	0x20000078
 8001874:	20000074 	.word	0x20000074

08001878 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_IncTick+0x1c>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_IncTick+0x20>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a03      	ldr	r2, [pc, #12]	; (8001898 <HAL_IncTick+0x20>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr
 8001894:	20000078 	.word	0x20000078
 8001898:	200002d8 	.word	0x200002d8

0800189c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return uwTick;
 80018a0:	4b02      	ldr	r3, [pc, #8]	; (80018ac <HAL_GetTick+0x10>)
 80018a2:	681b      	ldr	r3, [r3, #0]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr
 80018ac:	200002d8 	.word	0x200002d8

080018b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b8:	f7ff fff0 	bl	800189c <HAL_GetTick>
 80018bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c8:	d005      	beq.n	80018d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ca:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <HAL_Delay+0x44>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	461a      	mov	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4413      	add	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018d6:	bf00      	nop
 80018d8:	f7ff ffe0 	bl	800189c <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d8f7      	bhi.n	80018d8 <HAL_Delay+0x28>
  {
  }
}
 80018e8:	bf00      	nop
 80018ea:	bf00      	nop
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000078 	.word	0x20000078

080018f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <__NVIC_SetPriorityGrouping+0x44>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001914:	4013      	ands	r3, r2
 8001916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192a:	4a04      	ldr	r2, [pc, #16]	; (800193c <__NVIC_SetPriorityGrouping+0x44>)
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	60d3      	str	r3, [r2, #12]
}
 8001930:	bf00      	nop
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001944:	4b04      	ldr	r3, [pc, #16]	; (8001958 <__NVIC_GetPriorityGrouping+0x18>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	0a1b      	lsrs	r3, r3, #8
 800194a:	f003 0307 	and.w	r3, r3, #7
}
 800194e:	4618      	mov	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	6039      	str	r1, [r7, #0]
 8001966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	2b00      	cmp	r3, #0
 800196e:	db0a      	blt.n	8001986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	b2da      	uxtb	r2, r3
 8001974:	490c      	ldr	r1, [pc, #48]	; (80019a8 <__NVIC_SetPriority+0x4c>)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	0112      	lsls	r2, r2, #4
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	440b      	add	r3, r1
 8001980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001984:	e00a      	b.n	800199c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	b2da      	uxtb	r2, r3
 800198a:	4908      	ldr	r1, [pc, #32]	; (80019ac <__NVIC_SetPriority+0x50>)
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	3b04      	subs	r3, #4
 8001994:	0112      	lsls	r2, r2, #4
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	440b      	add	r3, r1
 800199a:	761a      	strb	r2, [r3, #24]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000e100 	.word	0xe000e100
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b089      	sub	sp, #36	; 0x24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f1c3 0307 	rsb	r3, r3, #7
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	bf28      	it	cs
 80019ce:	2304      	movcs	r3, #4
 80019d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3304      	adds	r3, #4
 80019d6:	2b06      	cmp	r3, #6
 80019d8:	d902      	bls.n	80019e0 <NVIC_EncodePriority+0x30>
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3b03      	subs	r3, #3
 80019de:	e000      	b.n	80019e2 <NVIC_EncodePriority+0x32>
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e4:	f04f 32ff 	mov.w	r2, #4294967295
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43da      	mvns	r2, r3
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	401a      	ands	r2, r3
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f8:	f04f 31ff 	mov.w	r1, #4294967295
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001a02:	43d9      	mvns	r1, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	4313      	orrs	r3, r2
         );
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3724      	adds	r7, #36	; 0x24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a24:	d301      	bcc.n	8001a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00f      	b.n	8001a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <SysTick_Config+0x40>)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a32:	210f      	movs	r1, #15
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f7ff ff90 	bl	800195c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <SysTick_Config+0x40>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a42:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <SysTick_Config+0x40>)
 8001a44:	2207      	movs	r2, #7
 8001a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	e000e010 	.word	0xe000e010

08001a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ff49 	bl	80018f8 <__NVIC_SetPriorityGrouping>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b086      	sub	sp, #24
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
 8001a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a80:	f7ff ff5e 	bl	8001940 <__NVIC_GetPriorityGrouping>
 8001a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	68b9      	ldr	r1, [r7, #8]
 8001a8a:	6978      	ldr	r0, [r7, #20]
 8001a8c:	f7ff ff90 	bl	80019b0 <NVIC_EncodePriority>
 8001a90:	4602      	mov	r2, r0
 8001a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a96:	4611      	mov	r1, r2
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff5f 	bl	800195c <__NVIC_SetPriority>
}
 8001a9e:	bf00      	nop
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff ffb0 	bl	8001a14 <SysTick_Config>
 8001ab4:	4603      	mov	r3, r0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b08b      	sub	sp, #44	; 0x2c
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aca:	2300      	movs	r3, #0
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ad2:	e169      	b.n	8001da8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	f040 8158 	bne.w	8001da2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	4a9a      	ldr	r2, [pc, #616]	; (8001d60 <HAL_GPIO_Init+0x2a0>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d05e      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
 8001afc:	4a98      	ldr	r2, [pc, #608]	; (8001d60 <HAL_GPIO_Init+0x2a0>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d875      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b02:	4a98      	ldr	r2, [pc, #608]	; (8001d64 <HAL_GPIO_Init+0x2a4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d058      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
 8001b08:	4a96      	ldr	r2, [pc, #600]	; (8001d64 <HAL_GPIO_Init+0x2a4>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d86f      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b0e:	4a96      	ldr	r2, [pc, #600]	; (8001d68 <HAL_GPIO_Init+0x2a8>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d052      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
 8001b14:	4a94      	ldr	r2, [pc, #592]	; (8001d68 <HAL_GPIO_Init+0x2a8>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d869      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b1a:	4a94      	ldr	r2, [pc, #592]	; (8001d6c <HAL_GPIO_Init+0x2ac>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d04c      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
 8001b20:	4a92      	ldr	r2, [pc, #584]	; (8001d6c <HAL_GPIO_Init+0x2ac>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d863      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b26:	4a92      	ldr	r2, [pc, #584]	; (8001d70 <HAL_GPIO_Init+0x2b0>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d046      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
 8001b2c:	4a90      	ldr	r2, [pc, #576]	; (8001d70 <HAL_GPIO_Init+0x2b0>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d85d      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b32:	2b12      	cmp	r3, #18
 8001b34:	d82a      	bhi.n	8001b8c <HAL_GPIO_Init+0xcc>
 8001b36:	2b12      	cmp	r3, #18
 8001b38:	d859      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b3a:	a201      	add	r2, pc, #4	; (adr r2, 8001b40 <HAL_GPIO_Init+0x80>)
 8001b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b40:	08001bbb 	.word	0x08001bbb
 8001b44:	08001b95 	.word	0x08001b95
 8001b48:	08001ba7 	.word	0x08001ba7
 8001b4c:	08001be9 	.word	0x08001be9
 8001b50:	08001bef 	.word	0x08001bef
 8001b54:	08001bef 	.word	0x08001bef
 8001b58:	08001bef 	.word	0x08001bef
 8001b5c:	08001bef 	.word	0x08001bef
 8001b60:	08001bef 	.word	0x08001bef
 8001b64:	08001bef 	.word	0x08001bef
 8001b68:	08001bef 	.word	0x08001bef
 8001b6c:	08001bef 	.word	0x08001bef
 8001b70:	08001bef 	.word	0x08001bef
 8001b74:	08001bef 	.word	0x08001bef
 8001b78:	08001bef 	.word	0x08001bef
 8001b7c:	08001bef 	.word	0x08001bef
 8001b80:	08001bef 	.word	0x08001bef
 8001b84:	08001b9d 	.word	0x08001b9d
 8001b88:	08001bb1 	.word	0x08001bb1
 8001b8c:	4a79      	ldr	r2, [pc, #484]	; (8001d74 <HAL_GPIO_Init+0x2b4>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d013      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b92:	e02c      	b.n	8001bee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	623b      	str	r3, [r7, #32]
          break;
 8001b9a:	e029      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	623b      	str	r3, [r7, #32]
          break;
 8001ba4:	e024      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	3308      	adds	r3, #8
 8001bac:	623b      	str	r3, [r7, #32]
          break;
 8001bae:	e01f      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	330c      	adds	r3, #12
 8001bb6:	623b      	str	r3, [r7, #32]
          break;
 8001bb8:	e01a      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d102      	bne.n	8001bc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bc2:	2304      	movs	r3, #4
 8001bc4:	623b      	str	r3, [r7, #32]
          break;
 8001bc6:	e013      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d105      	bne.n	8001bdc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bd0:	2308      	movs	r3, #8
 8001bd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69fa      	ldr	r2, [r7, #28]
 8001bd8:	611a      	str	r2, [r3, #16]
          break;
 8001bda:	e009      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bdc:	2308      	movs	r3, #8
 8001bde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69fa      	ldr	r2, [r7, #28]
 8001be4:	615a      	str	r2, [r3, #20]
          break;
 8001be6:	e003      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001be8:	2300      	movs	r3, #0
 8001bea:	623b      	str	r3, [r7, #32]
          break;
 8001bec:	e000      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
          break;
 8001bee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	2bff      	cmp	r3, #255	; 0xff
 8001bf4:	d801      	bhi.n	8001bfa <HAL_GPIO_Init+0x13a>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	e001      	b.n	8001bfe <HAL_GPIO_Init+0x13e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	2bff      	cmp	r3, #255	; 0xff
 8001c04:	d802      	bhi.n	8001c0c <HAL_GPIO_Init+0x14c>
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	e002      	b.n	8001c12 <HAL_GPIO_Init+0x152>
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	3b08      	subs	r3, #8
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	210f      	movs	r1, #15
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	401a      	ands	r2, r3
 8001c24:	6a39      	ldr	r1, [r7, #32]
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 80b1 	beq.w	8001da2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c40:	4b4d      	ldr	r3, [pc, #308]	; (8001d78 <HAL_GPIO_Init+0x2b8>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	4a4c      	ldr	r2, [pc, #304]	; (8001d78 <HAL_GPIO_Init+0x2b8>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	6193      	str	r3, [r2, #24]
 8001c4c:	4b4a      	ldr	r3, [pc, #296]	; (8001d78 <HAL_GPIO_Init+0x2b8>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c58:	4a48      	ldr	r2, [pc, #288]	; (8001d7c <HAL_GPIO_Init+0x2bc>)
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	089b      	lsrs	r3, r3, #2
 8001c5e:	3302      	adds	r3, #2
 8001c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	220f      	movs	r2, #15
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a40      	ldr	r2, [pc, #256]	; (8001d80 <HAL_GPIO_Init+0x2c0>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d013      	beq.n	8001cac <HAL_GPIO_Init+0x1ec>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a3f      	ldr	r2, [pc, #252]	; (8001d84 <HAL_GPIO_Init+0x2c4>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d00d      	beq.n	8001ca8 <HAL_GPIO_Init+0x1e8>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a3e      	ldr	r2, [pc, #248]	; (8001d88 <HAL_GPIO_Init+0x2c8>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d007      	beq.n	8001ca4 <HAL_GPIO_Init+0x1e4>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a3d      	ldr	r2, [pc, #244]	; (8001d8c <HAL_GPIO_Init+0x2cc>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d101      	bne.n	8001ca0 <HAL_GPIO_Init+0x1e0>
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e006      	b.n	8001cae <HAL_GPIO_Init+0x1ee>
 8001ca0:	2304      	movs	r3, #4
 8001ca2:	e004      	b.n	8001cae <HAL_GPIO_Init+0x1ee>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	e002      	b.n	8001cae <HAL_GPIO_Init+0x1ee>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <HAL_GPIO_Init+0x1ee>
 8001cac:	2300      	movs	r3, #0
 8001cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb0:	f002 0203 	and.w	r2, r2, #3
 8001cb4:	0092      	lsls	r2, r2, #2
 8001cb6:	4093      	lsls	r3, r2
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cbe:	492f      	ldr	r1, [pc, #188]	; (8001d7c <HAL_GPIO_Init+0x2bc>)
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	089b      	lsrs	r3, r3, #2
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d006      	beq.n	8001ce6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cd8:	4b2d      	ldr	r3, [pc, #180]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	492c      	ldr	r1, [pc, #176]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	608b      	str	r3, [r1, #8]
 8001ce4:	e006      	b.n	8001cf4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ce6:	4b2a      	ldr	r3, [pc, #168]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	4928      	ldr	r1, [pc, #160]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d006      	beq.n	8001d0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d00:	4b23      	ldr	r3, [pc, #140]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	4922      	ldr	r1, [pc, #136]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	60cb      	str	r3, [r1, #12]
 8001d0c:	e006      	b.n	8001d1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d0e:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	491e      	ldr	r1, [pc, #120]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d006      	beq.n	8001d36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d28:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	4918      	ldr	r1, [pc, #96]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	604b      	str	r3, [r1, #4]
 8001d34:	e006      	b.n	8001d44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d36:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	4914      	ldr	r1, [pc, #80]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d021      	beq.n	8001d94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	490e      	ldr	r1, [pc, #56]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	600b      	str	r3, [r1, #0]
 8001d5c:	e021      	b.n	8001da2 <HAL_GPIO_Init+0x2e2>
 8001d5e:	bf00      	nop
 8001d60:	10320000 	.word	0x10320000
 8001d64:	10310000 	.word	0x10310000
 8001d68:	10220000 	.word	0x10220000
 8001d6c:	10210000 	.word	0x10210000
 8001d70:	10120000 	.word	0x10120000
 8001d74:	10110000 	.word	0x10110000
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40010000 	.word	0x40010000
 8001d80:	40010800 	.word	0x40010800
 8001d84:	40010c00 	.word	0x40010c00
 8001d88:	40011000 	.word	0x40011000
 8001d8c:	40011400 	.word	0x40011400
 8001d90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <HAL_GPIO_Init+0x304>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	4909      	ldr	r1, [pc, #36]	; (8001dc4 <HAL_GPIO_Init+0x304>)
 8001d9e:	4013      	ands	r3, r2
 8001da0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	3301      	adds	r3, #1
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	fa22 f303 	lsr.w	r3, r2, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f47f ae8e 	bne.w	8001ad4 <HAL_GPIO_Init+0x14>
  }
}
 8001db8:	bf00      	nop
 8001dba:	bf00      	nop
 8001dbc:	372c      	adds	r7, #44	; 0x2c
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	40010400 	.word	0x40010400

08001dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	807b      	strh	r3, [r7, #2]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dd8:	787b      	ldrb	r3, [r7, #1]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dde:	887a      	ldrh	r2, [r7, #2]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001de4:	e003      	b.n	8001dee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001de6:	887b      	ldrh	r3, [r7, #2]
 8001de8:	041a      	lsls	r2, r3, #16
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	611a      	str	r2, [r3, #16]
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e12b      	b.n	8002062 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d106      	bne.n	8001e24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff fb62 	bl	80014e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2224      	movs	r2, #36	; 0x24
 8001e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 0201 	bic.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e5c:	f001 fbca 	bl	80035f4 <HAL_RCC_GetPCLK1Freq>
 8001e60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	4a81      	ldr	r2, [pc, #516]	; (800206c <HAL_I2C_Init+0x274>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d807      	bhi.n	8001e7c <HAL_I2C_Init+0x84>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4a80      	ldr	r2, [pc, #512]	; (8002070 <HAL_I2C_Init+0x278>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	bf94      	ite	ls
 8001e74:	2301      	movls	r3, #1
 8001e76:	2300      	movhi	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	e006      	b.n	8001e8a <HAL_I2C_Init+0x92>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4a7d      	ldr	r2, [pc, #500]	; (8002074 <HAL_I2C_Init+0x27c>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	bf94      	ite	ls
 8001e84:	2301      	movls	r3, #1
 8001e86:	2300      	movhi	r3, #0
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e0e7      	b.n	8002062 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	4a78      	ldr	r2, [pc, #480]	; (8002078 <HAL_I2C_Init+0x280>)
 8001e96:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9a:	0c9b      	lsrs	r3, r3, #18
 8001e9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68ba      	ldr	r2, [r7, #8]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	4a6a      	ldr	r2, [pc, #424]	; (800206c <HAL_I2C_Init+0x274>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d802      	bhi.n	8001ecc <HAL_I2C_Init+0xd4>
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	e009      	b.n	8001ee0 <HAL_I2C_Init+0xe8>
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ed2:	fb02 f303 	mul.w	r3, r2, r3
 8001ed6:	4a69      	ldr	r2, [pc, #420]	; (800207c <HAL_I2C_Init+0x284>)
 8001ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8001edc:	099b      	lsrs	r3, r3, #6
 8001ede:	3301      	adds	r3, #1
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	430b      	orrs	r3, r1
 8001ee6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ef2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	495c      	ldr	r1, [pc, #368]	; (800206c <HAL_I2C_Init+0x274>)
 8001efc:	428b      	cmp	r3, r1
 8001efe:	d819      	bhi.n	8001f34 <HAL_I2C_Init+0x13c>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	1e59      	subs	r1, r3, #1
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f0e:	1c59      	adds	r1, r3, #1
 8001f10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f14:	400b      	ands	r3, r1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00a      	beq.n	8001f30 <HAL_I2C_Init+0x138>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	1e59      	subs	r1, r3, #1
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f28:	3301      	adds	r3, #1
 8001f2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f2e:	e051      	b.n	8001fd4 <HAL_I2C_Init+0x1dc>
 8001f30:	2304      	movs	r3, #4
 8001f32:	e04f      	b.n	8001fd4 <HAL_I2C_Init+0x1dc>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d111      	bne.n	8001f60 <HAL_I2C_Init+0x168>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	1e58      	subs	r0, r3, #1
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6859      	ldr	r1, [r3, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	440b      	add	r3, r1
 8001f4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f4e:	3301      	adds	r3, #1
 8001f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	bf0c      	ite	eq
 8001f58:	2301      	moveq	r3, #1
 8001f5a:	2300      	movne	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	e012      	b.n	8001f86 <HAL_I2C_Init+0x18e>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	1e58      	subs	r0, r3, #1
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6859      	ldr	r1, [r3, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	0099      	lsls	r1, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f76:	3301      	adds	r3, #1
 8001f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	bf0c      	ite	eq
 8001f80:	2301      	moveq	r3, #1
 8001f82:	2300      	movne	r3, #0
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_I2C_Init+0x196>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e022      	b.n	8001fd4 <HAL_I2C_Init+0x1dc>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10e      	bne.n	8001fb4 <HAL_I2C_Init+0x1bc>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	1e58      	subs	r0, r3, #1
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6859      	ldr	r1, [r3, #4]
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	440b      	add	r3, r1
 8001fa4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fa8:	3301      	adds	r3, #1
 8001faa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fb2:	e00f      	b.n	8001fd4 <HAL_I2C_Init+0x1dc>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	1e58      	subs	r0, r3, #1
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6859      	ldr	r1, [r3, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	0099      	lsls	r1, r3, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fca:	3301      	adds	r3, #1
 8001fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	6809      	ldr	r1, [r1, #0]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69da      	ldr	r2, [r3, #28]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002002:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6911      	ldr	r1, [r2, #16]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	68d2      	ldr	r2, [r2, #12]
 800200e:	4311      	orrs	r1, r2
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	430b      	orrs	r3, r1
 8002016:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	695a      	ldr	r2, [r3, #20]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0201 	orr.w	r2, r2, #1
 8002042:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2220      	movs	r2, #32
 800204e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	000186a0 	.word	0x000186a0
 8002070:	001e847f 	.word	0x001e847f
 8002074:	003d08ff 	.word	0x003d08ff
 8002078:	431bde83 	.word	0x431bde83
 800207c:	10624dd3 	.word	0x10624dd3

08002080 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af02      	add	r7, sp, #8
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	607a      	str	r2, [r7, #4]
 800208a:	461a      	mov	r2, r3
 800208c:	460b      	mov	r3, r1
 800208e:	817b      	strh	r3, [r7, #10]
 8002090:	4613      	mov	r3, r2
 8002092:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002094:	f7ff fc02 	bl	800189c <HAL_GetTick>
 8002098:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b20      	cmp	r3, #32
 80020a4:	f040 80e0 	bne.w	8002268 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	2319      	movs	r3, #25
 80020ae:	2201      	movs	r2, #1
 80020b0:	4970      	ldr	r1, [pc, #448]	; (8002274 <HAL_I2C_Master_Transmit+0x1f4>)
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 fc9e 	bl	80029f4 <I2C_WaitOnFlagUntilTimeout>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80020be:	2302      	movs	r3, #2
 80020c0:	e0d3      	b.n	800226a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d101      	bne.n	80020d0 <HAL_I2C_Master_Transmit+0x50>
 80020cc:	2302      	movs	r3, #2
 80020ce:	e0cc      	b.n	800226a <HAL_I2C_Master_Transmit+0x1ea>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d007      	beq.n	80020f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f042 0201 	orr.w	r2, r2, #1
 80020f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002104:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2221      	movs	r2, #33	; 0x21
 800210a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2210      	movs	r2, #16
 8002112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	893a      	ldrh	r2, [r7, #8]
 8002126:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800212c:	b29a      	uxth	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4a50      	ldr	r2, [pc, #320]	; (8002278 <HAL_I2C_Master_Transmit+0x1f8>)
 8002136:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002138:	8979      	ldrh	r1, [r7, #10]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	6a3a      	ldr	r2, [r7, #32]
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 fb08 	bl	8002754 <I2C_MasterRequestWrite>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e08d      	b.n	800226a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002164:	e066      	b.n	8002234 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	6a39      	ldr	r1, [r7, #32]
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f000 fd5c 	bl	8002c28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00d      	beq.n	8002192 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	2b04      	cmp	r3, #4
 800217c:	d107      	bne.n	800218e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800218c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e06b      	b.n	800226a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	781a      	ldrb	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	3b01      	subs	r3, #1
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ba:	3b01      	subs	r3, #1
 80021bc:	b29a      	uxth	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d11b      	bne.n	8002208 <HAL_I2C_Master_Transmit+0x188>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d017      	beq.n	8002208 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	781a      	ldrb	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	3b01      	subs	r3, #1
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002200:	3b01      	subs	r3, #1
 8002202:	b29a      	uxth	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	6a39      	ldr	r1, [r7, #32]
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f000 fd53 	bl	8002cb8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00d      	beq.n	8002234 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	2b04      	cmp	r3, #4
 800221e:	d107      	bne.n	8002230 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800222e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e01a      	b.n	800226a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002238:	2b00      	cmp	r3, #0
 800223a:	d194      	bne.n	8002166 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800224a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2220      	movs	r2, #32
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002264:	2300      	movs	r3, #0
 8002266:	e000      	b.n	800226a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002268:	2302      	movs	r3, #2
  }
}
 800226a:	4618      	mov	r0, r3
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	00100002 	.word	0x00100002
 8002278:	ffff0000 	.word	0xffff0000

0800227c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08c      	sub	sp, #48	; 0x30
 8002280:	af02      	add	r7, sp, #8
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	607a      	str	r2, [r7, #4]
 8002286:	461a      	mov	r2, r3
 8002288:	460b      	mov	r3, r1
 800228a:	817b      	strh	r3, [r7, #10]
 800228c:	4613      	mov	r3, r2
 800228e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002290:	2300      	movs	r3, #0
 8002292:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002294:	f7ff fb02 	bl	800189c <HAL_GetTick>
 8002298:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b20      	cmp	r3, #32
 80022a4:	f040 824b 	bne.w	800273e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	2319      	movs	r3, #25
 80022ae:	2201      	movs	r2, #1
 80022b0:	497f      	ldr	r1, [pc, #508]	; (80024b0 <HAL_I2C_Master_Receive+0x234>)
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 fb9e 	bl	80029f4 <I2C_WaitOnFlagUntilTimeout>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80022be:	2302      	movs	r3, #2
 80022c0:	e23e      	b.n	8002740 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_I2C_Master_Receive+0x54>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e237      	b.n	8002740 <HAL_I2C_Master_Receive+0x4c4>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d007      	beq.n	80022f6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f042 0201 	orr.w	r2, r2, #1
 80022f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002304:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2222      	movs	r2, #34	; 0x22
 800230a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2210      	movs	r2, #16
 8002312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	893a      	ldrh	r2, [r7, #8]
 8002326:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232c:	b29a      	uxth	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4a5f      	ldr	r2, [pc, #380]	; (80024b4 <HAL_I2C_Master_Receive+0x238>)
 8002336:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002338:	8979      	ldrh	r1, [r7, #10]
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 fa8a 	bl	8002858 <I2C_MasterRequestRead>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e1f8      	b.n	8002740 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002352:	2b00      	cmp	r3, #0
 8002354:	d113      	bne.n	800237e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	61fb      	str	r3, [r7, #28]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	61fb      	str	r3, [r7, #28]
 800236a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	e1cc      	b.n	8002718 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002382:	2b01      	cmp	r3, #1
 8002384:	d11e      	bne.n	80023c4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002394:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002396:	b672      	cpsid	i
}
 8002398:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	61bb      	str	r3, [r7, #24]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	61bb      	str	r3, [r7, #24]
 80023ae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80023c0:	b662      	cpsie	i
}
 80023c2:	e035      	b.n	8002430 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d11e      	bne.n	800240a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80023dc:	b672      	cpsid	i
}
 80023de:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	617b      	str	r3, [r7, #20]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002404:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002406:	b662      	cpsie	i
}
 8002408:	e012      	b.n	8002430 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002418:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800241a:	2300      	movs	r3, #0
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	613b      	str	r3, [r7, #16]
 800242e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002430:	e172      	b.n	8002718 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002436:	2b03      	cmp	r3, #3
 8002438:	f200 811f 	bhi.w	800267a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002440:	2b01      	cmp	r3, #1
 8002442:	d123      	bne.n	800248c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002446:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 fc7d 	bl	8002d48 <I2C_WaitOnRXNEFlagUntilTimeout>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e173      	b.n	8002740 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	691a      	ldr	r2, [r3, #16]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002474:	3b01      	subs	r3, #1
 8002476:	b29a      	uxth	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002480:	b29b      	uxth	r3, r3
 8002482:	3b01      	subs	r3, #1
 8002484:	b29a      	uxth	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	855a      	strh	r2, [r3, #42]	; 0x2a
 800248a:	e145      	b.n	8002718 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002490:	2b02      	cmp	r3, #2
 8002492:	d152      	bne.n	800253a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249a:	2200      	movs	r2, #0
 800249c:	4906      	ldr	r1, [pc, #24]	; (80024b8 <HAL_I2C_Master_Receive+0x23c>)
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 faa8 	bl	80029f4 <I2C_WaitOnFlagUntilTimeout>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d008      	beq.n	80024bc <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e148      	b.n	8002740 <HAL_I2C_Master_Receive+0x4c4>
 80024ae:	bf00      	nop
 80024b0:	00100002 	.word	0x00100002
 80024b4:	ffff0000 	.word	0xffff0000
 80024b8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80024bc:	b672      	cpsid	i
}
 80024be:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691a      	ldr	r2, [r3, #16]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ec:	3b01      	subs	r3, #1
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	3b01      	subs	r3, #1
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002502:	b662      	cpsie	i
}
 8002504:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252e:	b29b      	uxth	r3, r3
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002538:	e0ee      	b.n	8002718 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002540:	2200      	movs	r2, #0
 8002542:	4981      	ldr	r1, [pc, #516]	; (8002748 <HAL_I2C_Master_Receive+0x4cc>)
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 fa55 	bl	80029f4 <I2C_WaitOnFlagUntilTimeout>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0f5      	b.n	8002740 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002562:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002564:	b672      	cpsid	i
}
 8002566:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	691a      	ldr	r2, [r3, #16]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002584:	3b01      	subs	r3, #1
 8002586:	b29a      	uxth	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002590:	b29b      	uxth	r3, r3
 8002592:	3b01      	subs	r3, #1
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800259a:	4b6c      	ldr	r3, [pc, #432]	; (800274c <HAL_I2C_Master_Receive+0x4d0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	08db      	lsrs	r3, r3, #3
 80025a0:	4a6b      	ldr	r2, [pc, #428]	; (8002750 <HAL_I2C_Master_Receive+0x4d4>)
 80025a2:	fba2 2303 	umull	r2, r3, r2, r3
 80025a6:	0a1a      	lsrs	r2, r3, #8
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	00da      	lsls	r2, r3, #3
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80025b4:	6a3b      	ldr	r3, [r7, #32]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d118      	bne.n	80025f2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2220      	movs	r2, #32
 80025ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f043 0220 	orr.w	r2, r3, #32
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80025e2:	b662      	cpsie	i
}
 80025e4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e0a6      	b.n	8002740 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d1d9      	bne.n	80025b4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800260e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	691a      	ldr	r2, [r3, #16]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262c:	3b01      	subs	r3, #1
 800262e:	b29a      	uxth	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002638:	b29b      	uxth	r3, r3
 800263a:	3b01      	subs	r3, #1
 800263c:	b29a      	uxth	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002642:	b662      	cpsie	i
}
 8002644:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002662:	3b01      	subs	r3, #1
 8002664:	b29a      	uxth	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266e:	b29b      	uxth	r3, r3
 8002670:	3b01      	subs	r3, #1
 8002672:	b29a      	uxth	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002678:	e04e      	b.n	8002718 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800267a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800267c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f000 fb62 	bl	8002d48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e058      	b.n	8002740 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026aa:	3b01      	subs	r3, #1
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	3b01      	subs	r3, #1
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	d124      	bne.n	8002718 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d107      	bne.n	80026e6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026e4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	691a      	ldr	r2, [r3, #16]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002702:	3b01      	subs	r3, #1
 8002704:	b29a      	uxth	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270e:	b29b      	uxth	r3, r3
 8002710:	3b01      	subs	r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271c:	2b00      	cmp	r3, #0
 800271e:	f47f ae88 	bne.w	8002432 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2220      	movs	r2, #32
 8002726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	e000      	b.n	8002740 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800273e:	2302      	movs	r3, #2
  }
}
 8002740:	4618      	mov	r0, r3
 8002742:	3728      	adds	r7, #40	; 0x28
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	00010004 	.word	0x00010004
 800274c:	20000070 	.word	0x20000070
 8002750:	14f8b589 	.word	0x14f8b589

08002754 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	af02      	add	r7, sp, #8
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	607a      	str	r2, [r7, #4]
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	460b      	mov	r3, r1
 8002762:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002768:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	2b08      	cmp	r3, #8
 800276e:	d006      	beq.n	800277e <I2C_MasterRequestWrite+0x2a>
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d003      	beq.n	800277e <I2C_MasterRequestWrite+0x2a>
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800277c:	d108      	bne.n	8002790 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	e00b      	b.n	80027a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002794:	2b12      	cmp	r3, #18
 8002796:	d107      	bne.n	80027a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 f91d 	bl	80029f4 <I2C_WaitOnFlagUntilTimeout>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00d      	beq.n	80027dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ce:	d103      	bne.n	80027d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e035      	b.n	8002848 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027e4:	d108      	bne.n	80027f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027e6:	897b      	ldrh	r3, [r7, #10]
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	461a      	mov	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027f4:	611a      	str	r2, [r3, #16]
 80027f6:	e01b      	b.n	8002830 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80027f8:	897b      	ldrh	r3, [r7, #10]
 80027fa:	11db      	asrs	r3, r3, #7
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	f003 0306 	and.w	r3, r3, #6
 8002802:	b2db      	uxtb	r3, r3
 8002804:	f063 030f 	orn	r3, r3, #15
 8002808:	b2da      	uxtb	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	490e      	ldr	r1, [pc, #56]	; (8002850 <I2C_MasterRequestWrite+0xfc>)
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 f966 	bl	8002ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e010      	b.n	8002848 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002826:	897b      	ldrh	r3, [r7, #10]
 8002828:	b2da      	uxtb	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	4907      	ldr	r1, [pc, #28]	; (8002854 <I2C_MasterRequestWrite+0x100>)
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 f956 	bl	8002ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	00010008 	.word	0x00010008
 8002854:	00010002 	.word	0x00010002

08002858 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b088      	sub	sp, #32
 800285c:	af02      	add	r7, sp, #8
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	607a      	str	r2, [r7, #4]
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	460b      	mov	r3, r1
 8002866:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800287c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	2b08      	cmp	r3, #8
 8002882:	d006      	beq.n	8002892 <I2C_MasterRequestRead+0x3a>
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d003      	beq.n	8002892 <I2C_MasterRequestRead+0x3a>
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002890:	d108      	bne.n	80028a4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	e00b      	b.n	80028bc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	2b11      	cmp	r3, #17
 80028aa:	d107      	bne.n	80028bc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 f893 	bl	80029f4 <I2C_WaitOnFlagUntilTimeout>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00d      	beq.n	80028f0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028e2:	d103      	bne.n	80028ec <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e079      	b.n	80029e4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028f8:	d108      	bne.n	800290c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80028fa:	897b      	ldrh	r3, [r7, #10]
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	f043 0301 	orr.w	r3, r3, #1
 8002902:	b2da      	uxtb	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	611a      	str	r2, [r3, #16]
 800290a:	e05f      	b.n	80029cc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800290c:	897b      	ldrh	r3, [r7, #10]
 800290e:	11db      	asrs	r3, r3, #7
 8002910:	b2db      	uxtb	r3, r3
 8002912:	f003 0306 	and.w	r3, r3, #6
 8002916:	b2db      	uxtb	r3, r3
 8002918:	f063 030f 	orn	r3, r3, #15
 800291c:	b2da      	uxtb	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	4930      	ldr	r1, [pc, #192]	; (80029ec <I2C_MasterRequestRead+0x194>)
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 f8dc 	bl	8002ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e054      	b.n	80029e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800293a:	897b      	ldrh	r3, [r7, #10]
 800293c:	b2da      	uxtb	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	4929      	ldr	r1, [pc, #164]	; (80029f0 <I2C_MasterRequestRead+0x198>)
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 f8cc 	bl	8002ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e044      	b.n	80029e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800295a:	2300      	movs	r3, #0
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	613b      	str	r3, [r7, #16]
 800296e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800297e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f000 f831 	bl	80029f4 <I2C_WaitOnFlagUntilTimeout>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00d      	beq.n	80029b4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029a6:	d103      	bne.n	80029b0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029ae:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e017      	b.n	80029e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80029b4:	897b      	ldrh	r3, [r7, #10]
 80029b6:	11db      	asrs	r3, r3, #7
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	f003 0306 	and.w	r3, r3, #6
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	f063 030e 	orn	r3, r3, #14
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	4907      	ldr	r1, [pc, #28]	; (80029f0 <I2C_MasterRequestRead+0x198>)
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 f888 	bl	8002ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	00010008 	.word	0x00010008
 80029f0:	00010002 	.word	0x00010002

080029f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	603b      	str	r3, [r7, #0]
 8002a00:	4613      	mov	r3, r2
 8002a02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a04:	e048      	b.n	8002a98 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0c:	d044      	beq.n	8002a98 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a0e:	f7fe ff45 	bl	800189c <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d302      	bcc.n	8002a24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d139      	bne.n	8002a98 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	0c1b      	lsrs	r3, r3, #16
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d10d      	bne.n	8002a4a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	43da      	mvns	r2, r3
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	bf0c      	ite	eq
 8002a40:	2301      	moveq	r3, #1
 8002a42:	2300      	movne	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	461a      	mov	r2, r3
 8002a48:	e00c      	b.n	8002a64 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	43da      	mvns	r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	4013      	ands	r3, r2
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	bf0c      	ite	eq
 8002a5c:	2301      	moveq	r3, #1
 8002a5e:	2300      	movne	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	461a      	mov	r2, r3
 8002a64:	79fb      	ldrb	r3, [r7, #7]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d116      	bne.n	8002a98 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2220      	movs	r2, #32
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	f043 0220 	orr.w	r2, r3, #32
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e023      	b.n	8002ae0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	0c1b      	lsrs	r3, r3, #16
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d10d      	bne.n	8002abe <I2C_WaitOnFlagUntilTimeout+0xca>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	43da      	mvns	r2, r3
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	4013      	ands	r3, r2
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	bf0c      	ite	eq
 8002ab4:	2301      	moveq	r3, #1
 8002ab6:	2300      	movne	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	461a      	mov	r2, r3
 8002abc:	e00c      	b.n	8002ad8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	43da      	mvns	r2, r3
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	bf0c      	ite	eq
 8002ad0:	2301      	moveq	r3, #1
 8002ad2:	2300      	movne	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	79fb      	ldrb	r3, [r7, #7]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d093      	beq.n	8002a06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
 8002af4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002af6:	e071      	b.n	8002bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b06:	d123      	bne.n	8002b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b16:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	f043 0204 	orr.w	r2, r3, #4
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e067      	b.n	8002c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b56:	d041      	beq.n	8002bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b58:	f7fe fea0 	bl	800189c <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d302      	bcc.n	8002b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d136      	bne.n	8002bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	0c1b      	lsrs	r3, r3, #16
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d10c      	bne.n	8002b92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	43da      	mvns	r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	4013      	ands	r3, r2
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	bf14      	ite	ne
 8002b8a:	2301      	movne	r3, #1
 8002b8c:	2300      	moveq	r3, #0
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	e00b      	b.n	8002baa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	43da      	mvns	r2, r3
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	bf14      	ite	ne
 8002ba4:	2301      	movne	r3, #1
 8002ba6:	2300      	moveq	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d016      	beq.n	8002bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	f043 0220 	orr.w	r2, r3, #32
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e021      	b.n	8002c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	0c1b      	lsrs	r3, r3, #16
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d10c      	bne.n	8002c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	43da      	mvns	r2, r3
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	bf14      	ite	ne
 8002bf8:	2301      	movne	r3, #1
 8002bfa:	2300      	moveq	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	e00b      	b.n	8002c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	43da      	mvns	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	bf14      	ite	ne
 8002c12:	2301      	movne	r3, #1
 8002c14:	2300      	moveq	r3, #0
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f47f af6d 	bne.w	8002af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c34:	e034      	b.n	8002ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 f8e3 	bl	8002e02 <I2C_IsAcknowledgeFailed>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e034      	b.n	8002cb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4c:	d028      	beq.n	8002ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4e:	f7fe fe25 	bl	800189c <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d302      	bcc.n	8002c64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d11d      	bne.n	8002ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6e:	2b80      	cmp	r3, #128	; 0x80
 8002c70:	d016      	beq.n	8002ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	f043 0220 	orr.w	r2, r3, #32
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e007      	b.n	8002cb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002caa:	2b80      	cmp	r3, #128	; 0x80
 8002cac:	d1c3      	bne.n	8002c36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cc4:	e034      	b.n	8002d30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 f89b 	bl	8002e02 <I2C_IsAcknowledgeFailed>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e034      	b.n	8002d40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cdc:	d028      	beq.n	8002d30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cde:	f7fe fddd 	bl	800189c <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d302      	bcc.n	8002cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d11d      	bne.n	8002d30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	d016      	beq.n	8002d30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	f043 0220 	orr.w	r2, r3, #32
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e007      	b.n	8002d40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	f003 0304 	and.w	r3, r3, #4
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d1c3      	bne.n	8002cc6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d54:	e049      	b.n	8002dea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	2b10      	cmp	r3, #16
 8002d62:	d119      	bne.n	8002d98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f06f 0210 	mvn.w	r2, #16
 8002d6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e030      	b.n	8002dfa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d98:	f7fe fd80 	bl	800189c <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d302      	bcc.n	8002dae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d11d      	bne.n	8002dea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db8:	2b40      	cmp	r3, #64	; 0x40
 8002dba:	d016      	beq.n	8002dea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	f043 0220 	orr.w	r2, r3, #32
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e007      	b.n	8002dfa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df4:	2b40      	cmp	r3, #64	; 0x40
 8002df6:	d1ae      	bne.n	8002d56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e18:	d11b      	bne.n	8002e52 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e22:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	f043 0204 	orr.w	r2, r3, #4
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr
	...

08002e60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e272      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 8087 	beq.w	8002f8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e80:	4b92      	ldr	r3, [pc, #584]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 030c 	and.w	r3, r3, #12
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d00c      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e8c:	4b8f      	ldr	r3, [pc, #572]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 030c 	and.w	r3, r3, #12
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d112      	bne.n	8002ebe <HAL_RCC_OscConfig+0x5e>
 8002e98:	4b8c      	ldr	r3, [pc, #560]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea4:	d10b      	bne.n	8002ebe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea6:	4b89      	ldr	r3, [pc, #548]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d06c      	beq.n	8002f8c <HAL_RCC_OscConfig+0x12c>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d168      	bne.n	8002f8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e24c      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec6:	d106      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x76>
 8002ec8:	4b80      	ldr	r3, [pc, #512]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a7f      	ldr	r2, [pc, #508]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed2:	6013      	str	r3, [r2, #0]
 8002ed4:	e02e      	b.n	8002f34 <HAL_RCC_OscConfig+0xd4>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10c      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x98>
 8002ede:	4b7b      	ldr	r3, [pc, #492]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a7a      	ldr	r2, [pc, #488]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	4b78      	ldr	r3, [pc, #480]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a77      	ldr	r2, [pc, #476]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002ef0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	e01d      	b.n	8002f34 <HAL_RCC_OscConfig+0xd4>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f00:	d10c      	bne.n	8002f1c <HAL_RCC_OscConfig+0xbc>
 8002f02:	4b72      	ldr	r3, [pc, #456]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a71      	ldr	r2, [pc, #452]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	4b6f      	ldr	r3, [pc, #444]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a6e      	ldr	r2, [pc, #440]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	e00b      	b.n	8002f34 <HAL_RCC_OscConfig+0xd4>
 8002f1c:	4b6b      	ldr	r3, [pc, #428]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a6a      	ldr	r2, [pc, #424]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f26:	6013      	str	r3, [r2, #0]
 8002f28:	4b68      	ldr	r3, [pc, #416]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a67      	ldr	r2, [pc, #412]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d013      	beq.n	8002f64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3c:	f7fe fcae 	bl	800189c <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f44:	f7fe fcaa 	bl	800189c <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b64      	cmp	r3, #100	; 0x64
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e200      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f56:	4b5d      	ldr	r3, [pc, #372]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0f0      	beq.n	8002f44 <HAL_RCC_OscConfig+0xe4>
 8002f62:	e014      	b.n	8002f8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f64:	f7fe fc9a 	bl	800189c <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f6c:	f7fe fc96 	bl	800189c <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b64      	cmp	r3, #100	; 0x64
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e1ec      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7e:	4b53      	ldr	r3, [pc, #332]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0x10c>
 8002f8a:	e000      	b.n	8002f8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d063      	beq.n	8003062 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f9a:	4b4c      	ldr	r3, [pc, #304]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f003 030c 	and.w	r3, r3, #12
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00b      	beq.n	8002fbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fa6:	4b49      	ldr	r3, [pc, #292]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f003 030c 	and.w	r3, r3, #12
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d11c      	bne.n	8002fec <HAL_RCC_OscConfig+0x18c>
 8002fb2:	4b46      	ldr	r3, [pc, #280]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d116      	bne.n	8002fec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fbe:	4b43      	ldr	r3, [pc, #268]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d005      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x176>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d001      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e1c0      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd6:	4b3d      	ldr	r3, [pc, #244]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	4939      	ldr	r1, [pc, #228]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fea:	e03a      	b.n	8003062 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d020      	beq.n	8003036 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ff4:	4b36      	ldr	r3, [pc, #216]	; (80030d0 <HAL_RCC_OscConfig+0x270>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffa:	f7fe fc4f 	bl	800189c <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003002:	f7fe fc4b 	bl	800189c <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e1a1      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003014:	4b2d      	ldr	r3, [pc, #180]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0f0      	beq.n	8003002 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003020:	4b2a      	ldr	r3, [pc, #168]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	4927      	ldr	r1, [pc, #156]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8003030:	4313      	orrs	r3, r2
 8003032:	600b      	str	r3, [r1, #0]
 8003034:	e015      	b.n	8003062 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003036:	4b26      	ldr	r3, [pc, #152]	; (80030d0 <HAL_RCC_OscConfig+0x270>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303c:	f7fe fc2e 	bl	800189c <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003044:	f7fe fc2a 	bl	800189c <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e180      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003056:	4b1d      	ldr	r3, [pc, #116]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f0      	bne.n	8003044 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b00      	cmp	r3, #0
 800306c:	d03a      	beq.n	80030e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d019      	beq.n	80030aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003076:	4b17      	ldr	r3, [pc, #92]	; (80030d4 <HAL_RCC_OscConfig+0x274>)
 8003078:	2201      	movs	r2, #1
 800307a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800307c:	f7fe fc0e 	bl	800189c <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003084:	f7fe fc0a 	bl	800189c <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e160      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003096:	4b0d      	ldr	r3, [pc, #52]	; (80030cc <HAL_RCC_OscConfig+0x26c>)
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0f0      	beq.n	8003084 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030a2:	2001      	movs	r0, #1
 80030a4:	f000 faba 	bl	800361c <RCC_Delay>
 80030a8:	e01c      	b.n	80030e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030aa:	4b0a      	ldr	r3, [pc, #40]	; (80030d4 <HAL_RCC_OscConfig+0x274>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b0:	f7fe fbf4 	bl	800189c <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b6:	e00f      	b.n	80030d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030b8:	f7fe fbf0 	bl	800189c <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d908      	bls.n	80030d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e146      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
 80030ca:	bf00      	nop
 80030cc:	40021000 	.word	0x40021000
 80030d0:	42420000 	.word	0x42420000
 80030d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d8:	4b92      	ldr	r3, [pc, #584]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1e9      	bne.n	80030b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 80a6 	beq.w	800323e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030f2:	2300      	movs	r3, #0
 80030f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030f6:	4b8b      	ldr	r3, [pc, #556]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10d      	bne.n	800311e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003102:	4b88      	ldr	r3, [pc, #544]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	4a87      	ldr	r2, [pc, #540]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 8003108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800310c:	61d3      	str	r3, [r2, #28]
 800310e:	4b85      	ldr	r3, [pc, #532]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003116:	60bb      	str	r3, [r7, #8]
 8003118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800311a:	2301      	movs	r3, #1
 800311c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311e:	4b82      	ldr	r3, [pc, #520]	; (8003328 <HAL_RCC_OscConfig+0x4c8>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003126:	2b00      	cmp	r3, #0
 8003128:	d118      	bne.n	800315c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800312a:	4b7f      	ldr	r3, [pc, #508]	; (8003328 <HAL_RCC_OscConfig+0x4c8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a7e      	ldr	r2, [pc, #504]	; (8003328 <HAL_RCC_OscConfig+0x4c8>)
 8003130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003136:	f7fe fbb1 	bl	800189c <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800313e:	f7fe fbad 	bl	800189c <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b64      	cmp	r3, #100	; 0x64
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e103      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003150:	4b75      	ldr	r3, [pc, #468]	; (8003328 <HAL_RCC_OscConfig+0x4c8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0f0      	beq.n	800313e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d106      	bne.n	8003172 <HAL_RCC_OscConfig+0x312>
 8003164:	4b6f      	ldr	r3, [pc, #444]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	4a6e      	ldr	r2, [pc, #440]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	6213      	str	r3, [r2, #32]
 8003170:	e02d      	b.n	80031ce <HAL_RCC_OscConfig+0x36e>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10c      	bne.n	8003194 <HAL_RCC_OscConfig+0x334>
 800317a:	4b6a      	ldr	r3, [pc, #424]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	4a69      	ldr	r2, [pc, #420]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 8003180:	f023 0301 	bic.w	r3, r3, #1
 8003184:	6213      	str	r3, [r2, #32]
 8003186:	4b67      	ldr	r3, [pc, #412]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	4a66      	ldr	r2, [pc, #408]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 800318c:	f023 0304 	bic.w	r3, r3, #4
 8003190:	6213      	str	r3, [r2, #32]
 8003192:	e01c      	b.n	80031ce <HAL_RCC_OscConfig+0x36e>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	2b05      	cmp	r3, #5
 800319a:	d10c      	bne.n	80031b6 <HAL_RCC_OscConfig+0x356>
 800319c:	4b61      	ldr	r3, [pc, #388]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	4a60      	ldr	r2, [pc, #384]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80031a2:	f043 0304 	orr.w	r3, r3, #4
 80031a6:	6213      	str	r3, [r2, #32]
 80031a8:	4b5e      	ldr	r3, [pc, #376]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	4a5d      	ldr	r2, [pc, #372]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	6213      	str	r3, [r2, #32]
 80031b4:	e00b      	b.n	80031ce <HAL_RCC_OscConfig+0x36e>
 80031b6:	4b5b      	ldr	r3, [pc, #364]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	4a5a      	ldr	r2, [pc, #360]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80031bc:	f023 0301 	bic.w	r3, r3, #1
 80031c0:	6213      	str	r3, [r2, #32]
 80031c2:	4b58      	ldr	r3, [pc, #352]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	4a57      	ldr	r2, [pc, #348]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80031c8:	f023 0304 	bic.w	r3, r3, #4
 80031cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d015      	beq.n	8003202 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d6:	f7fe fb61 	bl	800189c <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031dc:	e00a      	b.n	80031f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031de:	f7fe fb5d 	bl	800189c <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e0b1      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f4:	4b4b      	ldr	r3, [pc, #300]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0ee      	beq.n	80031de <HAL_RCC_OscConfig+0x37e>
 8003200:	e014      	b.n	800322c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003202:	f7fe fb4b 	bl	800189c <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003208:	e00a      	b.n	8003220 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800320a:	f7fe fb47 	bl	800189c <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	f241 3288 	movw	r2, #5000	; 0x1388
 8003218:	4293      	cmp	r3, r2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e09b      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003220:	4b40      	ldr	r3, [pc, #256]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1ee      	bne.n	800320a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800322c:	7dfb      	ldrb	r3, [r7, #23]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d105      	bne.n	800323e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003232:	4b3c      	ldr	r3, [pc, #240]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	4a3b      	ldr	r2, [pc, #236]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 8003238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800323c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 8087 	beq.w	8003356 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003248:	4b36      	ldr	r3, [pc, #216]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f003 030c 	and.w	r3, r3, #12
 8003250:	2b08      	cmp	r3, #8
 8003252:	d061      	beq.n	8003318 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	2b02      	cmp	r3, #2
 800325a:	d146      	bne.n	80032ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325c:	4b33      	ldr	r3, [pc, #204]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003262:	f7fe fb1b 	bl	800189c <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800326a:	f7fe fb17 	bl	800189c <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e06d      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800327c:	4b29      	ldr	r3, [pc, #164]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1f0      	bne.n	800326a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003290:	d108      	bne.n	80032a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003292:	4b24      	ldr	r3, [pc, #144]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	4921      	ldr	r1, [pc, #132]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032a4:	4b1f      	ldr	r3, [pc, #124]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a19      	ldr	r1, [r3, #32]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	430b      	orrs	r3, r1
 80032b6:	491b      	ldr	r1, [pc, #108]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032bc:	4b1b      	ldr	r3, [pc, #108]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 80032be:	2201      	movs	r2, #1
 80032c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c2:	f7fe faeb 	bl	800189c <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ca:	f7fe fae7 	bl	800189c <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e03d      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032dc:	4b11      	ldr	r3, [pc, #68]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0f0      	beq.n	80032ca <HAL_RCC_OscConfig+0x46a>
 80032e8:	e035      	b.n	8003356 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ea:	4b10      	ldr	r3, [pc, #64]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f0:	f7fe fad4 	bl	800189c <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f8:	f7fe fad0 	bl	800189c <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e026      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800330a:	4b06      	ldr	r3, [pc, #24]	; (8003324 <HAL_RCC_OscConfig+0x4c4>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f0      	bne.n	80032f8 <HAL_RCC_OscConfig+0x498>
 8003316:	e01e      	b.n	8003356 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d107      	bne.n	8003330 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e019      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
 8003324:	40021000 	.word	0x40021000
 8003328:	40007000 	.word	0x40007000
 800332c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003330:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <HAL_RCC_OscConfig+0x500>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	429a      	cmp	r2, r3
 8003342:	d106      	bne.n	8003352 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800334e:	429a      	cmp	r2, r3
 8003350:	d001      	beq.n	8003356 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40021000 	.word	0x40021000

08003364 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e0d0      	b.n	800351a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003378:	4b6a      	ldr	r3, [pc, #424]	; (8003524 <HAL_RCC_ClockConfig+0x1c0>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	429a      	cmp	r2, r3
 8003384:	d910      	bls.n	80033a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003386:	4b67      	ldr	r3, [pc, #412]	; (8003524 <HAL_RCC_ClockConfig+0x1c0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f023 0207 	bic.w	r2, r3, #7
 800338e:	4965      	ldr	r1, [pc, #404]	; (8003524 <HAL_RCC_ClockConfig+0x1c0>)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	4313      	orrs	r3, r2
 8003394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003396:	4b63      	ldr	r3, [pc, #396]	; (8003524 <HAL_RCC_ClockConfig+0x1c0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e0b8      	b.n	800351a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d020      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033c0:	4b59      	ldr	r3, [pc, #356]	; (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	4a58      	ldr	r2, [pc, #352]	; (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 80033c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0308 	and.w	r3, r3, #8
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d005      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033d8:	4b53      	ldr	r3, [pc, #332]	; (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	4a52      	ldr	r2, [pc, #328]	; (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 80033de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80033e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e4:	4b50      	ldr	r3, [pc, #320]	; (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	494d      	ldr	r1, [pc, #308]	; (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d040      	beq.n	8003484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d107      	bne.n	800341a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340a:	4b47      	ldr	r3, [pc, #284]	; (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d115      	bne.n	8003442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e07f      	b.n	800351a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d107      	bne.n	8003432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003422:	4b41      	ldr	r3, [pc, #260]	; (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d109      	bne.n	8003442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e073      	b.n	800351a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003432:	4b3d      	ldr	r3, [pc, #244]	; (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e06b      	b.n	800351a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003442:	4b39      	ldr	r3, [pc, #228]	; (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f023 0203 	bic.w	r2, r3, #3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	4936      	ldr	r1, [pc, #216]	; (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 8003450:	4313      	orrs	r3, r2
 8003452:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003454:	f7fe fa22 	bl	800189c <HAL_GetTick>
 8003458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800345a:	e00a      	b.n	8003472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800345c:	f7fe fa1e 	bl	800189c <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	f241 3288 	movw	r2, #5000	; 0x1388
 800346a:	4293      	cmp	r3, r2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e053      	b.n	800351a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003472:	4b2d      	ldr	r3, [pc, #180]	; (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f003 020c 	and.w	r2, r3, #12
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	429a      	cmp	r2, r3
 8003482:	d1eb      	bne.n	800345c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003484:	4b27      	ldr	r3, [pc, #156]	; (8003524 <HAL_RCC_ClockConfig+0x1c0>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	429a      	cmp	r2, r3
 8003490:	d210      	bcs.n	80034b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003492:	4b24      	ldr	r3, [pc, #144]	; (8003524 <HAL_RCC_ClockConfig+0x1c0>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f023 0207 	bic.w	r2, r3, #7
 800349a:	4922      	ldr	r1, [pc, #136]	; (8003524 <HAL_RCC_ClockConfig+0x1c0>)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	4313      	orrs	r3, r2
 80034a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a2:	4b20      	ldr	r3, [pc, #128]	; (8003524 <HAL_RCC_ClockConfig+0x1c0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d001      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e032      	b.n	800351a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d008      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034c0:	4b19      	ldr	r3, [pc, #100]	; (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	4916      	ldr	r1, [pc, #88]	; (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d009      	beq.n	80034f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034de:	4b12      	ldr	r3, [pc, #72]	; (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	490e      	ldr	r1, [pc, #56]	; (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034f2:	f000 f821 	bl	8003538 <HAL_RCC_GetSysClockFreq>
 80034f6:	4602      	mov	r2, r0
 80034f8:	4b0b      	ldr	r3, [pc, #44]	; (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	091b      	lsrs	r3, r3, #4
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	490a      	ldr	r1, [pc, #40]	; (800352c <HAL_RCC_ClockConfig+0x1c8>)
 8003504:	5ccb      	ldrb	r3, [r1, r3]
 8003506:	fa22 f303 	lsr.w	r3, r2, r3
 800350a:	4a09      	ldr	r2, [pc, #36]	; (8003530 <HAL_RCC_ClockConfig+0x1cc>)
 800350c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800350e:	4b09      	ldr	r3, [pc, #36]	; (8003534 <HAL_RCC_ClockConfig+0x1d0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f7fe f980 	bl	8001818 <HAL_InitTick>

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40022000 	.word	0x40022000
 8003528:	40021000 	.word	0x40021000
 800352c:	080092e8 	.word	0x080092e8
 8003530:	20000070 	.word	0x20000070
 8003534:	20000074 	.word	0x20000074

08003538 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800353e:	2300      	movs	r3, #0
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	2300      	movs	r3, #0
 8003544:	60bb      	str	r3, [r7, #8]
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]
 800354a:	2300      	movs	r3, #0
 800354c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800354e:	2300      	movs	r3, #0
 8003550:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003552:	4b1e      	ldr	r3, [pc, #120]	; (80035cc <HAL_RCC_GetSysClockFreq+0x94>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f003 030c 	and.w	r3, r3, #12
 800355e:	2b04      	cmp	r3, #4
 8003560:	d002      	beq.n	8003568 <HAL_RCC_GetSysClockFreq+0x30>
 8003562:	2b08      	cmp	r3, #8
 8003564:	d003      	beq.n	800356e <HAL_RCC_GetSysClockFreq+0x36>
 8003566:	e027      	b.n	80035b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003568:	4b19      	ldr	r3, [pc, #100]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800356a:	613b      	str	r3, [r7, #16]
      break;
 800356c:	e027      	b.n	80035be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	0c9b      	lsrs	r3, r3, #18
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	4a17      	ldr	r2, [pc, #92]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003578:	5cd3      	ldrb	r3, [r2, r3]
 800357a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d010      	beq.n	80035a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003586:	4b11      	ldr	r3, [pc, #68]	; (80035cc <HAL_RCC_GetSysClockFreq+0x94>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	0c5b      	lsrs	r3, r3, #17
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	4a11      	ldr	r2, [pc, #68]	; (80035d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003592:	5cd3      	ldrb	r3, [r2, r3]
 8003594:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a0d      	ldr	r2, [pc, #52]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800359a:	fb03 f202 	mul.w	r2, r3, r2
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a4:	617b      	str	r3, [r7, #20]
 80035a6:	e004      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a0c      	ldr	r2, [pc, #48]	; (80035dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80035ac:	fb02 f303 	mul.w	r3, r2, r3
 80035b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	613b      	str	r3, [r7, #16]
      break;
 80035b6:	e002      	b.n	80035be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035b8:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80035ba:	613b      	str	r3, [r7, #16]
      break;
 80035bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035be:	693b      	ldr	r3, [r7, #16]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	371c      	adds	r7, #28
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bc80      	pop	{r7}
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40021000 	.word	0x40021000
 80035d0:	007a1200 	.word	0x007a1200
 80035d4:	08009300 	.word	0x08009300
 80035d8:	08009310 	.word	0x08009310
 80035dc:	003d0900 	.word	0x003d0900

080035e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035e4:	4b02      	ldr	r3, [pc, #8]	; (80035f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80035e6:	681b      	ldr	r3, [r3, #0]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr
 80035f0:	20000070 	.word	0x20000070

080035f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035f8:	f7ff fff2 	bl	80035e0 <HAL_RCC_GetHCLKFreq>
 80035fc:	4602      	mov	r2, r0
 80035fe:	4b05      	ldr	r3, [pc, #20]	; (8003614 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	0a1b      	lsrs	r3, r3, #8
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	4903      	ldr	r1, [pc, #12]	; (8003618 <HAL_RCC_GetPCLK1Freq+0x24>)
 800360a:	5ccb      	ldrb	r3, [r1, r3]
 800360c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003610:	4618      	mov	r0, r3
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40021000 	.word	0x40021000
 8003618:	080092f8 	.word	0x080092f8

0800361c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003624:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <RCC_Delay+0x34>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a0a      	ldr	r2, [pc, #40]	; (8003654 <RCC_Delay+0x38>)
 800362a:	fba2 2303 	umull	r2, r3, r2, r3
 800362e:	0a5b      	lsrs	r3, r3, #9
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	fb02 f303 	mul.w	r3, r2, r3
 8003636:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003638:	bf00      	nop
  }
  while (Delay --);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	1e5a      	subs	r2, r3, #1
 800363e:	60fa      	str	r2, [r7, #12]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1f9      	bne.n	8003638 <RCC_Delay+0x1c>
}
 8003644:	bf00      	nop
 8003646:	bf00      	nop
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr
 8003650:	20000070 	.word	0x20000070
 8003654:	10624dd3 	.word	0x10624dd3

08003658 <BMP180_read_eeprom_parmeters>:

/// @fn uint8_t BMP180_read_eeprom_parmeters(bmp_180_conf_t*)
/// @brief  Hardware interface function to read eeprom data(calibration constants)using i2c
/// @param B configurtion struct type variable
/// @return success if the flow completes successfully if not return BMP180_failed and don't complete flow
static uint8_t BMP180_read_eeprom_parmeters(bmp_180_conf_t *B) {
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]

	B->I2C_Buffer[0] = 0xAA;// writting register address of eeprom
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	22aa      	movs	r2, #170	; 0xaa
 8003664:	701a      	strb	r2, [r3, #0]
	if (1 != B->BMP180_AGhardware_interface_t.BMP180_write_parmeters(
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	BMP180_SLA_ADDRESS, B->I2C_Buffer, 1)) {
 800366a:	6879      	ldr	r1, [r7, #4]
	if (1 != B->BMP180_AGhardware_interface_t.BMP180_write_parmeters(
 800366c:	2201      	movs	r2, #1
 800366e:	2077      	movs	r0, #119	; 0x77
 8003670:	4798      	blx	r3
 8003672:	4603      	mov	r3, r0
 8003674:	2b01      	cmp	r3, #1
 8003676:	d001      	beq.n	800367c <BMP180_read_eeprom_parmeters+0x24>
		return BMP180_failed;
 8003678:	2300      	movs	r3, #0
 800367a:	e02d      	b.n	80036d8 <BMP180_read_eeprom_parmeters+0x80>
		//return (ok == HAL_OK) ? 1 : 0;this type of chcking example used in hardware interface
		//to return 1 or 0 that be used in BMP_180.c in the checking
	}
    //reading the 22 byte(8 bit) of data from register as every callibration constatnt takes two bytes as illustrated
	//in conf struct
	if (1 != B->BMP180_AGhardware_interface_t.BMP180_read_parmeters(
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	BMP180_SLA_ADDRESS, B->I2C_Buffer, 22)) {
 8003680:	6879      	ldr	r1, [r7, #4]
	if (1 != B->BMP180_AGhardware_interface_t.BMP180_read_parmeters(
 8003682:	2216      	movs	r2, #22
 8003684:	2077      	movs	r0, #119	; 0x77
 8003686:	4798      	blx	r3
 8003688:	4603      	mov	r3, r0
 800368a:	2b01      	cmp	r3, #1
 800368c:	d001      	beq.n	8003692 <BMP180_read_eeprom_parmeters+0x3a>
		return BMP180_failed;// if writing failed return failed
 800368e:	2300      	movs	r3, #0
 8003690:	e022      	b.n	80036d8 <BMP180_read_eeprom_parmeters+0x80>
	}
	uint16_t *Param = &B->AC1;//pointer to points on the first element in calibration constant in the conf. struct
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	331a      	adds	r3, #26
 8003696:	60bb      	str	r3, [r7, #8]

	for (int x = 0; x < 11; x++) {//looping on the 11 calibration constant and putting 2 bytes in each constatnt
 8003698:	2300      	movs	r3, #0
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	e018      	b.n	80036d0 <BMP180_read_eeprom_parmeters+0x78>
		//to make each constatnt 16 bit
		Param[x] = (B->I2C_Buffer[2 * x] << 8) | (B->I2C_Buffer[2 * x] + 1);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	5cd3      	ldrb	r3, [r2, r3]
 80036a6:	021b      	lsls	r3, r3, #8
 80036a8:	b21a      	sxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	5ccb      	ldrb	r3, [r1, r3]
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	3301      	adds	r3, #1
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	b21b      	sxth	r3, r3
 80036ba:	4313      	orrs	r3, r2
 80036bc:	b219      	sxth	r1, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	4413      	add	r3, r2
 80036c6:	b28a      	uxth	r2, r1
 80036c8:	801a      	strh	r2, [r3, #0]
	for (int x = 0; x < 11; x++) {//looping on the 11 calibration constant and putting 2 bytes in each constatnt
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	3301      	adds	r3, #1
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2b0a      	cmp	r3, #10
 80036d4:	dde3      	ble.n	800369e <BMP180_read_eeprom_parmeters+0x46>

	}
	return BMP180_success; //return success if done
 80036d6:	2301      	movs	r3, #1
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <BMP180_read_uncompensated_measurments>:
/// @brief read the measurements of temp. and pressure but still un_compansated
///
/// @param B configuration struct type variable
/// @return success if the flow completes successfully if not return BMP180_failed and don't complete flow

static uint8_t BMP180_read_uncompensated_measurments(bmp_180_conf_t *B) {
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
	////////////////////////////read un_compensated temperature//////////////////
	B->I2C_Buffer[0] = 0xF4; //register address
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	22f4      	movs	r2, #244	; 0xf4
 80036ec:	701a      	strb	r2, [r3, #0]
	B->I2C_Buffer[1] = 0x2E; //value to write in register to start reading temp.
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	222e      	movs	r2, #46	; 0x2e
 80036f2:	705a      	strb	r2, [r3, #1]
	if (1 != B->BMP180_AGhardware_interface_t.BMP180_write_parmeters(// write
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	BMP180_SLA_ADDRESS, B->I2C_Buffer, 2)) {
 80036f8:	6879      	ldr	r1, [r7, #4]
	if (1 != B->BMP180_AGhardware_interface_t.BMP180_write_parmeters(// write
 80036fa:	2202      	movs	r2, #2
 80036fc:	2077      	movs	r0, #119	; 0x77
 80036fe:	4798      	blx	r3
 8003700:	4603      	mov	r3, r0
 8003702:	2b01      	cmp	r3, #1
 8003704:	d001      	beq.n	800370a <BMP180_read_uncompensated_measurments+0x2a>
		return BMP180_failed;
 8003706:	2300      	movs	r3, #0
 8003708:	e08d      	b.n	8003826 <BMP180_read_uncompensated_measurments+0x146>
	}

	B->BMP180_AGhardware_interface_t.BMP180_delay(5); //delay as data sheet
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800370e:	2005      	movs	r0, #5
 8003710:	4798      	blx	r3

	//prepare to read from address F6 so you have to write
	//any interaction with any register must prepare before this interaction as to write this register address
	B->I2C_Buffer[0] = 0xF6;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	22f6      	movs	r2, #246	; 0xf6
 8003716:	701a      	strb	r2, [r3, #0]
	if (1 != B->BMP180_AGhardware_interface_t.BMP180_write_parmeters(
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	BMP180_SLA_ADDRESS, B->I2C_Buffer, 1)) {
 800371c:	6879      	ldr	r1, [r7, #4]
	if (1 != B->BMP180_AGhardware_interface_t.BMP180_write_parmeters(
 800371e:	2201      	movs	r2, #1
 8003720:	2077      	movs	r0, #119	; 0x77
 8003722:	4798      	blx	r3
 8003724:	4603      	mov	r3, r0
 8003726:	2b01      	cmp	r3, #1
 8003728:	d001      	beq.n	800372e <BMP180_read_uncompensated_measurments+0x4e>
		return BMP180_failed;// if writing failed return failed don't continue
 800372a:	2300      	movs	r3, #0
 800372c:	e07b      	b.n	8003826 <BMP180_read_uncompensated_measurments+0x146>
	}

	//read the temp result
	if (1 != B->BMP180_AGhardware_interface_t.BMP180_read_parmeters(
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	BMP180_SLA_ADDRESS, B->I2C_Buffer, 2)) {//2 just to read from the register next to 0xf6 which is 0xf7
 8003732:	6879      	ldr	r1, [r7, #4]
	if (1 != B->BMP180_AGhardware_interface_t.BMP180_read_parmeters(
 8003734:	2202      	movs	r2, #2
 8003736:	2077      	movs	r0, #119	; 0x77
 8003738:	4798      	blx	r3
 800373a:	4603      	mov	r3, r0
 800373c:	2b01      	cmp	r3, #1
 800373e:	d001      	beq.n	8003744 <BMP180_read_uncompensated_measurments+0x64>
		return BMP180_failed;// if writing failed return failed don't continue
 8003740:	2300      	movs	r3, #0
 8003742:	e070      	b.n	8003826 <BMP180_read_uncompensated_measurments+0x146>
	}

	B->UT = B->I2C_Buffer[0] << 8 | B->I2C_Buffer[1]; //merge the two reading with each other for UT to be 16 bit
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	021b      	lsls	r3, r3, #8
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	7852      	ldrb	r2, [r2, #1]
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	631a      	str	r2, [r3, #48]	; 0x30

	////////////////////////////read uncompensated pressure//////////////////

	B->I2C_Buffer[0] = 0xF4; //register address
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	22f4      	movs	r2, #244	; 0xf4
 8003758:	701a      	strb	r2, [r3, #0]
	B->I2C_Buffer[1] = 0x34 | (B->oss_mode << 6);   //
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	7e5b      	ldrb	r3, [r3, #25]
 800375e:	019b      	lsls	r3, r3, #6
 8003760:	b25b      	sxtb	r3, r3
 8003762:	f043 0334 	orr.w	r3, r3, #52	; 0x34
 8003766:	b25b      	sxtb	r3, r3
 8003768:	b2da      	uxtb	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	705a      	strb	r2, [r3, #1]

	if (1 != B->BMP180_AGhardware_interface_t.BMP180_write_parmeters(
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	BMP180_SLA_ADDRESS, B->I2C_Buffer, 2)) {
 8003772:	6879      	ldr	r1, [r7, #4]
	if (1 != B->BMP180_AGhardware_interface_t.BMP180_write_parmeters(
 8003774:	2202      	movs	r2, #2
 8003776:	2077      	movs	r0, #119	; 0x77
 8003778:	4798      	blx	r3
 800377a:	4603      	mov	r3, r0
 800377c:	2b01      	cmp	r3, #1
 800377e:	d001      	beq.n	8003784 <BMP180_read_uncompensated_measurments+0xa4>
		return BMP180_failed;
 8003780:	2300      	movs	r3, #0
 8003782:	e050      	b.n	8003826 <BMP180_read_uncompensated_measurments+0x146>
	}

	///////by choosing any case of these this already intilizes the start of conversion as its from the given combined register values from data sheet
	/// as it gives a register value for both(start of conversion+mood)
	switch (B->oss_mode) {
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	7e5b      	ldrb	r3, [r3, #25]
 8003788:	2b03      	cmp	r3, #3
 800378a:	d81f      	bhi.n	80037cc <BMP180_read_uncompensated_measurments+0xec>
 800378c:	a201      	add	r2, pc, #4	; (adr r2, 8003794 <BMP180_read_uncompensated_measurments+0xb4>)
 800378e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003792:	bf00      	nop
 8003794:	080037a5 	.word	0x080037a5
 8003798:	080037af 	.word	0x080037af
 800379c:	080037b9 	.word	0x080037b9
 80037a0:	080037c3 	.word	0x080037c3

	case oss_0:    // Handle ultra low power mode settings

		B->BMP180_AGhardware_interface_t.BMP180_delay(5);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a8:	2005      	movs	r0, #5
 80037aa:	4798      	blx	r3

		break;
 80037ac:	e010      	b.n	80037d0 <BMP180_read_uncompensated_measurments+0xf0>

	case oss_1:		// Handle standard mode settings

		B->BMP180_AGhardware_interface_t.BMP180_delay(8);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b2:	2008      	movs	r0, #8
 80037b4:	4798      	blx	r3
		break;
 80037b6:	e00b      	b.n	80037d0 <BMP180_read_uncompensated_measurments+0xf0>

	case oss_2:

		B->BMP180_AGhardware_interface_t.BMP180_delay(14);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037bc:	200e      	movs	r0, #14
 80037be:	4798      	blx	r3
		break;
 80037c0:	e006      	b.n	80037d0 <BMP180_read_uncompensated_measurments+0xf0>

	case oss_3:

		B->BMP180_AGhardware_interface_t.BMP180_delay(23);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c6:	2017      	movs	r0, #23
 80037c8:	4798      	blx	r3
		break;
 80037ca:	e001      	b.n	80037d0 <BMP180_read_uncompensated_measurments+0xf0>

	default:
		//Invalid oversampling_setting
		// Handle invalid mode selection
		return BMP180_failed;
 80037cc:	2300      	movs	r3, #0
 80037ce:	e02a      	b.n	8003826 <BMP180_read_uncompensated_measurments+0x146>

		break;
	}

	//prepare to read from address F6
	B->I2C_Buffer[0] = 0xF6;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	22f6      	movs	r2, #246	; 0xf6
 80037d4:	701a      	strb	r2, [r3, #0]
	if (1 != B->BMP180_AGhardware_interface_t.BMP180_write_parmeters(
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	BMP180_SLA_ADDRESS, B->I2C_Buffer, 1)) {
 80037da:	6879      	ldr	r1, [r7, #4]
	if (1 != B->BMP180_AGhardware_interface_t.BMP180_write_parmeters(
 80037dc:	2201      	movs	r2, #1
 80037de:	2077      	movs	r0, #119	; 0x77
 80037e0:	4798      	blx	r3
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d001      	beq.n	80037ec <BMP180_read_uncompensated_measurments+0x10c>
		return BMP180_failed;
 80037e8:	2300      	movs	r3, #0
 80037ea:	e01c      	b.n	8003826 <BMP180_read_uncompensated_measurments+0x146>
	}


	if (1 != B->BMP180_AGhardware_interface_t.BMP180_read_parmeters(
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	BMP180_SLA_ADDRESS, B->I2C_Buffer, 3)) {//read three consecutive registers starting from 0xf6 register
 80037f0:	6879      	ldr	r1, [r7, #4]
	if (1 != B->BMP180_AGhardware_interface_t.BMP180_read_parmeters(
 80037f2:	2203      	movs	r2, #3
 80037f4:	2077      	movs	r0, #119	; 0x77
 80037f6:	4798      	blx	r3
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d001      	beq.n	8003802 <BMP180_read_uncompensated_measurments+0x122>
		return BMP180_failed;
 80037fe:	2300      	movs	r3, #0
 8003800:	e011      	b.n	8003826 <BMP180_read_uncompensated_measurments+0x146>
	}

	B->UP = (B->I2C_Buffer[0] << 16 | B->I2C_Buffer[1] << 8 | B->I2C_Buffer[2])//merging MSB LSB XLSB
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	041a      	lsls	r2, r3, #16
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	785b      	ldrb	r3, [r3, #1]
 800380c:	021b      	lsls	r3, r3, #8
 800380e:	4313      	orrs	r3, r2
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	7892      	ldrb	r2, [r2, #2]
 8003814:	431a      	orrs	r2, r3
			>> (8 - B->oss_mode);//calculating UP and return it to the
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	7e5b      	ldrb	r3, [r3, #25]
 800381a:	f1c3 0308 	rsb	r3, r3, #8
 800381e:	411a      	asrs	r2, r3
	B->UP = (B->I2C_Buffer[0] << 16 | B->I2C_Buffer[1] << 8 | B->I2C_Buffer[2])//merging MSB LSB XLSB
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	635a      	str	r2, [r3, #52]	; 0x34
	//configuration struct agin to make it global to be used between functions
	return BMP180_success;
 8003824:	2301      	movs	r3, #1
	//return (ok == HAL_OK) ? 1 : 0;this type of chcking example used in hardware interface
	//to return 1 or 0 that be used in BMP_180.c in the checking
}
 8003826:	4618      	mov	r0, r3
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop

08003830 <bmp_180_init>:

/// @fn BMP180_checkstatus_t bmp_180_init(bmp_180_conf_t*)
/// @brief initialization of sensor whre the reading of eeprom happen
/// @param B
/// @return success or failed
BMP180_checkstatus_t bmp_180_init(bmp_180_conf_t *B) {
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
	///the mode configuration is done in the( read uncompansated function) as the data sheet of the sensor flow chart need
/// initialization (start of conversion) and write the configurations is done in the mode in the (read uncompansated function)

	//read the calibration parameters

	uint8_t state = 1;
 8003838:	2301      	movs	r3, #1
 800383a:	73fb      	strb	r3, [r7, #15]
	state &= BMP180_read_eeprom_parmeters(B);/*???? msh &B*///we made our check here of BMP180_checkstatus_t to make this user interface function doesn't include in it any hal checks
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f7ff ff0b 	bl	8003658 <BMP180_read_eeprom_parmeters>
 8003842:	4603      	mov	r3, r0
 8003844:	461a      	mov	r2, r3
 8003846:	7bfb      	ldrb	r3, [r7, #15]
 8003848:	4013      	ands	r3, r2
 800384a:	73fb      	strb	r3, [r7, #15]
	//so we made BMP180_WriteConfig return its hal check and we compare it with our checking
	if (state == 1) {
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d101      	bne.n	8003856 <bmp_180_init+0x26>
		return BMP180_success;
 8003852:	2301      	movs	r3, #1
 8003854:	e000      	b.n	8003858 <bmp_180_init+0x28>
	} else
		return BMP180_failed;
 8003856:	2300      	movs	r3, #0

}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <bmp_180_read_temp>:
/// @fn uint32_t bmp_180_read_temp(bmp_180_conf_t*)
/// @brief read the final temp T as all calculation to change from
/// UT to T happens here
/// @param B
/// @return T in the config struct to be globally used
uint32_t bmp_180_read_temp(bmp_180_conf_t *B) {
 8003860:	b590      	push	{r4, r7, lr}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
	int32_t x1 = (B->UT - B->AC6) * (B->AC5 / 32768.f);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003870:	1a9b      	subs	r3, r3, r2
 8003872:	4618      	mov	r0, r3
 8003874:	f7fd fa32 	bl	8000cdc <__aeabi_i2f>
 8003878:	4604      	mov	r4, r0
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800387e:	4618      	mov	r0, r3
 8003880:	f7fd fa2c 	bl	8000cdc <__aeabi_i2f>
 8003884:	4603      	mov	r3, r0
 8003886:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 800388a:	4618      	mov	r0, r3
 800388c:	f7fd fb2e 	bl	8000eec <__aeabi_fdiv>
 8003890:	4603      	mov	r3, r0
 8003892:	4619      	mov	r1, r3
 8003894:	4620      	mov	r0, r4
 8003896:	f7fd fa75 	bl	8000d84 <__aeabi_fmul>
 800389a:	4603      	mov	r3, r0
 800389c:	4618      	mov	r0, r3
 800389e:	f7fd fc4d 	bl	800113c <__aeabi_f2iz>
 80038a2:	4603      	mov	r3, r0
 80038a4:	60fb      	str	r3, [r7, #12]
	int32_t x2 = (B->MC * 2048) / (x1 + B->MD);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80038ac:	02da      	lsls	r2, r3, #11
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80038b4:	4619      	mov	r1, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	440b      	add	r3, r1
 80038ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80038be:	60bb      	str	r3, [r7, #8]
	B->B5_T_P = (x1) + (x2);
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	441a      	add	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	641a      	str	r2, [r3, #64]	; 0x40
	B->T = (B->B5_T_P + 5) / pow(2, 4);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	3305      	adds	r3, #5
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fc fd97 	bl	8000404 <__aeabi_i2d>
 80038d6:	f04f 0200 	mov.w	r2, #0
 80038da:	4b09      	ldr	r3, [pc, #36]	; (8003900 <bmp_180_read_temp+0xa0>)
 80038dc:	f7fc ff26 	bl	800072c <__aeabi_ddiv>
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4610      	mov	r0, r2
 80038e6:	4619      	mov	r1, r3
 80038e8:	f7fd f8a6 	bl	8000a38 <__aeabi_d2iz>
 80038ec:	4602      	mov	r2, r0
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	63da      	str	r2, [r3, #60]	; 0x3c

	//return t and local check
	return B->T; //3amlo beyreturn fe configuration struct ye7amel fiha el data returned
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd90      	pop	{r4, r7, pc}
 80038fe:	bf00      	nop
 8003900:	40300000 	.word	0x40300000

08003904 <bmp_180_read_press>:
/// UP to P happens here
///
/// @param B
/// @return P in the config struct to be globally used

uint32_t bmp_180_read_press(bmp_180_conf_t *B) {
 8003904:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003908:	b08a      	sub	sp, #40	; 0x28
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
	int32_t B6 = B->B5_T_P - 4000;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8003916:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t x1 = ((B->B2) * (B6 * (B6 / pow(2, 12)))) / pow(2, 11);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800391e:	4618      	mov	r0, r3
 8003920:	f7fc fd70 	bl	8000404 <__aeabi_i2d>
 8003924:	4604      	mov	r4, r0
 8003926:	460d      	mov	r5, r1
 8003928:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800392a:	f7fc fd6b 	bl	8000404 <__aeabi_i2d>
 800392e:	4680      	mov	r8, r0
 8003930:	4689      	mov	r9, r1
 8003932:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003934:	f7fc fd66 	bl	8000404 <__aeabi_i2d>
 8003938:	f04f 0200 	mov.w	r2, #0
 800393c:	4bb3      	ldr	r3, [pc, #716]	; (8003c0c <bmp_180_read_press+0x308>)
 800393e:	f7fc fef5 	bl	800072c <__aeabi_ddiv>
 8003942:	4602      	mov	r2, r0
 8003944:	460b      	mov	r3, r1
 8003946:	4640      	mov	r0, r8
 8003948:	4649      	mov	r1, r9
 800394a:	f7fc fdc5 	bl	80004d8 <__aeabi_dmul>
 800394e:	4602      	mov	r2, r0
 8003950:	460b      	mov	r3, r1
 8003952:	4620      	mov	r0, r4
 8003954:	4629      	mov	r1, r5
 8003956:	f7fc fdbf 	bl	80004d8 <__aeabi_dmul>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4610      	mov	r0, r2
 8003960:	4619      	mov	r1, r3
 8003962:	f04f 0200 	mov.w	r2, #0
 8003966:	4baa      	ldr	r3, [pc, #680]	; (8003c10 <bmp_180_read_press+0x30c>)
 8003968:	f7fc fee0 	bl	800072c <__aeabi_ddiv>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4610      	mov	r0, r2
 8003972:	4619      	mov	r1, r3
 8003974:	f7fd f860 	bl	8000a38 <__aeabi_d2iz>
 8003978:	4603      	mov	r3, r0
 800397a:	623b      	str	r3, [r7, #32]
	int32_t x2 = ((B->AC2) * B6) / pow(2, 11);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8003982:	461a      	mov	r2, r3
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	fb02 f303 	mul.w	r3, r2, r3
 800398a:	4618      	mov	r0, r3
 800398c:	f7fc fd3a 	bl	8000404 <__aeabi_i2d>
 8003990:	f04f 0200 	mov.w	r2, #0
 8003994:	4b9e      	ldr	r3, [pc, #632]	; (8003c10 <bmp_180_read_press+0x30c>)
 8003996:	f7fc fec9 	bl	800072c <__aeabi_ddiv>
 800399a:	4602      	mov	r2, r0
 800399c:	460b      	mov	r3, r1
 800399e:	4610      	mov	r0, r2
 80039a0:	4619      	mov	r1, r3
 80039a2:	f7fd f849 	bl	8000a38 <__aeabi_d2iz>
 80039a6:	4603      	mov	r3, r0
 80039a8:	61fb      	str	r3, [r7, #28]
	int32_t x3 = x1 + x2;
 80039aa:	6a3a      	ldr	r2, [r7, #32]
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	4413      	add	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
	int32_t B3 = ((((((int32_t) B->AC1 * 4) + x3) << B->oss_mode) + 2) / 4);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80039b8:	009a      	lsls	r2, r3, #2
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	4413      	add	r3, r2
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	7e52      	ldrb	r2, [r2, #25]
 80039c2:	4093      	lsls	r3, r2
 80039c4:	3302      	adds	r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	da00      	bge.n	80039cc <bmp_180_read_press+0xc8>
 80039ca:	3303      	adds	r3, #3
 80039cc:	109b      	asrs	r3, r3, #2
 80039ce:	617b      	str	r3, [r7, #20]
	x1 = (B->AC3) * (B6 / pow(2, 13));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fc fd14 	bl	8000404 <__aeabi_i2d>
 80039dc:	4604      	mov	r4, r0
 80039de:	460d      	mov	r5, r1
 80039e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039e2:	f7fc fd0f 	bl	8000404 <__aeabi_i2d>
 80039e6:	f04f 0200 	mov.w	r2, #0
 80039ea:	4b8a      	ldr	r3, [pc, #552]	; (8003c14 <bmp_180_read_press+0x310>)
 80039ec:	f7fc fe9e 	bl	800072c <__aeabi_ddiv>
 80039f0:	4602      	mov	r2, r0
 80039f2:	460b      	mov	r3, r1
 80039f4:	4620      	mov	r0, r4
 80039f6:	4629      	mov	r1, r5
 80039f8:	f7fc fd6e 	bl	80004d8 <__aeabi_dmul>
 80039fc:	4602      	mov	r2, r0
 80039fe:	460b      	mov	r3, r1
 8003a00:	4610      	mov	r0, r2
 8003a02:	4619      	mov	r1, r3
 8003a04:	f7fd f818 	bl	8000a38 <__aeabi_d2iz>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	623b      	str	r3, [r7, #32]
	x2 = ((B->B1) * (B6 * (B6 / pow(2, 12)))) / pow(2, 16);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fc fcf6 	bl	8000404 <__aeabi_i2d>
 8003a18:	4604      	mov	r4, r0
 8003a1a:	460d      	mov	r5, r1
 8003a1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a1e:	f7fc fcf1 	bl	8000404 <__aeabi_i2d>
 8003a22:	4680      	mov	r8, r0
 8003a24:	4689      	mov	r9, r1
 8003a26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a28:	f7fc fcec 	bl	8000404 <__aeabi_i2d>
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	4b76      	ldr	r3, [pc, #472]	; (8003c0c <bmp_180_read_press+0x308>)
 8003a32:	f7fc fe7b 	bl	800072c <__aeabi_ddiv>
 8003a36:	4602      	mov	r2, r0
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4640      	mov	r0, r8
 8003a3c:	4649      	mov	r1, r9
 8003a3e:	f7fc fd4b 	bl	80004d8 <__aeabi_dmul>
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	4620      	mov	r0, r4
 8003a48:	4629      	mov	r1, r5
 8003a4a:	f7fc fd45 	bl	80004d8 <__aeabi_dmul>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	460b      	mov	r3, r1
 8003a52:	4610      	mov	r0, r2
 8003a54:	4619      	mov	r1, r3
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	4b6f      	ldr	r3, [pc, #444]	; (8003c18 <bmp_180_read_press+0x314>)
 8003a5c:	f7fc fe66 	bl	800072c <__aeabi_ddiv>
 8003a60:	4602      	mov	r2, r0
 8003a62:	460b      	mov	r3, r1
 8003a64:	4610      	mov	r0, r2
 8003a66:	4619      	mov	r1, r3
 8003a68:	f7fc ffe6 	bl	8000a38 <__aeabi_d2iz>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	61fb      	str	r3, [r7, #28]
	x3 = ((x1 + x2) + 2) / pow(2, 2);
 8003a70:	6a3a      	ldr	r2, [r7, #32]
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	4413      	add	r3, r2
 8003a76:	3302      	adds	r3, #2
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7fc fcc3 	bl	8000404 <__aeabi_i2d>
 8003a7e:	f04f 0200 	mov.w	r2, #0
 8003a82:	4b66      	ldr	r3, [pc, #408]	; (8003c1c <bmp_180_read_press+0x318>)
 8003a84:	f7fc fe52 	bl	800072c <__aeabi_ddiv>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4610      	mov	r0, r2
 8003a8e:	4619      	mov	r1, r3
 8003a90:	f7fc ffd2 	bl	8000a38 <__aeabi_d2iz>
 8003a94:	4603      	mov	r3, r0
 8003a96:	61bb      	str	r3, [r7, #24]
	uint32_t B4 = B->AC4 * (((/*????*/uint32_t) (x3 + 32768)) / pow(2, 15));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	8c1b      	ldrh	r3, [r3, #32]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fc fcb1 	bl	8000404 <__aeabi_i2d>
 8003aa2:	4604      	mov	r4, r0
 8003aa4:	460d      	mov	r5, r1
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fc fc99 	bl	80003e4 <__aeabi_ui2d>
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	4b5a      	ldr	r3, [pc, #360]	; (8003c20 <bmp_180_read_press+0x31c>)
 8003ab8:	f7fc fe38 	bl	800072c <__aeabi_ddiv>
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	4629      	mov	r1, r5
 8003ac4:	f7fc fd08 	bl	80004d8 <__aeabi_dmul>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4610      	mov	r0, r2
 8003ace:	4619      	mov	r1, r3
 8003ad0:	f7fc ffda 	bl	8000a88 <__aeabi_d2uiz>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	613b      	str	r3, [r7, #16]
	uint32_t B7 = ((uint32_t) B->UP - B3) * (50000 >> B->oss_mode);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003adc:	461a      	mov	r2, r3
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	7e52      	ldrb	r2, [r2, #25]
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003aec:	410a      	asrs	r2, r1
 8003aee:	fb02 f303 	mul.w	r3, r2, r3
 8003af2:	60fb      	str	r3, [r7, #12]

	if (B7 < 0x80000000) {
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	db08      	blt.n	8003b0c <bmp_180_read_press+0x208>
		B->p = (B7 * 2) / B4;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	005a      	lsls	r2, r3, #1
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b04:	461a      	mov	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	639a      	str	r2, [r3, #56]	; 0x38
 8003b0a:	e005      	b.n	8003b18 <bmp_180_read_press+0x214>
	} else {
		B->p = (B7 / 4) * 2;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	089b      	lsrs	r3, r3, #2
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	461a      	mov	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	639a      	str	r2, [r3, #56]	; 0x38
	}
	x1 = (B->p / pow(2, 8)) * (B->p / pow(2, 8));/*??????*/
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fc fc71 	bl	8000404 <__aeabi_i2d>
 8003b22:	f04f 0200 	mov.w	r2, #0
 8003b26:	4b3f      	ldr	r3, [pc, #252]	; (8003c24 <bmp_180_read_press+0x320>)
 8003b28:	f7fc fe00 	bl	800072c <__aeabi_ddiv>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4614      	mov	r4, r2
 8003b32:	461d      	mov	r5, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fc fc63 	bl	8000404 <__aeabi_i2d>
 8003b3e:	f04f 0200 	mov.w	r2, #0
 8003b42:	4b38      	ldr	r3, [pc, #224]	; (8003c24 <bmp_180_read_press+0x320>)
 8003b44:	f7fc fdf2 	bl	800072c <__aeabi_ddiv>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4620      	mov	r0, r4
 8003b4e:	4629      	mov	r1, r5
 8003b50:	f7fc fcc2 	bl	80004d8 <__aeabi_dmul>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4610      	mov	r0, r2
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	f7fc ff6c 	bl	8000a38 <__aeabi_d2iz>
 8003b60:	4603      	mov	r3, r0
 8003b62:	623b      	str	r3, [r7, #32]
	x1 = (x1 * 3038) / pow(2, 16);
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	f640 32de 	movw	r2, #3038	; 0xbde
 8003b6a:	fb02 f303 	mul.w	r3, r2, r3
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fc fc48 	bl	8000404 <__aeabi_i2d>
 8003b74:	f04f 0200 	mov.w	r2, #0
 8003b78:	4b27      	ldr	r3, [pc, #156]	; (8003c18 <bmp_180_read_press+0x314>)
 8003b7a:	f7fc fdd7 	bl	800072c <__aeabi_ddiv>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	460b      	mov	r3, r1
 8003b82:	4610      	mov	r0, r2
 8003b84:	4619      	mov	r1, r3
 8003b86:	f7fc ff57 	bl	8000a38 <__aeabi_d2iz>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	623b      	str	r3, [r7, #32]
	x2 = (-7357 * B->p) / pow(2, 16);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b92:	4a25      	ldr	r2, [pc, #148]	; (8003c28 <bmp_180_read_press+0x324>)
 8003b94:	fb02 f303 	mul.w	r3, r2, r3
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7fc fc33 	bl	8000404 <__aeabi_i2d>
 8003b9e:	f04f 0200 	mov.w	r2, #0
 8003ba2:	4b1d      	ldr	r3, [pc, #116]	; (8003c18 <bmp_180_read_press+0x314>)
 8003ba4:	f7fc fdc2 	bl	800072c <__aeabi_ddiv>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	4610      	mov	r0, r2
 8003bae:	4619      	mov	r1, r3
 8003bb0:	f7fc ff42 	bl	8000a38 <__aeabi_d2iz>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	61fb      	str	r3, [r7, #28]
	B->p = B->p + (x1 + x2 + 3791) / pow(2, 4);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fc fc21 	bl	8000404 <__aeabi_i2d>
 8003bc2:	4604      	mov	r4, r0
 8003bc4:	460d      	mov	r5, r1
 8003bc6:	6a3a      	ldr	r2, [r7, #32]
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7fc fc17 	bl	8000404 <__aeabi_i2d>
 8003bd6:	f04f 0200 	mov.w	r2, #0
 8003bda:	4b14      	ldr	r3, [pc, #80]	; (8003c2c <bmp_180_read_press+0x328>)
 8003bdc:	f7fc fda6 	bl	800072c <__aeabi_ddiv>
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	4620      	mov	r0, r4
 8003be6:	4629      	mov	r1, r5
 8003be8:	f7fc fac0 	bl	800016c <__adddf3>
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	f7fc ff20 	bl	8000a38 <__aeabi_d2iz>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	639a      	str	r2, [r3, #56]	; 0x38
	return B->p;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38

}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3728      	adds	r7, #40	; 0x28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003c0c:	40b00000 	.word	0x40b00000
 8003c10:	40a00000 	.word	0x40a00000
 8003c14:	40c00000 	.word	0x40c00000
 8003c18:	40f00000 	.word	0x40f00000
 8003c1c:	40100000 	.word	0x40100000
 8003c20:	40e00000 	.word	0x40e00000
 8003c24:	40700000 	.word	0x40700000
 8003c28:	ffffe343 	.word	0xffffe343
 8003c2c:	40300000 	.word	0x40300000

08003c30 <bmp_180_read_altitude>:
/// @param altitude :pointer to return  the altitude or we can not put
/// it in the agumets if it was in the config struct and return data to it in
/// config struct as made in T P
/// @return

BMP180_checkstatus_t bmp_180_read_altitude(bmp_180_conf_t *B, float *altitude) {
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
	BMP180_checkstatus_t state = BMP180_success;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	73fb      	strb	r3, [r7, #15]

	//get uncomp pressure and temp
	state = BMP180_read_uncompensated_measurments(B);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7ff fd4e 	bl	80036e0 <BMP180_read_uncompensated_measurments>
 8003c44:	4603      	mov	r3, r0
 8003c46:	73fb      	strb	r3, [r7, #15]
	// calculate temp and pressure
	bmp_180_read_temp(B);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7ff fe09 	bl	8003860 <bmp_180_read_temp>
	bmp_180_read_press(B);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7ff fe58 	bl	8003904 <bmp_180_read_press>

	// calculate temp and pressure

	//calculate altitude

*altitude = 44330.0f * (1.0f - powf((B->p / p0), (1.0f / 5.255)));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7fd f83f 	bl	8000cdc <__aeabi_i2f>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	490e      	ldr	r1, [pc, #56]	; (8003c9c <bmp_180_read_altitude+0x6c>)
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fd f942 	bl	8000eec <__aeabi_fdiv>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	490d      	ldr	r1, [pc, #52]	; (8003ca0 <bmp_180_read_altitude+0x70>)
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f004 fea5 	bl	80089bc <powf>
 8003c72:	4603      	mov	r3, r0
 8003c74:	4619      	mov	r1, r3
 8003c76:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003c7a:	f7fc ff79 	bl	8000b70 <__aeabi_fsub>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	4908      	ldr	r1, [pc, #32]	; (8003ca4 <bmp_180_read_altitude+0x74>)
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fd f87e 	bl	8000d84 <__aeabi_fmul>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	601a      	str	r2, [r3, #0]
	return state;
 8003c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	47c5e680 	.word	0x47c5e680
 8003ca0:	3e42dcae 	.word	0x3e42dcae
 8003ca4:	472d2a00 	.word	0x472d2a00

08003ca8 <DWT_Delay_us>:

/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds) {
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 8003cb0:	4b0d      	ldr	r3, [pc, #52]	; (8003ce8 <DWT_Delay_us+0x40>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	60fb      	str	r3, [r7, #12]

	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8003cb6:	f7ff fc93 	bl	80035e0 <HAL_RCC_GetHCLKFreq>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	4a0b      	ldr	r2, [pc, #44]	; (8003cec <DWT_Delay_us+0x44>)
 8003cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc2:	0c9b      	lsrs	r3, r3, #18
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	fb02 f303 	mul.w	r3, r2, r3
 8003cca:	607b      	str	r3, [r7, #4]

	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 8003ccc:	bf00      	nop
 8003cce:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <DWT_Delay_us+0x40>)
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	1ad2      	subs	r2, r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d3f8      	bcc.n	8003cce <DWT_Delay_us+0x26>
		;
}
 8003cdc:	bf00      	nop
 8003cde:	bf00      	nop
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	e0001000 	.word	0xe0001000
 8003cec:	431bde83 	.word	0x431bde83

08003cf0 <usDelay>:
    usDelay(100); \
  } while (0) //BA3D EL MACRO MAFISH SMICOULMN

/* Hardware interface functions */
static void usDelay(uint16_t delay_us)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	80fb      	strh	r3, [r7, #6]
	DWT_Delay_us(delay_us);
 8003cfa:	88fb      	ldrh	r3, [r7, #6]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff ffd3 	bl	8003ca8 <DWT_Delay_us>
}
 8003d02:	bf00      	nop
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <Write_HalfByte>:
/// the top 4 bits are ignored
/// transfers the status of the 4-bit data to the hardware GPIO pins
static void Write_HalfByte(Alcd_t *lcd, uint8_t HalfByte) //function tekteb bs fel 4 bits 3ashan anan fel 4bit mode
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	460b      	mov	r3, r1
 8003d14:	70fb      	strb	r3, [r7, #3]
	lcd->Data_GPIO->ODR &= ~(0xf << lcd->Data_GPIO_Start_Pin);//write
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	7a1b      	ldrb	r3, [r3, #8]
 8003d20:	4619      	mov	r1, r3
 8003d22:	230f      	movs	r3, #15
 8003d24:	408b      	lsls	r3, r1
 8003d26:	43db      	mvns	r3, r3
 8003d28:	4619      	mov	r1, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	400a      	ands	r2, r1
 8003d30:	60da      	str	r2, [r3, #12]
	lcd->Data_GPIO->ODR |= HalfByte << lcd->Data_GPIO_Start_Pin;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	68da      	ldr	r2, [r3, #12]
 8003d38:	78fb      	ldrb	r3, [r7, #3]
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	7a09      	ldrb	r1, [r1, #8]
 8003d3e:	408b      	lsls	r3, r1
 8003d40:	4619      	mov	r1, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	60da      	str	r2, [r3, #12]
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc80      	pop	{r7}
 8003d52:	4770      	bx	lr

08003d54 <RS_SET>:
/// @brief 1 for set and 0 for reset
static void RS_SET(Alcd_t *lcd, uint8_t R_S_Stat)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->RS_GPIO, lcd->RS_GPIO_Pin, R_S_Stat);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6958      	ldr	r0, [r3, #20]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	8b1b      	ldrh	r3, [r3, #24]
 8003d68:	78fa      	ldrb	r2, [r7, #3]
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	f7fe f82c 	bl	8001dc8 <HAL_GPIO_WritePin>
}
 8003d70:	bf00      	nop
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <EN_SET>:
/// @brief 1 for set and 0 for reset
static void EN_SET(Alcd_t *lcd, uint8_t EN_Stat)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	460b      	mov	r3, r1
 8003d82:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->EN_GPIO, lcd->EN_GPIO_Pin, EN_Stat);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68d8      	ldr	r0, [r3, #12]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	8a1b      	ldrh	r3, [r3, #16]
 8003d8c:	78fa      	ldrb	r2, [r7, #3]
 8003d8e:	4619      	mov	r1, r3
 8003d90:	f7fe f81a 	bl	8001dc8 <HAL_GPIO_WritePin>
}
 8003d94:	bf00      	nop
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <Alcd_Init_GPIO>:

static void Alcd_Init_GPIO(Alcd_t *lcd)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef G =
 8003da4:	f107 0308 	add.w	r3, r7, #8
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	605a      	str	r2, [r3, #4]
 8003dae:	609a      	str	r2, [r3, #8]
 8003db0:	60da      	str	r2, [r3, #12]
	{ .Mode = GPIO_MODE_OUTPUT_PP, .Pin = lcd->RS_GPIO_Pin, .Speed = GPIO_SPEED_FREQ_LOW };
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	8b1b      	ldrh	r3, [r3, #24]
	GPIO_InitTypeDef G =
 8003db6:	60bb      	str	r3, [r7, #8]
 8003db8:	2301      	movs	r3, #1
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(lcd->RS_GPIO, &G);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	f107 0208 	add.w	r2, r7, #8
 8003dc8:	4611      	mov	r1, r2
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fd fe78 	bl	8001ac0 <HAL_GPIO_Init>
	G.Pin = lcd->EN_GPIO_Pin;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	8a1b      	ldrh	r3, [r3, #16]
 8003dd4:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->EN_GPIO, &G);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f107 0208 	add.w	r2, r7, #8
 8003dde:	4611      	mov	r1, r2
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7fd fe6d 	bl	8001ac0 <HAL_GPIO_Init>

	G.Pin = 0xf << lcd->Data_GPIO_Start_Pin;//da partial write 3ashan a7ded el bits beta3et el pins el wasla
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	7a1b      	ldrb	r3, [r3, #8]
 8003dea:	461a      	mov	r2, r3
 8003dec:	230f      	movs	r3, #15
 8003dee:	4093      	lsls	r3, r2
 8003df0:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->Data_GPIO, &G);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f107 0208 	add.w	r2, r7, #8
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fd fe5f 	bl	8001ac0 <HAL_GPIO_Init>
}
 8003e02:	bf00      	nop
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <Alcd_SendByte>:

/* User Functions  */
void Alcd_Display(Alcd_t *lcd, uint8_t ON_OFF);

static inline void Alcd_SendByte(Alcd_t *lcd, uint8_t CMD_Data, uint8_t value)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b082      	sub	sp, #8
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	460b      	mov	r3, r1
 8003e14:	70fb      	strb	r3, [r7, #3]
 8003e16:	4613      	mov	r3, r2
 8003e18:	70bb      	strb	r3, [r7, #2]
	RS_SET(lcd, CMD_Data);
 8003e1a:	78fb      	ldrb	r3, [r7, #3]
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7ff ff98 	bl	8003d54 <RS_SET>
	// send the higher 4 bits
	Write_HalfByte(lcd, value >> 4);
 8003e24:	78bb      	ldrb	r3, [r7, #2]
 8003e26:	091b      	lsrs	r3, r3, #4
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7ff ff6c 	bl	8003d0a <Write_HalfByte>
	// pulse the enable pin
	PulseEn
 8003e32:	2101      	movs	r1, #1
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f7ff ff9f 	bl	8003d78 <EN_SET>
 8003e3a:	200a      	movs	r0, #10
 8003e3c:	f7ff ff58 	bl	8003cf0 <usDelay>
 8003e40:	2100      	movs	r1, #0
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7ff ff98 	bl	8003d78 <EN_SET>
 8003e48:	2064      	movs	r0, #100	; 0x64
 8003e4a:	f7ff ff51 	bl	8003cf0 <usDelay>
	;
	Write_HalfByte(lcd, value);
 8003e4e:	78bb      	ldrb	r3, [r7, #2]
 8003e50:	4619      	mov	r1, r3
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7ff ff59 	bl	8003d0a <Write_HalfByte>
	PulseEn
 8003e58:	2101      	movs	r1, #1
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff ff8c 	bl	8003d78 <EN_SET>
 8003e60:	200a      	movs	r0, #10
 8003e62:	f7ff ff45 	bl	8003cf0 <usDelay>
 8003e66:	2100      	movs	r1, #0
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7ff ff85 	bl	8003d78 <EN_SET>
 8003e6e:	2064      	movs	r0, #100	; 0x64
 8003e70:	f7ff ff3e 	bl	8003cf0 <usDelay>
	;
}
 8003e74:	bf00      	nop
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <Alcd_Init>:

void Alcd_Init(Alcd_t *lcd, uint8_t Lines, uint8_t Chars)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	70fb      	strb	r3, [r7, #3]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	70bb      	strb	r3, [r7, #2]
	//INitialize the delay function using the ARM core cycle counter
	DWT_Delay_Init();
 8003e8c:	f7fd fc7e 	bl	800178c <DWT_Delay_Init>
	Alcd_Init_GPIO(lcd);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7ff ff83 	bl	8003d9c <Alcd_Init_GPIO>
	uint8_t x;

	lcd->RowOffsets[0] = 0;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	769a      	strb	r2, [r3, #26]
	lcd->RowOffsets[1] = 0x40;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2240      	movs	r2, #64	; 0x40
 8003ea0:	76da      	strb	r2, [r3, #27]
	lcd->RowOffsets[2] = 0 + Chars;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	78ba      	ldrb	r2, [r7, #2]
 8003ea6:	771a      	strb	r2, [r3, #28]
	lcd->RowOffsets[3] = 0x40 + Chars;
 8003ea8:	78bb      	ldrb	r3, [r7, #2]
 8003eaa:	3340      	adds	r3, #64	; 0x40
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	775a      	strb	r2, [r3, #29]

	RS_SET(lcd, 0);//hena bedayt 4 bit mode intialization
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f7ff ff4d 	bl	8003d54 <RS_SET>
	EN_SET(lcd, 0);
 8003eba:	2100      	movs	r1, #0
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7ff ff5b 	bl	8003d78 <EN_SET>
	usDelay(50000);//3AMELHA BE ZEYADA 3ASHAN ADman nafsy
 8003ec2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ec6:	f7ff ff13 	bl	8003cf0 <usDelay>

	// init display in 4-bit mode
	for (x = 0; x < 2; x++)
 8003eca:	2300      	movs	r3, #0
 8003ecc:	73fb      	strb	r3, [r7, #15]
 8003ece:	e018      	b.n	8003f02 <Alcd_Init+0x86>
	{
		Write_HalfByte(lcd, 0x03);
 8003ed0:	2103      	movs	r1, #3
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7ff ff19 	bl	8003d0a <Write_HalfByte>
		PulseEn
 8003ed8:	2101      	movs	r1, #1
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7ff ff4c 	bl	8003d78 <EN_SET>
 8003ee0:	200a      	movs	r0, #10
 8003ee2:	f7ff ff05 	bl	8003cf0 <usDelay>
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff ff45 	bl	8003d78 <EN_SET>
 8003eee:	2064      	movs	r0, #100	; 0x64
 8003ef0:	f7ff fefe 	bl	8003cf0 <usDelay>
		;
		usDelay(4500);
 8003ef4:	f241 1094 	movw	r0, #4500	; 0x1194
 8003ef8:	f7ff fefa 	bl	8003cf0 <usDelay>
	for (x = 0; x < 2; x++)
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
 8003efe:	3301      	adds	r3, #1
 8003f00:	73fb      	strb	r3, [r7, #15]
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d9e3      	bls.n	8003ed0 <Alcd_Init+0x54>
	}
	Write_HalfByte(lcd, 0x03);
 8003f08:	2103      	movs	r1, #3
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7ff fefd 	bl	8003d0a <Write_HalfByte>
	PulseEn
 8003f10:	2101      	movs	r1, #1
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7ff ff30 	bl	8003d78 <EN_SET>
 8003f18:	200a      	movs	r0, #10
 8003f1a:	f7ff fee9 	bl	8003cf0 <usDelay>
 8003f1e:	2100      	movs	r1, #0
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7ff ff29 	bl	8003d78 <EN_SET>
 8003f26:	2064      	movs	r0, #100	; 0x64
 8003f28:	f7ff fee2 	bl	8003cf0 <usDelay>
	;
	usDelay(150);
 8003f2c:	2096      	movs	r0, #150	; 0x96
 8003f2e:	f7ff fedf 	bl	8003cf0 <usDelay>
	Write_HalfByte(lcd, 0x02);//kda ana ba2olhA ANA HASHTAGHAL 4 BIT MODE
 8003f32:	2102      	movs	r1, #2
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f7ff fee8 	bl	8003d0a <Write_HalfByte>
	PulseEn
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7ff ff1b 	bl	8003d78 <EN_SET>
 8003f42:	200a      	movs	r0, #10
 8003f44:	f7ff fed4 	bl	8003cf0 <usDelay>
 8003f48:	2100      	movs	r1, #0
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7ff ff14 	bl	8003d78 <EN_SET>
 8003f50:	2064      	movs	r0, #100	; 0x64
 8003f52:	f7ff fecd 	bl	8003cf0 <usDelay>
	;

	// finally, set # lines, font size, etc.
	SendByte(0, LCD_FUNCTIONSET | LCD_2LINE | LCD_5x8DOTS); //E2RA EL DATA SHEET
 8003f56:	2228      	movs	r2, #40	; 0x28
 8003f58:	2100      	movs	r1, #0
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7ff ff55 	bl	8003e0a <Alcd_SendByte>

	// turn the display on with no cursor or blinking default
	// lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;

	// turn on the display
	Alcd_Display_Control(lcd, 1, 0, 0);
 8003f60:	2300      	movs	r3, #0
 8003f62:	2200      	movs	r2, #0
 8003f64:	2101      	movs	r1, #1
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f86d 	bl	8004046 <Alcd_Display_Control>
	Alcd_Clear(lcd);//TAGANOBAN LE AY NOISE
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f859 	bl	8004024 <Alcd_Clear>
}
 8003f72:	bf00      	nop
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <Alcd_CursorAt>:

void Alcd_CursorAt(Alcd_t *lcd, uint8_t Row, uint8_t Col)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b082      	sub	sp, #8
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	460b      	mov	r3, r1
 8003f84:	70fb      	strb	r3, [r7, #3]
 8003f86:	4613      	mov	r3, r2
 8003f88:	70bb      	strb	r3, [r7, #2]
	SendByte(0, LCD_SETDDRAMADDR | (Col + lcd->RowOffsets[Row]));
 8003f8a:	78fb      	ldrb	r3, [r7, #3]
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	4413      	add	r3, r2
 8003f90:	7e9a      	ldrb	r2, [r3, #26]
 8003f92:	78bb      	ldrb	r3, [r7, #2]
 8003f94:	4413      	add	r3, r2
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	b25b      	sxtb	r3, r3
 8003f9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f9e:	b25b      	sxtb	r3, r3
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7ff ff2f 	bl	8003e0a <Alcd_SendByte>
}
 8003fac:	bf00      	nop
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <Alcd_Put_n>:

void Alcd_Put_n(Alcd_t *lcd, char *text, uint8_t len)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	71fb      	strb	r3, [r7, #7]
	for (uint8_t x = 0; x < len; x++)
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	75fb      	strb	r3, [r7, #23]
 8003fc6:	e00b      	b.n	8003fe0 <Alcd_Put_n+0x2c>
	{
		SendByte(1, *(text++));
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	1c5a      	adds	r2, r3, #1
 8003fcc:	60ba      	str	r2, [r7, #8]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f7ff ff18 	bl	8003e0a <Alcd_SendByte>
	for (uint8_t x = 0; x < len; x++)
 8003fda:	7dfb      	ldrb	r3, [r7, #23]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	75fb      	strb	r3, [r7, #23]
 8003fe0:	7dfa      	ldrb	r2, [r7, #23]
 8003fe2:	79fb      	ldrb	r3, [r7, #7]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d3ef      	bcc.n	8003fc8 <Alcd_Put_n+0x14>
	}
}
 8003fe8:	bf00      	nop
 8003fea:	bf00      	nop
 8003fec:	3718      	adds	r7, #24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <Alcd_PutAt_n>:

void Alcd_PutAt_n(Alcd_t *lcd, uint8_t Row, uint8_t Col, char *text, uint8_t len)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b084      	sub	sp, #16
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	60f8      	str	r0, [r7, #12]
 8003ffa:	607b      	str	r3, [r7, #4]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	72fb      	strb	r3, [r7, #11]
 8004000:	4613      	mov	r3, r2
 8004002:	72bb      	strb	r3, [r7, #10]
	Alcd_CursorAt(lcd, Row, Col);
 8004004:	7aba      	ldrb	r2, [r7, #10]
 8004006:	7afb      	ldrb	r3, [r7, #11]
 8004008:	4619      	mov	r1, r3
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f7ff ffb5 	bl	8003f7a <Alcd_CursorAt>
	Alcd_Put_n(lcd, text, len);
 8004010:	7e3b      	ldrb	r3, [r7, #24]
 8004012:	461a      	mov	r2, r3
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f7ff ffcc 	bl	8003fb4 <Alcd_Put_n>
}
 800401c:	bf00      	nop
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <Alcd_Clear>:
	SendByte(0, LCD_RETURNHOME);
	usDelay(2000);
}

void Alcd_Clear(Alcd_t *lcd)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
	SendByte(0, LCD_CLEARDISPLAY);
 800402c:	2201      	movs	r2, #1
 800402e:	2100      	movs	r1, #0
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f7ff feea 	bl	8003e0a <Alcd_SendByte>
	usDelay(2000);
 8004036:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800403a:	f7ff fe59 	bl	8003cf0 <usDelay>
}
 800403e:	bf00      	nop
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <Alcd_Display_Control>:

void Alcd_Display_Control(Alcd_t *lcd, uint8_t ON_OFF, uint8_t CUR_ON_OFF, uint8_t BLINK_ON_OFF)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b082      	sub	sp, #8
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	4608      	mov	r0, r1
 8004050:	4611      	mov	r1, r2
 8004052:	461a      	mov	r2, r3
 8004054:	4603      	mov	r3, r0
 8004056:	70fb      	strb	r3, [r7, #3]
 8004058:	460b      	mov	r3, r1
 800405a:	70bb      	strb	r3, [r7, #2]
 800405c:	4613      	mov	r3, r2
 800405e:	707b      	strb	r3, [r7, #1]
	lcd->_displaycontrol = 0;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	779a      	strb	r2, [r3, #30]
	if (ON_OFF)
 8004066:	78fb      	ldrb	r3, [r7, #3]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d006      	beq.n	800407a <Alcd_Display_Control+0x34>
	{
		lcd->_displaycontrol |= LCD_DISPLAYON;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	7f9b      	ldrb	r3, [r3, #30]
 8004070:	f043 0304 	orr.w	r3, r3, #4
 8004074:	b2da      	uxtb	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	779a      	strb	r2, [r3, #30]
	}
	if (CUR_ON_OFF)
 800407a:	78bb      	ldrb	r3, [r7, #2]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d006      	beq.n	800408e <Alcd_Display_Control+0x48>
	{
		lcd->_displaycontrol |= LCD_CURSORON;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	7f9b      	ldrb	r3, [r3, #30]
 8004084:	f043 0302 	orr.w	r3, r3, #2
 8004088:	b2da      	uxtb	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	779a      	strb	r2, [r3, #30]
	}
	if (BLINK_ON_OFF)
 800408e:	787b      	ldrb	r3, [r7, #1]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d006      	beq.n	80040a2 <Alcd_Display_Control+0x5c>
	{
		lcd->_displaycontrol |= LCD_BLINKON;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	7f9b      	ldrb	r3, [r3, #30]
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	b2da      	uxtb	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	779a      	strb	r2, [r3, #30]
	}
	lcd->_displaycontrol |= LCD_DISPLAYON;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	7f9b      	ldrb	r3, [r3, #30]
 80040a6:	f043 0304 	orr.w	r3, r3, #4
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	779a      	strb	r2, [r3, #30]
	SendByte(0, LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	7f9b      	ldrb	r3, [r3, #30]
 80040b4:	f043 0308 	orr.w	r3, r3, #8
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	461a      	mov	r2, r3
 80040bc:	2100      	movs	r1, #0
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff fea3 	bl	8003e0a <Alcd_SendByte>
}
 80040c4:	bf00      	nop
 80040c6:	3708      	adds	r7, #8
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <Str_Len>:
{
	SendByte(1, chr);
}

int Str_Len(char *string)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
	int len = 0;
 80040d4:	2300      	movs	r3, #0
 80040d6:	60fb      	str	r3, [r7, #12]
	while (*(string++))
 80040d8:	e002      	b.n	80040e0 <Str_Len+0x14>
	{
		len++;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	3301      	adds	r3, #1
 80040de:	60fb      	str	r3, [r7, #12]
	while (*(string++))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	607a      	str	r2, [r7, #4]
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1f6      	bne.n	80040da <Str_Len+0xe>
	}
	return len;
 80040ec:	68fb      	ldr	r3, [r7, #12]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bc80      	pop	{r7}
 80040f6:	4770      	bx	lr

080040f8 <__errno>:
 80040f8:	4b01      	ldr	r3, [pc, #4]	; (8004100 <__errno+0x8>)
 80040fa:	6818      	ldr	r0, [r3, #0]
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	2000007c 	.word	0x2000007c

08004104 <__libc_init_array>:
 8004104:	b570      	push	{r4, r5, r6, lr}
 8004106:	2600      	movs	r6, #0
 8004108:	4d0c      	ldr	r5, [pc, #48]	; (800413c <__libc_init_array+0x38>)
 800410a:	4c0d      	ldr	r4, [pc, #52]	; (8004140 <__libc_init_array+0x3c>)
 800410c:	1b64      	subs	r4, r4, r5
 800410e:	10a4      	asrs	r4, r4, #2
 8004110:	42a6      	cmp	r6, r4
 8004112:	d109      	bne.n	8004128 <__libc_init_array+0x24>
 8004114:	f005 f8ce 	bl	80092b4 <_init>
 8004118:	2600      	movs	r6, #0
 800411a:	4d0a      	ldr	r5, [pc, #40]	; (8004144 <__libc_init_array+0x40>)
 800411c:	4c0a      	ldr	r4, [pc, #40]	; (8004148 <__libc_init_array+0x44>)
 800411e:	1b64      	subs	r4, r4, r5
 8004120:	10a4      	asrs	r4, r4, #2
 8004122:	42a6      	cmp	r6, r4
 8004124:	d105      	bne.n	8004132 <__libc_init_array+0x2e>
 8004126:	bd70      	pop	{r4, r5, r6, pc}
 8004128:	f855 3b04 	ldr.w	r3, [r5], #4
 800412c:	4798      	blx	r3
 800412e:	3601      	adds	r6, #1
 8004130:	e7ee      	b.n	8004110 <__libc_init_array+0xc>
 8004132:	f855 3b04 	ldr.w	r3, [r5], #4
 8004136:	4798      	blx	r3
 8004138:	3601      	adds	r6, #1
 800413a:	e7f2      	b.n	8004122 <__libc_init_array+0x1e>
 800413c:	080097d4 	.word	0x080097d4
 8004140:	080097d4 	.word	0x080097d4
 8004144:	080097d4 	.word	0x080097d4
 8004148:	080097d8 	.word	0x080097d8

0800414c <memset>:
 800414c:	4603      	mov	r3, r0
 800414e:	4402      	add	r2, r0
 8004150:	4293      	cmp	r3, r2
 8004152:	d100      	bne.n	8004156 <memset+0xa>
 8004154:	4770      	bx	lr
 8004156:	f803 1b01 	strb.w	r1, [r3], #1
 800415a:	e7f9      	b.n	8004150 <memset+0x4>

0800415c <__cvt>:
 800415c:	2b00      	cmp	r3, #0
 800415e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004162:	461f      	mov	r7, r3
 8004164:	bfbb      	ittet	lt
 8004166:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800416a:	461f      	movlt	r7, r3
 800416c:	2300      	movge	r3, #0
 800416e:	232d      	movlt	r3, #45	; 0x2d
 8004170:	b088      	sub	sp, #32
 8004172:	4614      	mov	r4, r2
 8004174:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004176:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004178:	7013      	strb	r3, [r2, #0]
 800417a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800417c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004180:	f023 0820 	bic.w	r8, r3, #32
 8004184:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004188:	d005      	beq.n	8004196 <__cvt+0x3a>
 800418a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800418e:	d100      	bne.n	8004192 <__cvt+0x36>
 8004190:	3501      	adds	r5, #1
 8004192:	2302      	movs	r3, #2
 8004194:	e000      	b.n	8004198 <__cvt+0x3c>
 8004196:	2303      	movs	r3, #3
 8004198:	aa07      	add	r2, sp, #28
 800419a:	9204      	str	r2, [sp, #16]
 800419c:	aa06      	add	r2, sp, #24
 800419e:	e9cd a202 	strd	sl, r2, [sp, #8]
 80041a2:	e9cd 3500 	strd	r3, r5, [sp]
 80041a6:	4622      	mov	r2, r4
 80041a8:	463b      	mov	r3, r7
 80041aa:	f001 fd85 	bl	8005cb8 <_dtoa_r>
 80041ae:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80041b2:	4606      	mov	r6, r0
 80041b4:	d102      	bne.n	80041bc <__cvt+0x60>
 80041b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80041b8:	07db      	lsls	r3, r3, #31
 80041ba:	d522      	bpl.n	8004202 <__cvt+0xa6>
 80041bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80041c0:	eb06 0905 	add.w	r9, r6, r5
 80041c4:	d110      	bne.n	80041e8 <__cvt+0x8c>
 80041c6:	7833      	ldrb	r3, [r6, #0]
 80041c8:	2b30      	cmp	r3, #48	; 0x30
 80041ca:	d10a      	bne.n	80041e2 <__cvt+0x86>
 80041cc:	2200      	movs	r2, #0
 80041ce:	2300      	movs	r3, #0
 80041d0:	4620      	mov	r0, r4
 80041d2:	4639      	mov	r1, r7
 80041d4:	f7fc fbe8 	bl	80009a8 <__aeabi_dcmpeq>
 80041d8:	b918      	cbnz	r0, 80041e2 <__cvt+0x86>
 80041da:	f1c5 0501 	rsb	r5, r5, #1
 80041de:	f8ca 5000 	str.w	r5, [sl]
 80041e2:	f8da 3000 	ldr.w	r3, [sl]
 80041e6:	4499      	add	r9, r3
 80041e8:	2200      	movs	r2, #0
 80041ea:	2300      	movs	r3, #0
 80041ec:	4620      	mov	r0, r4
 80041ee:	4639      	mov	r1, r7
 80041f0:	f7fc fbda 	bl	80009a8 <__aeabi_dcmpeq>
 80041f4:	b108      	cbz	r0, 80041fa <__cvt+0x9e>
 80041f6:	f8cd 901c 	str.w	r9, [sp, #28]
 80041fa:	2230      	movs	r2, #48	; 0x30
 80041fc:	9b07      	ldr	r3, [sp, #28]
 80041fe:	454b      	cmp	r3, r9
 8004200:	d307      	bcc.n	8004212 <__cvt+0xb6>
 8004202:	4630      	mov	r0, r6
 8004204:	9b07      	ldr	r3, [sp, #28]
 8004206:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004208:	1b9b      	subs	r3, r3, r6
 800420a:	6013      	str	r3, [r2, #0]
 800420c:	b008      	add	sp, #32
 800420e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004212:	1c59      	adds	r1, r3, #1
 8004214:	9107      	str	r1, [sp, #28]
 8004216:	701a      	strb	r2, [r3, #0]
 8004218:	e7f0      	b.n	80041fc <__cvt+0xa0>

0800421a <__exponent>:
 800421a:	4603      	mov	r3, r0
 800421c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800421e:	2900      	cmp	r1, #0
 8004220:	f803 2b02 	strb.w	r2, [r3], #2
 8004224:	bfb6      	itet	lt
 8004226:	222d      	movlt	r2, #45	; 0x2d
 8004228:	222b      	movge	r2, #43	; 0x2b
 800422a:	4249      	neglt	r1, r1
 800422c:	2909      	cmp	r1, #9
 800422e:	7042      	strb	r2, [r0, #1]
 8004230:	dd2b      	ble.n	800428a <__exponent+0x70>
 8004232:	f10d 0407 	add.w	r4, sp, #7
 8004236:	46a4      	mov	ip, r4
 8004238:	270a      	movs	r7, #10
 800423a:	fb91 f6f7 	sdiv	r6, r1, r7
 800423e:	460a      	mov	r2, r1
 8004240:	46a6      	mov	lr, r4
 8004242:	fb07 1516 	mls	r5, r7, r6, r1
 8004246:	2a63      	cmp	r2, #99	; 0x63
 8004248:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800424c:	4631      	mov	r1, r6
 800424e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004252:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004256:	dcf0      	bgt.n	800423a <__exponent+0x20>
 8004258:	3130      	adds	r1, #48	; 0x30
 800425a:	f1ae 0502 	sub.w	r5, lr, #2
 800425e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004262:	4629      	mov	r1, r5
 8004264:	1c44      	adds	r4, r0, #1
 8004266:	4561      	cmp	r1, ip
 8004268:	d30a      	bcc.n	8004280 <__exponent+0x66>
 800426a:	f10d 0209 	add.w	r2, sp, #9
 800426e:	eba2 020e 	sub.w	r2, r2, lr
 8004272:	4565      	cmp	r5, ip
 8004274:	bf88      	it	hi
 8004276:	2200      	movhi	r2, #0
 8004278:	4413      	add	r3, r2
 800427a:	1a18      	subs	r0, r3, r0
 800427c:	b003      	add	sp, #12
 800427e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004280:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004284:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004288:	e7ed      	b.n	8004266 <__exponent+0x4c>
 800428a:	2330      	movs	r3, #48	; 0x30
 800428c:	3130      	adds	r1, #48	; 0x30
 800428e:	7083      	strb	r3, [r0, #2]
 8004290:	70c1      	strb	r1, [r0, #3]
 8004292:	1d03      	adds	r3, r0, #4
 8004294:	e7f1      	b.n	800427a <__exponent+0x60>
	...

08004298 <_printf_float>:
 8004298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800429c:	b091      	sub	sp, #68	; 0x44
 800429e:	460c      	mov	r4, r1
 80042a0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80042a4:	4616      	mov	r6, r2
 80042a6:	461f      	mov	r7, r3
 80042a8:	4605      	mov	r5, r0
 80042aa:	f002 fe59 	bl	8006f60 <_localeconv_r>
 80042ae:	6803      	ldr	r3, [r0, #0]
 80042b0:	4618      	mov	r0, r3
 80042b2:	9309      	str	r3, [sp, #36]	; 0x24
 80042b4:	f7fb ff4c 	bl	8000150 <strlen>
 80042b8:	2300      	movs	r3, #0
 80042ba:	930e      	str	r3, [sp, #56]	; 0x38
 80042bc:	f8d8 3000 	ldr.w	r3, [r8]
 80042c0:	900a      	str	r0, [sp, #40]	; 0x28
 80042c2:	3307      	adds	r3, #7
 80042c4:	f023 0307 	bic.w	r3, r3, #7
 80042c8:	f103 0208 	add.w	r2, r3, #8
 80042cc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80042d0:	f8d4 b000 	ldr.w	fp, [r4]
 80042d4:	f8c8 2000 	str.w	r2, [r8]
 80042d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042dc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80042e0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80042e4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80042e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80042ea:	f04f 32ff 	mov.w	r2, #4294967295
 80042ee:	4640      	mov	r0, r8
 80042f0:	4b9c      	ldr	r3, [pc, #624]	; (8004564 <_printf_float+0x2cc>)
 80042f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80042f4:	f7fc fb8a 	bl	8000a0c <__aeabi_dcmpun>
 80042f8:	bb70      	cbnz	r0, 8004358 <_printf_float+0xc0>
 80042fa:	f04f 32ff 	mov.w	r2, #4294967295
 80042fe:	4640      	mov	r0, r8
 8004300:	4b98      	ldr	r3, [pc, #608]	; (8004564 <_printf_float+0x2cc>)
 8004302:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004304:	f7fc fb64 	bl	80009d0 <__aeabi_dcmple>
 8004308:	bb30      	cbnz	r0, 8004358 <_printf_float+0xc0>
 800430a:	2200      	movs	r2, #0
 800430c:	2300      	movs	r3, #0
 800430e:	4640      	mov	r0, r8
 8004310:	4651      	mov	r1, sl
 8004312:	f7fc fb53 	bl	80009bc <__aeabi_dcmplt>
 8004316:	b110      	cbz	r0, 800431e <_printf_float+0x86>
 8004318:	232d      	movs	r3, #45	; 0x2d
 800431a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800431e:	4b92      	ldr	r3, [pc, #584]	; (8004568 <_printf_float+0x2d0>)
 8004320:	4892      	ldr	r0, [pc, #584]	; (800456c <_printf_float+0x2d4>)
 8004322:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004326:	bf94      	ite	ls
 8004328:	4698      	movls	r8, r3
 800432a:	4680      	movhi	r8, r0
 800432c:	2303      	movs	r3, #3
 800432e:	f04f 0a00 	mov.w	sl, #0
 8004332:	6123      	str	r3, [r4, #16]
 8004334:	f02b 0304 	bic.w	r3, fp, #4
 8004338:	6023      	str	r3, [r4, #0]
 800433a:	4633      	mov	r3, r6
 800433c:	4621      	mov	r1, r4
 800433e:	4628      	mov	r0, r5
 8004340:	9700      	str	r7, [sp, #0]
 8004342:	aa0f      	add	r2, sp, #60	; 0x3c
 8004344:	f000 f9d4 	bl	80046f0 <_printf_common>
 8004348:	3001      	adds	r0, #1
 800434a:	f040 8090 	bne.w	800446e <_printf_float+0x1d6>
 800434e:	f04f 30ff 	mov.w	r0, #4294967295
 8004352:	b011      	add	sp, #68	; 0x44
 8004354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004358:	4642      	mov	r2, r8
 800435a:	4653      	mov	r3, sl
 800435c:	4640      	mov	r0, r8
 800435e:	4651      	mov	r1, sl
 8004360:	f7fc fb54 	bl	8000a0c <__aeabi_dcmpun>
 8004364:	b148      	cbz	r0, 800437a <_printf_float+0xe2>
 8004366:	f1ba 0f00 	cmp.w	sl, #0
 800436a:	bfb8      	it	lt
 800436c:	232d      	movlt	r3, #45	; 0x2d
 800436e:	4880      	ldr	r0, [pc, #512]	; (8004570 <_printf_float+0x2d8>)
 8004370:	bfb8      	it	lt
 8004372:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004376:	4b7f      	ldr	r3, [pc, #508]	; (8004574 <_printf_float+0x2dc>)
 8004378:	e7d3      	b.n	8004322 <_printf_float+0x8a>
 800437a:	6863      	ldr	r3, [r4, #4]
 800437c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	d142      	bne.n	800440a <_printf_float+0x172>
 8004384:	2306      	movs	r3, #6
 8004386:	6063      	str	r3, [r4, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	9206      	str	r2, [sp, #24]
 800438c:	aa0e      	add	r2, sp, #56	; 0x38
 800438e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004392:	aa0d      	add	r2, sp, #52	; 0x34
 8004394:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004398:	9203      	str	r2, [sp, #12]
 800439a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800439e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80043a2:	6023      	str	r3, [r4, #0]
 80043a4:	6863      	ldr	r3, [r4, #4]
 80043a6:	4642      	mov	r2, r8
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	4628      	mov	r0, r5
 80043ac:	4653      	mov	r3, sl
 80043ae:	910b      	str	r1, [sp, #44]	; 0x2c
 80043b0:	f7ff fed4 	bl	800415c <__cvt>
 80043b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80043b6:	4680      	mov	r8, r0
 80043b8:	2947      	cmp	r1, #71	; 0x47
 80043ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 80043bc:	d108      	bne.n	80043d0 <_printf_float+0x138>
 80043be:	1cc8      	adds	r0, r1, #3
 80043c0:	db02      	blt.n	80043c8 <_printf_float+0x130>
 80043c2:	6863      	ldr	r3, [r4, #4]
 80043c4:	4299      	cmp	r1, r3
 80043c6:	dd40      	ble.n	800444a <_printf_float+0x1b2>
 80043c8:	f1a9 0902 	sub.w	r9, r9, #2
 80043cc:	fa5f f989 	uxtb.w	r9, r9
 80043d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80043d4:	d81f      	bhi.n	8004416 <_printf_float+0x17e>
 80043d6:	464a      	mov	r2, r9
 80043d8:	3901      	subs	r1, #1
 80043da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80043de:	910d      	str	r1, [sp, #52]	; 0x34
 80043e0:	f7ff ff1b 	bl	800421a <__exponent>
 80043e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80043e6:	4682      	mov	sl, r0
 80043e8:	1813      	adds	r3, r2, r0
 80043ea:	2a01      	cmp	r2, #1
 80043ec:	6123      	str	r3, [r4, #16]
 80043ee:	dc02      	bgt.n	80043f6 <_printf_float+0x15e>
 80043f0:	6822      	ldr	r2, [r4, #0]
 80043f2:	07d2      	lsls	r2, r2, #31
 80043f4:	d501      	bpl.n	80043fa <_printf_float+0x162>
 80043f6:	3301      	adds	r3, #1
 80043f8:	6123      	str	r3, [r4, #16]
 80043fa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d09b      	beq.n	800433a <_printf_float+0xa2>
 8004402:	232d      	movs	r3, #45	; 0x2d
 8004404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004408:	e797      	b.n	800433a <_printf_float+0xa2>
 800440a:	2947      	cmp	r1, #71	; 0x47
 800440c:	d1bc      	bne.n	8004388 <_printf_float+0xf0>
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1ba      	bne.n	8004388 <_printf_float+0xf0>
 8004412:	2301      	movs	r3, #1
 8004414:	e7b7      	b.n	8004386 <_printf_float+0xee>
 8004416:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800441a:	d118      	bne.n	800444e <_printf_float+0x1b6>
 800441c:	2900      	cmp	r1, #0
 800441e:	6863      	ldr	r3, [r4, #4]
 8004420:	dd0b      	ble.n	800443a <_printf_float+0x1a2>
 8004422:	6121      	str	r1, [r4, #16]
 8004424:	b913      	cbnz	r3, 800442c <_printf_float+0x194>
 8004426:	6822      	ldr	r2, [r4, #0]
 8004428:	07d0      	lsls	r0, r2, #31
 800442a:	d502      	bpl.n	8004432 <_printf_float+0x19a>
 800442c:	3301      	adds	r3, #1
 800442e:	440b      	add	r3, r1
 8004430:	6123      	str	r3, [r4, #16]
 8004432:	f04f 0a00 	mov.w	sl, #0
 8004436:	65a1      	str	r1, [r4, #88]	; 0x58
 8004438:	e7df      	b.n	80043fa <_printf_float+0x162>
 800443a:	b913      	cbnz	r3, 8004442 <_printf_float+0x1aa>
 800443c:	6822      	ldr	r2, [r4, #0]
 800443e:	07d2      	lsls	r2, r2, #31
 8004440:	d501      	bpl.n	8004446 <_printf_float+0x1ae>
 8004442:	3302      	adds	r3, #2
 8004444:	e7f4      	b.n	8004430 <_printf_float+0x198>
 8004446:	2301      	movs	r3, #1
 8004448:	e7f2      	b.n	8004430 <_printf_float+0x198>
 800444a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800444e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004450:	4299      	cmp	r1, r3
 8004452:	db05      	blt.n	8004460 <_printf_float+0x1c8>
 8004454:	6823      	ldr	r3, [r4, #0]
 8004456:	6121      	str	r1, [r4, #16]
 8004458:	07d8      	lsls	r0, r3, #31
 800445a:	d5ea      	bpl.n	8004432 <_printf_float+0x19a>
 800445c:	1c4b      	adds	r3, r1, #1
 800445e:	e7e7      	b.n	8004430 <_printf_float+0x198>
 8004460:	2900      	cmp	r1, #0
 8004462:	bfcc      	ite	gt
 8004464:	2201      	movgt	r2, #1
 8004466:	f1c1 0202 	rsble	r2, r1, #2
 800446a:	4413      	add	r3, r2
 800446c:	e7e0      	b.n	8004430 <_printf_float+0x198>
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	055a      	lsls	r2, r3, #21
 8004472:	d407      	bmi.n	8004484 <_printf_float+0x1ec>
 8004474:	6923      	ldr	r3, [r4, #16]
 8004476:	4642      	mov	r2, r8
 8004478:	4631      	mov	r1, r6
 800447a:	4628      	mov	r0, r5
 800447c:	47b8      	blx	r7
 800447e:	3001      	adds	r0, #1
 8004480:	d12b      	bne.n	80044da <_printf_float+0x242>
 8004482:	e764      	b.n	800434e <_printf_float+0xb6>
 8004484:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004488:	f240 80dd 	bls.w	8004646 <_printf_float+0x3ae>
 800448c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004490:	2200      	movs	r2, #0
 8004492:	2300      	movs	r3, #0
 8004494:	f7fc fa88 	bl	80009a8 <__aeabi_dcmpeq>
 8004498:	2800      	cmp	r0, #0
 800449a:	d033      	beq.n	8004504 <_printf_float+0x26c>
 800449c:	2301      	movs	r3, #1
 800449e:	4631      	mov	r1, r6
 80044a0:	4628      	mov	r0, r5
 80044a2:	4a35      	ldr	r2, [pc, #212]	; (8004578 <_printf_float+0x2e0>)
 80044a4:	47b8      	blx	r7
 80044a6:	3001      	adds	r0, #1
 80044a8:	f43f af51 	beq.w	800434e <_printf_float+0xb6>
 80044ac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80044b0:	429a      	cmp	r2, r3
 80044b2:	db02      	blt.n	80044ba <_printf_float+0x222>
 80044b4:	6823      	ldr	r3, [r4, #0]
 80044b6:	07d8      	lsls	r0, r3, #31
 80044b8:	d50f      	bpl.n	80044da <_printf_float+0x242>
 80044ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044be:	4631      	mov	r1, r6
 80044c0:	4628      	mov	r0, r5
 80044c2:	47b8      	blx	r7
 80044c4:	3001      	adds	r0, #1
 80044c6:	f43f af42 	beq.w	800434e <_printf_float+0xb6>
 80044ca:	f04f 0800 	mov.w	r8, #0
 80044ce:	f104 091a 	add.w	r9, r4, #26
 80044d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044d4:	3b01      	subs	r3, #1
 80044d6:	4543      	cmp	r3, r8
 80044d8:	dc09      	bgt.n	80044ee <_printf_float+0x256>
 80044da:	6823      	ldr	r3, [r4, #0]
 80044dc:	079b      	lsls	r3, r3, #30
 80044de:	f100 8102 	bmi.w	80046e6 <_printf_float+0x44e>
 80044e2:	68e0      	ldr	r0, [r4, #12]
 80044e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80044e6:	4298      	cmp	r0, r3
 80044e8:	bfb8      	it	lt
 80044ea:	4618      	movlt	r0, r3
 80044ec:	e731      	b.n	8004352 <_printf_float+0xba>
 80044ee:	2301      	movs	r3, #1
 80044f0:	464a      	mov	r2, r9
 80044f2:	4631      	mov	r1, r6
 80044f4:	4628      	mov	r0, r5
 80044f6:	47b8      	blx	r7
 80044f8:	3001      	adds	r0, #1
 80044fa:	f43f af28 	beq.w	800434e <_printf_float+0xb6>
 80044fe:	f108 0801 	add.w	r8, r8, #1
 8004502:	e7e6      	b.n	80044d2 <_printf_float+0x23a>
 8004504:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004506:	2b00      	cmp	r3, #0
 8004508:	dc38      	bgt.n	800457c <_printf_float+0x2e4>
 800450a:	2301      	movs	r3, #1
 800450c:	4631      	mov	r1, r6
 800450e:	4628      	mov	r0, r5
 8004510:	4a19      	ldr	r2, [pc, #100]	; (8004578 <_printf_float+0x2e0>)
 8004512:	47b8      	blx	r7
 8004514:	3001      	adds	r0, #1
 8004516:	f43f af1a 	beq.w	800434e <_printf_float+0xb6>
 800451a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800451e:	4313      	orrs	r3, r2
 8004520:	d102      	bne.n	8004528 <_printf_float+0x290>
 8004522:	6823      	ldr	r3, [r4, #0]
 8004524:	07d9      	lsls	r1, r3, #31
 8004526:	d5d8      	bpl.n	80044da <_printf_float+0x242>
 8004528:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800452c:	4631      	mov	r1, r6
 800452e:	4628      	mov	r0, r5
 8004530:	47b8      	blx	r7
 8004532:	3001      	adds	r0, #1
 8004534:	f43f af0b 	beq.w	800434e <_printf_float+0xb6>
 8004538:	f04f 0900 	mov.w	r9, #0
 800453c:	f104 0a1a 	add.w	sl, r4, #26
 8004540:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004542:	425b      	negs	r3, r3
 8004544:	454b      	cmp	r3, r9
 8004546:	dc01      	bgt.n	800454c <_printf_float+0x2b4>
 8004548:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800454a:	e794      	b.n	8004476 <_printf_float+0x1de>
 800454c:	2301      	movs	r3, #1
 800454e:	4652      	mov	r2, sl
 8004550:	4631      	mov	r1, r6
 8004552:	4628      	mov	r0, r5
 8004554:	47b8      	blx	r7
 8004556:	3001      	adds	r0, #1
 8004558:	f43f aef9 	beq.w	800434e <_printf_float+0xb6>
 800455c:	f109 0901 	add.w	r9, r9, #1
 8004560:	e7ee      	b.n	8004540 <_printf_float+0x2a8>
 8004562:	bf00      	nop
 8004564:	7fefffff 	.word	0x7fefffff
 8004568:	08009318 	.word	0x08009318
 800456c:	0800931c 	.word	0x0800931c
 8004570:	08009324 	.word	0x08009324
 8004574:	08009320 	.word	0x08009320
 8004578:	08009328 	.word	0x08009328
 800457c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800457e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004580:	429a      	cmp	r2, r3
 8004582:	bfa8      	it	ge
 8004584:	461a      	movge	r2, r3
 8004586:	2a00      	cmp	r2, #0
 8004588:	4691      	mov	r9, r2
 800458a:	dc37      	bgt.n	80045fc <_printf_float+0x364>
 800458c:	f04f 0b00 	mov.w	fp, #0
 8004590:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004594:	f104 021a 	add.w	r2, r4, #26
 8004598:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800459c:	ebaa 0309 	sub.w	r3, sl, r9
 80045a0:	455b      	cmp	r3, fp
 80045a2:	dc33      	bgt.n	800460c <_printf_float+0x374>
 80045a4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80045a8:	429a      	cmp	r2, r3
 80045aa:	db3b      	blt.n	8004624 <_printf_float+0x38c>
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	07da      	lsls	r2, r3, #31
 80045b0:	d438      	bmi.n	8004624 <_printf_float+0x38c>
 80045b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045b4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80045b6:	eba3 020a 	sub.w	r2, r3, sl
 80045ba:	eba3 0901 	sub.w	r9, r3, r1
 80045be:	4591      	cmp	r9, r2
 80045c0:	bfa8      	it	ge
 80045c2:	4691      	movge	r9, r2
 80045c4:	f1b9 0f00 	cmp.w	r9, #0
 80045c8:	dc34      	bgt.n	8004634 <_printf_float+0x39c>
 80045ca:	f04f 0800 	mov.w	r8, #0
 80045ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80045d2:	f104 0a1a 	add.w	sl, r4, #26
 80045d6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80045da:	1a9b      	subs	r3, r3, r2
 80045dc:	eba3 0309 	sub.w	r3, r3, r9
 80045e0:	4543      	cmp	r3, r8
 80045e2:	f77f af7a 	ble.w	80044da <_printf_float+0x242>
 80045e6:	2301      	movs	r3, #1
 80045e8:	4652      	mov	r2, sl
 80045ea:	4631      	mov	r1, r6
 80045ec:	4628      	mov	r0, r5
 80045ee:	47b8      	blx	r7
 80045f0:	3001      	adds	r0, #1
 80045f2:	f43f aeac 	beq.w	800434e <_printf_float+0xb6>
 80045f6:	f108 0801 	add.w	r8, r8, #1
 80045fa:	e7ec      	b.n	80045d6 <_printf_float+0x33e>
 80045fc:	4613      	mov	r3, r2
 80045fe:	4631      	mov	r1, r6
 8004600:	4642      	mov	r2, r8
 8004602:	4628      	mov	r0, r5
 8004604:	47b8      	blx	r7
 8004606:	3001      	adds	r0, #1
 8004608:	d1c0      	bne.n	800458c <_printf_float+0x2f4>
 800460a:	e6a0      	b.n	800434e <_printf_float+0xb6>
 800460c:	2301      	movs	r3, #1
 800460e:	4631      	mov	r1, r6
 8004610:	4628      	mov	r0, r5
 8004612:	920b      	str	r2, [sp, #44]	; 0x2c
 8004614:	47b8      	blx	r7
 8004616:	3001      	adds	r0, #1
 8004618:	f43f ae99 	beq.w	800434e <_printf_float+0xb6>
 800461c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800461e:	f10b 0b01 	add.w	fp, fp, #1
 8004622:	e7b9      	b.n	8004598 <_printf_float+0x300>
 8004624:	4631      	mov	r1, r6
 8004626:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800462a:	4628      	mov	r0, r5
 800462c:	47b8      	blx	r7
 800462e:	3001      	adds	r0, #1
 8004630:	d1bf      	bne.n	80045b2 <_printf_float+0x31a>
 8004632:	e68c      	b.n	800434e <_printf_float+0xb6>
 8004634:	464b      	mov	r3, r9
 8004636:	4631      	mov	r1, r6
 8004638:	4628      	mov	r0, r5
 800463a:	eb08 020a 	add.w	r2, r8, sl
 800463e:	47b8      	blx	r7
 8004640:	3001      	adds	r0, #1
 8004642:	d1c2      	bne.n	80045ca <_printf_float+0x332>
 8004644:	e683      	b.n	800434e <_printf_float+0xb6>
 8004646:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004648:	2a01      	cmp	r2, #1
 800464a:	dc01      	bgt.n	8004650 <_printf_float+0x3b8>
 800464c:	07db      	lsls	r3, r3, #31
 800464e:	d537      	bpl.n	80046c0 <_printf_float+0x428>
 8004650:	2301      	movs	r3, #1
 8004652:	4642      	mov	r2, r8
 8004654:	4631      	mov	r1, r6
 8004656:	4628      	mov	r0, r5
 8004658:	47b8      	blx	r7
 800465a:	3001      	adds	r0, #1
 800465c:	f43f ae77 	beq.w	800434e <_printf_float+0xb6>
 8004660:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004664:	4631      	mov	r1, r6
 8004666:	4628      	mov	r0, r5
 8004668:	47b8      	blx	r7
 800466a:	3001      	adds	r0, #1
 800466c:	f43f ae6f 	beq.w	800434e <_printf_float+0xb6>
 8004670:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004674:	2200      	movs	r2, #0
 8004676:	2300      	movs	r3, #0
 8004678:	f7fc f996 	bl	80009a8 <__aeabi_dcmpeq>
 800467c:	b9d8      	cbnz	r0, 80046b6 <_printf_float+0x41e>
 800467e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004680:	f108 0201 	add.w	r2, r8, #1
 8004684:	3b01      	subs	r3, #1
 8004686:	4631      	mov	r1, r6
 8004688:	4628      	mov	r0, r5
 800468a:	47b8      	blx	r7
 800468c:	3001      	adds	r0, #1
 800468e:	d10e      	bne.n	80046ae <_printf_float+0x416>
 8004690:	e65d      	b.n	800434e <_printf_float+0xb6>
 8004692:	2301      	movs	r3, #1
 8004694:	464a      	mov	r2, r9
 8004696:	4631      	mov	r1, r6
 8004698:	4628      	mov	r0, r5
 800469a:	47b8      	blx	r7
 800469c:	3001      	adds	r0, #1
 800469e:	f43f ae56 	beq.w	800434e <_printf_float+0xb6>
 80046a2:	f108 0801 	add.w	r8, r8, #1
 80046a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046a8:	3b01      	subs	r3, #1
 80046aa:	4543      	cmp	r3, r8
 80046ac:	dcf1      	bgt.n	8004692 <_printf_float+0x3fa>
 80046ae:	4653      	mov	r3, sl
 80046b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80046b4:	e6e0      	b.n	8004478 <_printf_float+0x1e0>
 80046b6:	f04f 0800 	mov.w	r8, #0
 80046ba:	f104 091a 	add.w	r9, r4, #26
 80046be:	e7f2      	b.n	80046a6 <_printf_float+0x40e>
 80046c0:	2301      	movs	r3, #1
 80046c2:	4642      	mov	r2, r8
 80046c4:	e7df      	b.n	8004686 <_printf_float+0x3ee>
 80046c6:	2301      	movs	r3, #1
 80046c8:	464a      	mov	r2, r9
 80046ca:	4631      	mov	r1, r6
 80046cc:	4628      	mov	r0, r5
 80046ce:	47b8      	blx	r7
 80046d0:	3001      	adds	r0, #1
 80046d2:	f43f ae3c 	beq.w	800434e <_printf_float+0xb6>
 80046d6:	f108 0801 	add.w	r8, r8, #1
 80046da:	68e3      	ldr	r3, [r4, #12]
 80046dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80046de:	1a5b      	subs	r3, r3, r1
 80046e0:	4543      	cmp	r3, r8
 80046e2:	dcf0      	bgt.n	80046c6 <_printf_float+0x42e>
 80046e4:	e6fd      	b.n	80044e2 <_printf_float+0x24a>
 80046e6:	f04f 0800 	mov.w	r8, #0
 80046ea:	f104 0919 	add.w	r9, r4, #25
 80046ee:	e7f4      	b.n	80046da <_printf_float+0x442>

080046f0 <_printf_common>:
 80046f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046f4:	4616      	mov	r6, r2
 80046f6:	4699      	mov	r9, r3
 80046f8:	688a      	ldr	r2, [r1, #8]
 80046fa:	690b      	ldr	r3, [r1, #16]
 80046fc:	4607      	mov	r7, r0
 80046fe:	4293      	cmp	r3, r2
 8004700:	bfb8      	it	lt
 8004702:	4613      	movlt	r3, r2
 8004704:	6033      	str	r3, [r6, #0]
 8004706:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800470a:	460c      	mov	r4, r1
 800470c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004710:	b10a      	cbz	r2, 8004716 <_printf_common+0x26>
 8004712:	3301      	adds	r3, #1
 8004714:	6033      	str	r3, [r6, #0]
 8004716:	6823      	ldr	r3, [r4, #0]
 8004718:	0699      	lsls	r1, r3, #26
 800471a:	bf42      	ittt	mi
 800471c:	6833      	ldrmi	r3, [r6, #0]
 800471e:	3302      	addmi	r3, #2
 8004720:	6033      	strmi	r3, [r6, #0]
 8004722:	6825      	ldr	r5, [r4, #0]
 8004724:	f015 0506 	ands.w	r5, r5, #6
 8004728:	d106      	bne.n	8004738 <_printf_common+0x48>
 800472a:	f104 0a19 	add.w	sl, r4, #25
 800472e:	68e3      	ldr	r3, [r4, #12]
 8004730:	6832      	ldr	r2, [r6, #0]
 8004732:	1a9b      	subs	r3, r3, r2
 8004734:	42ab      	cmp	r3, r5
 8004736:	dc28      	bgt.n	800478a <_printf_common+0x9a>
 8004738:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800473c:	1e13      	subs	r3, r2, #0
 800473e:	6822      	ldr	r2, [r4, #0]
 8004740:	bf18      	it	ne
 8004742:	2301      	movne	r3, #1
 8004744:	0692      	lsls	r2, r2, #26
 8004746:	d42d      	bmi.n	80047a4 <_printf_common+0xb4>
 8004748:	4649      	mov	r1, r9
 800474a:	4638      	mov	r0, r7
 800474c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004750:	47c0      	blx	r8
 8004752:	3001      	adds	r0, #1
 8004754:	d020      	beq.n	8004798 <_printf_common+0xa8>
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	68e5      	ldr	r5, [r4, #12]
 800475a:	f003 0306 	and.w	r3, r3, #6
 800475e:	2b04      	cmp	r3, #4
 8004760:	bf18      	it	ne
 8004762:	2500      	movne	r5, #0
 8004764:	6832      	ldr	r2, [r6, #0]
 8004766:	f04f 0600 	mov.w	r6, #0
 800476a:	68a3      	ldr	r3, [r4, #8]
 800476c:	bf08      	it	eq
 800476e:	1aad      	subeq	r5, r5, r2
 8004770:	6922      	ldr	r2, [r4, #16]
 8004772:	bf08      	it	eq
 8004774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004778:	4293      	cmp	r3, r2
 800477a:	bfc4      	itt	gt
 800477c:	1a9b      	subgt	r3, r3, r2
 800477e:	18ed      	addgt	r5, r5, r3
 8004780:	341a      	adds	r4, #26
 8004782:	42b5      	cmp	r5, r6
 8004784:	d11a      	bne.n	80047bc <_printf_common+0xcc>
 8004786:	2000      	movs	r0, #0
 8004788:	e008      	b.n	800479c <_printf_common+0xac>
 800478a:	2301      	movs	r3, #1
 800478c:	4652      	mov	r2, sl
 800478e:	4649      	mov	r1, r9
 8004790:	4638      	mov	r0, r7
 8004792:	47c0      	blx	r8
 8004794:	3001      	adds	r0, #1
 8004796:	d103      	bne.n	80047a0 <_printf_common+0xb0>
 8004798:	f04f 30ff 	mov.w	r0, #4294967295
 800479c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047a0:	3501      	adds	r5, #1
 80047a2:	e7c4      	b.n	800472e <_printf_common+0x3e>
 80047a4:	2030      	movs	r0, #48	; 0x30
 80047a6:	18e1      	adds	r1, r4, r3
 80047a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047b2:	4422      	add	r2, r4
 80047b4:	3302      	adds	r3, #2
 80047b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047ba:	e7c5      	b.n	8004748 <_printf_common+0x58>
 80047bc:	2301      	movs	r3, #1
 80047be:	4622      	mov	r2, r4
 80047c0:	4649      	mov	r1, r9
 80047c2:	4638      	mov	r0, r7
 80047c4:	47c0      	blx	r8
 80047c6:	3001      	adds	r0, #1
 80047c8:	d0e6      	beq.n	8004798 <_printf_common+0xa8>
 80047ca:	3601      	adds	r6, #1
 80047cc:	e7d9      	b.n	8004782 <_printf_common+0x92>
	...

080047d0 <_printf_i>:
 80047d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047d4:	7e0f      	ldrb	r7, [r1, #24]
 80047d6:	4691      	mov	r9, r2
 80047d8:	2f78      	cmp	r7, #120	; 0x78
 80047da:	4680      	mov	r8, r0
 80047dc:	460c      	mov	r4, r1
 80047de:	469a      	mov	sl, r3
 80047e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80047e6:	d807      	bhi.n	80047f8 <_printf_i+0x28>
 80047e8:	2f62      	cmp	r7, #98	; 0x62
 80047ea:	d80a      	bhi.n	8004802 <_printf_i+0x32>
 80047ec:	2f00      	cmp	r7, #0
 80047ee:	f000 80d9 	beq.w	80049a4 <_printf_i+0x1d4>
 80047f2:	2f58      	cmp	r7, #88	; 0x58
 80047f4:	f000 80a4 	beq.w	8004940 <_printf_i+0x170>
 80047f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004800:	e03a      	b.n	8004878 <_printf_i+0xa8>
 8004802:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004806:	2b15      	cmp	r3, #21
 8004808:	d8f6      	bhi.n	80047f8 <_printf_i+0x28>
 800480a:	a101      	add	r1, pc, #4	; (adr r1, 8004810 <_printf_i+0x40>)
 800480c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004810:	08004869 	.word	0x08004869
 8004814:	0800487d 	.word	0x0800487d
 8004818:	080047f9 	.word	0x080047f9
 800481c:	080047f9 	.word	0x080047f9
 8004820:	080047f9 	.word	0x080047f9
 8004824:	080047f9 	.word	0x080047f9
 8004828:	0800487d 	.word	0x0800487d
 800482c:	080047f9 	.word	0x080047f9
 8004830:	080047f9 	.word	0x080047f9
 8004834:	080047f9 	.word	0x080047f9
 8004838:	080047f9 	.word	0x080047f9
 800483c:	0800498b 	.word	0x0800498b
 8004840:	080048ad 	.word	0x080048ad
 8004844:	0800496d 	.word	0x0800496d
 8004848:	080047f9 	.word	0x080047f9
 800484c:	080047f9 	.word	0x080047f9
 8004850:	080049ad 	.word	0x080049ad
 8004854:	080047f9 	.word	0x080047f9
 8004858:	080048ad 	.word	0x080048ad
 800485c:	080047f9 	.word	0x080047f9
 8004860:	080047f9 	.word	0x080047f9
 8004864:	08004975 	.word	0x08004975
 8004868:	682b      	ldr	r3, [r5, #0]
 800486a:	1d1a      	adds	r2, r3, #4
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	602a      	str	r2, [r5, #0]
 8004870:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004874:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004878:	2301      	movs	r3, #1
 800487a:	e0a4      	b.n	80049c6 <_printf_i+0x1f6>
 800487c:	6820      	ldr	r0, [r4, #0]
 800487e:	6829      	ldr	r1, [r5, #0]
 8004880:	0606      	lsls	r6, r0, #24
 8004882:	f101 0304 	add.w	r3, r1, #4
 8004886:	d50a      	bpl.n	800489e <_printf_i+0xce>
 8004888:	680e      	ldr	r6, [r1, #0]
 800488a:	602b      	str	r3, [r5, #0]
 800488c:	2e00      	cmp	r6, #0
 800488e:	da03      	bge.n	8004898 <_printf_i+0xc8>
 8004890:	232d      	movs	r3, #45	; 0x2d
 8004892:	4276      	negs	r6, r6
 8004894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004898:	230a      	movs	r3, #10
 800489a:	485e      	ldr	r0, [pc, #376]	; (8004a14 <_printf_i+0x244>)
 800489c:	e019      	b.n	80048d2 <_printf_i+0x102>
 800489e:	680e      	ldr	r6, [r1, #0]
 80048a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80048a4:	602b      	str	r3, [r5, #0]
 80048a6:	bf18      	it	ne
 80048a8:	b236      	sxthne	r6, r6
 80048aa:	e7ef      	b.n	800488c <_printf_i+0xbc>
 80048ac:	682b      	ldr	r3, [r5, #0]
 80048ae:	6820      	ldr	r0, [r4, #0]
 80048b0:	1d19      	adds	r1, r3, #4
 80048b2:	6029      	str	r1, [r5, #0]
 80048b4:	0601      	lsls	r1, r0, #24
 80048b6:	d501      	bpl.n	80048bc <_printf_i+0xec>
 80048b8:	681e      	ldr	r6, [r3, #0]
 80048ba:	e002      	b.n	80048c2 <_printf_i+0xf2>
 80048bc:	0646      	lsls	r6, r0, #25
 80048be:	d5fb      	bpl.n	80048b8 <_printf_i+0xe8>
 80048c0:	881e      	ldrh	r6, [r3, #0]
 80048c2:	2f6f      	cmp	r7, #111	; 0x6f
 80048c4:	bf0c      	ite	eq
 80048c6:	2308      	moveq	r3, #8
 80048c8:	230a      	movne	r3, #10
 80048ca:	4852      	ldr	r0, [pc, #328]	; (8004a14 <_printf_i+0x244>)
 80048cc:	2100      	movs	r1, #0
 80048ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048d2:	6865      	ldr	r5, [r4, #4]
 80048d4:	2d00      	cmp	r5, #0
 80048d6:	bfa8      	it	ge
 80048d8:	6821      	ldrge	r1, [r4, #0]
 80048da:	60a5      	str	r5, [r4, #8]
 80048dc:	bfa4      	itt	ge
 80048de:	f021 0104 	bicge.w	r1, r1, #4
 80048e2:	6021      	strge	r1, [r4, #0]
 80048e4:	b90e      	cbnz	r6, 80048ea <_printf_i+0x11a>
 80048e6:	2d00      	cmp	r5, #0
 80048e8:	d04d      	beq.n	8004986 <_printf_i+0x1b6>
 80048ea:	4615      	mov	r5, r2
 80048ec:	fbb6 f1f3 	udiv	r1, r6, r3
 80048f0:	fb03 6711 	mls	r7, r3, r1, r6
 80048f4:	5dc7      	ldrb	r7, [r0, r7]
 80048f6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80048fa:	4637      	mov	r7, r6
 80048fc:	42bb      	cmp	r3, r7
 80048fe:	460e      	mov	r6, r1
 8004900:	d9f4      	bls.n	80048ec <_printf_i+0x11c>
 8004902:	2b08      	cmp	r3, #8
 8004904:	d10b      	bne.n	800491e <_printf_i+0x14e>
 8004906:	6823      	ldr	r3, [r4, #0]
 8004908:	07de      	lsls	r6, r3, #31
 800490a:	d508      	bpl.n	800491e <_printf_i+0x14e>
 800490c:	6923      	ldr	r3, [r4, #16]
 800490e:	6861      	ldr	r1, [r4, #4]
 8004910:	4299      	cmp	r1, r3
 8004912:	bfde      	ittt	le
 8004914:	2330      	movle	r3, #48	; 0x30
 8004916:	f805 3c01 	strble.w	r3, [r5, #-1]
 800491a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800491e:	1b52      	subs	r2, r2, r5
 8004920:	6122      	str	r2, [r4, #16]
 8004922:	464b      	mov	r3, r9
 8004924:	4621      	mov	r1, r4
 8004926:	4640      	mov	r0, r8
 8004928:	f8cd a000 	str.w	sl, [sp]
 800492c:	aa03      	add	r2, sp, #12
 800492e:	f7ff fedf 	bl	80046f0 <_printf_common>
 8004932:	3001      	adds	r0, #1
 8004934:	d14c      	bne.n	80049d0 <_printf_i+0x200>
 8004936:	f04f 30ff 	mov.w	r0, #4294967295
 800493a:	b004      	add	sp, #16
 800493c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004940:	4834      	ldr	r0, [pc, #208]	; (8004a14 <_printf_i+0x244>)
 8004942:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004946:	6829      	ldr	r1, [r5, #0]
 8004948:	6823      	ldr	r3, [r4, #0]
 800494a:	f851 6b04 	ldr.w	r6, [r1], #4
 800494e:	6029      	str	r1, [r5, #0]
 8004950:	061d      	lsls	r5, r3, #24
 8004952:	d514      	bpl.n	800497e <_printf_i+0x1ae>
 8004954:	07df      	lsls	r7, r3, #31
 8004956:	bf44      	itt	mi
 8004958:	f043 0320 	orrmi.w	r3, r3, #32
 800495c:	6023      	strmi	r3, [r4, #0]
 800495e:	b91e      	cbnz	r6, 8004968 <_printf_i+0x198>
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	f023 0320 	bic.w	r3, r3, #32
 8004966:	6023      	str	r3, [r4, #0]
 8004968:	2310      	movs	r3, #16
 800496a:	e7af      	b.n	80048cc <_printf_i+0xfc>
 800496c:	6823      	ldr	r3, [r4, #0]
 800496e:	f043 0320 	orr.w	r3, r3, #32
 8004972:	6023      	str	r3, [r4, #0]
 8004974:	2378      	movs	r3, #120	; 0x78
 8004976:	4828      	ldr	r0, [pc, #160]	; (8004a18 <_printf_i+0x248>)
 8004978:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800497c:	e7e3      	b.n	8004946 <_printf_i+0x176>
 800497e:	0659      	lsls	r1, r3, #25
 8004980:	bf48      	it	mi
 8004982:	b2b6      	uxthmi	r6, r6
 8004984:	e7e6      	b.n	8004954 <_printf_i+0x184>
 8004986:	4615      	mov	r5, r2
 8004988:	e7bb      	b.n	8004902 <_printf_i+0x132>
 800498a:	682b      	ldr	r3, [r5, #0]
 800498c:	6826      	ldr	r6, [r4, #0]
 800498e:	1d18      	adds	r0, r3, #4
 8004990:	6961      	ldr	r1, [r4, #20]
 8004992:	6028      	str	r0, [r5, #0]
 8004994:	0635      	lsls	r5, r6, #24
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	d501      	bpl.n	800499e <_printf_i+0x1ce>
 800499a:	6019      	str	r1, [r3, #0]
 800499c:	e002      	b.n	80049a4 <_printf_i+0x1d4>
 800499e:	0670      	lsls	r0, r6, #25
 80049a0:	d5fb      	bpl.n	800499a <_printf_i+0x1ca>
 80049a2:	8019      	strh	r1, [r3, #0]
 80049a4:	2300      	movs	r3, #0
 80049a6:	4615      	mov	r5, r2
 80049a8:	6123      	str	r3, [r4, #16]
 80049aa:	e7ba      	b.n	8004922 <_printf_i+0x152>
 80049ac:	682b      	ldr	r3, [r5, #0]
 80049ae:	2100      	movs	r1, #0
 80049b0:	1d1a      	adds	r2, r3, #4
 80049b2:	602a      	str	r2, [r5, #0]
 80049b4:	681d      	ldr	r5, [r3, #0]
 80049b6:	6862      	ldr	r2, [r4, #4]
 80049b8:	4628      	mov	r0, r5
 80049ba:	f002 faef 	bl	8006f9c <memchr>
 80049be:	b108      	cbz	r0, 80049c4 <_printf_i+0x1f4>
 80049c0:	1b40      	subs	r0, r0, r5
 80049c2:	6060      	str	r0, [r4, #4]
 80049c4:	6863      	ldr	r3, [r4, #4]
 80049c6:	6123      	str	r3, [r4, #16]
 80049c8:	2300      	movs	r3, #0
 80049ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049ce:	e7a8      	b.n	8004922 <_printf_i+0x152>
 80049d0:	462a      	mov	r2, r5
 80049d2:	4649      	mov	r1, r9
 80049d4:	4640      	mov	r0, r8
 80049d6:	6923      	ldr	r3, [r4, #16]
 80049d8:	47d0      	blx	sl
 80049da:	3001      	adds	r0, #1
 80049dc:	d0ab      	beq.n	8004936 <_printf_i+0x166>
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	079b      	lsls	r3, r3, #30
 80049e2:	d413      	bmi.n	8004a0c <_printf_i+0x23c>
 80049e4:	68e0      	ldr	r0, [r4, #12]
 80049e6:	9b03      	ldr	r3, [sp, #12]
 80049e8:	4298      	cmp	r0, r3
 80049ea:	bfb8      	it	lt
 80049ec:	4618      	movlt	r0, r3
 80049ee:	e7a4      	b.n	800493a <_printf_i+0x16a>
 80049f0:	2301      	movs	r3, #1
 80049f2:	4632      	mov	r2, r6
 80049f4:	4649      	mov	r1, r9
 80049f6:	4640      	mov	r0, r8
 80049f8:	47d0      	blx	sl
 80049fa:	3001      	adds	r0, #1
 80049fc:	d09b      	beq.n	8004936 <_printf_i+0x166>
 80049fe:	3501      	adds	r5, #1
 8004a00:	68e3      	ldr	r3, [r4, #12]
 8004a02:	9903      	ldr	r1, [sp, #12]
 8004a04:	1a5b      	subs	r3, r3, r1
 8004a06:	42ab      	cmp	r3, r5
 8004a08:	dcf2      	bgt.n	80049f0 <_printf_i+0x220>
 8004a0a:	e7eb      	b.n	80049e4 <_printf_i+0x214>
 8004a0c:	2500      	movs	r5, #0
 8004a0e:	f104 0619 	add.w	r6, r4, #25
 8004a12:	e7f5      	b.n	8004a00 <_printf_i+0x230>
 8004a14:	0800932a 	.word	0x0800932a
 8004a18:	0800933b 	.word	0x0800933b

08004a1c <_scanf_float>:
 8004a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a20:	b087      	sub	sp, #28
 8004a22:	9303      	str	r3, [sp, #12]
 8004a24:	688b      	ldr	r3, [r1, #8]
 8004a26:	4617      	mov	r7, r2
 8004a28:	1e5a      	subs	r2, r3, #1
 8004a2a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004a2e:	bf85      	ittet	hi
 8004a30:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004a34:	195b      	addhi	r3, r3, r5
 8004a36:	2300      	movls	r3, #0
 8004a38:	9302      	strhi	r3, [sp, #8]
 8004a3a:	bf88      	it	hi
 8004a3c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004a40:	468b      	mov	fp, r1
 8004a42:	f04f 0500 	mov.w	r5, #0
 8004a46:	bf8c      	ite	hi
 8004a48:	608b      	strhi	r3, [r1, #8]
 8004a4a:	9302      	strls	r3, [sp, #8]
 8004a4c:	680b      	ldr	r3, [r1, #0]
 8004a4e:	4680      	mov	r8, r0
 8004a50:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004a54:	f84b 3b1c 	str.w	r3, [fp], #28
 8004a58:	460c      	mov	r4, r1
 8004a5a:	465e      	mov	r6, fp
 8004a5c:	46aa      	mov	sl, r5
 8004a5e:	46a9      	mov	r9, r5
 8004a60:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004a64:	9501      	str	r5, [sp, #4]
 8004a66:	68a2      	ldr	r2, [r4, #8]
 8004a68:	b152      	cbz	r2, 8004a80 <_scanf_float+0x64>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	2b4e      	cmp	r3, #78	; 0x4e
 8004a70:	d864      	bhi.n	8004b3c <_scanf_float+0x120>
 8004a72:	2b40      	cmp	r3, #64	; 0x40
 8004a74:	d83c      	bhi.n	8004af0 <_scanf_float+0xd4>
 8004a76:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004a7a:	b2c8      	uxtb	r0, r1
 8004a7c:	280e      	cmp	r0, #14
 8004a7e:	d93a      	bls.n	8004af6 <_scanf_float+0xda>
 8004a80:	f1b9 0f00 	cmp.w	r9, #0
 8004a84:	d003      	beq.n	8004a8e <_scanf_float+0x72>
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a8c:	6023      	str	r3, [r4, #0]
 8004a8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a92:	f1ba 0f01 	cmp.w	sl, #1
 8004a96:	f200 8113 	bhi.w	8004cc0 <_scanf_float+0x2a4>
 8004a9a:	455e      	cmp	r6, fp
 8004a9c:	f200 8105 	bhi.w	8004caa <_scanf_float+0x28e>
 8004aa0:	2501      	movs	r5, #1
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	b007      	add	sp, #28
 8004aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aaa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004aae:	2a0d      	cmp	r2, #13
 8004ab0:	d8e6      	bhi.n	8004a80 <_scanf_float+0x64>
 8004ab2:	a101      	add	r1, pc, #4	; (adr r1, 8004ab8 <_scanf_float+0x9c>)
 8004ab4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004ab8:	08004bf7 	.word	0x08004bf7
 8004abc:	08004a81 	.word	0x08004a81
 8004ac0:	08004a81 	.word	0x08004a81
 8004ac4:	08004a81 	.word	0x08004a81
 8004ac8:	08004c57 	.word	0x08004c57
 8004acc:	08004c2f 	.word	0x08004c2f
 8004ad0:	08004a81 	.word	0x08004a81
 8004ad4:	08004a81 	.word	0x08004a81
 8004ad8:	08004c05 	.word	0x08004c05
 8004adc:	08004a81 	.word	0x08004a81
 8004ae0:	08004a81 	.word	0x08004a81
 8004ae4:	08004a81 	.word	0x08004a81
 8004ae8:	08004a81 	.word	0x08004a81
 8004aec:	08004bbd 	.word	0x08004bbd
 8004af0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004af4:	e7db      	b.n	8004aae <_scanf_float+0x92>
 8004af6:	290e      	cmp	r1, #14
 8004af8:	d8c2      	bhi.n	8004a80 <_scanf_float+0x64>
 8004afa:	a001      	add	r0, pc, #4	; (adr r0, 8004b00 <_scanf_float+0xe4>)
 8004afc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004b00:	08004baf 	.word	0x08004baf
 8004b04:	08004a81 	.word	0x08004a81
 8004b08:	08004baf 	.word	0x08004baf
 8004b0c:	08004c43 	.word	0x08004c43
 8004b10:	08004a81 	.word	0x08004a81
 8004b14:	08004b5d 	.word	0x08004b5d
 8004b18:	08004b99 	.word	0x08004b99
 8004b1c:	08004b99 	.word	0x08004b99
 8004b20:	08004b99 	.word	0x08004b99
 8004b24:	08004b99 	.word	0x08004b99
 8004b28:	08004b99 	.word	0x08004b99
 8004b2c:	08004b99 	.word	0x08004b99
 8004b30:	08004b99 	.word	0x08004b99
 8004b34:	08004b99 	.word	0x08004b99
 8004b38:	08004b99 	.word	0x08004b99
 8004b3c:	2b6e      	cmp	r3, #110	; 0x6e
 8004b3e:	d809      	bhi.n	8004b54 <_scanf_float+0x138>
 8004b40:	2b60      	cmp	r3, #96	; 0x60
 8004b42:	d8b2      	bhi.n	8004aaa <_scanf_float+0x8e>
 8004b44:	2b54      	cmp	r3, #84	; 0x54
 8004b46:	d077      	beq.n	8004c38 <_scanf_float+0x21c>
 8004b48:	2b59      	cmp	r3, #89	; 0x59
 8004b4a:	d199      	bne.n	8004a80 <_scanf_float+0x64>
 8004b4c:	2d07      	cmp	r5, #7
 8004b4e:	d197      	bne.n	8004a80 <_scanf_float+0x64>
 8004b50:	2508      	movs	r5, #8
 8004b52:	e029      	b.n	8004ba8 <_scanf_float+0x18c>
 8004b54:	2b74      	cmp	r3, #116	; 0x74
 8004b56:	d06f      	beq.n	8004c38 <_scanf_float+0x21c>
 8004b58:	2b79      	cmp	r3, #121	; 0x79
 8004b5a:	e7f6      	b.n	8004b4a <_scanf_float+0x12e>
 8004b5c:	6821      	ldr	r1, [r4, #0]
 8004b5e:	05c8      	lsls	r0, r1, #23
 8004b60:	d51a      	bpl.n	8004b98 <_scanf_float+0x17c>
 8004b62:	9b02      	ldr	r3, [sp, #8]
 8004b64:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004b68:	6021      	str	r1, [r4, #0]
 8004b6a:	f109 0901 	add.w	r9, r9, #1
 8004b6e:	b11b      	cbz	r3, 8004b78 <_scanf_float+0x15c>
 8004b70:	3b01      	subs	r3, #1
 8004b72:	3201      	adds	r2, #1
 8004b74:	9302      	str	r3, [sp, #8]
 8004b76:	60a2      	str	r2, [r4, #8]
 8004b78:	68a3      	ldr	r3, [r4, #8]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	60a3      	str	r3, [r4, #8]
 8004b7e:	6923      	ldr	r3, [r4, #16]
 8004b80:	3301      	adds	r3, #1
 8004b82:	6123      	str	r3, [r4, #16]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	3b01      	subs	r3, #1
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	607b      	str	r3, [r7, #4]
 8004b8c:	f340 8084 	ble.w	8004c98 <_scanf_float+0x27c>
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	3301      	adds	r3, #1
 8004b94:	603b      	str	r3, [r7, #0]
 8004b96:	e766      	b.n	8004a66 <_scanf_float+0x4a>
 8004b98:	eb1a 0f05 	cmn.w	sl, r5
 8004b9c:	f47f af70 	bne.w	8004a80 <_scanf_float+0x64>
 8004ba0:	6822      	ldr	r2, [r4, #0]
 8004ba2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004ba6:	6022      	str	r2, [r4, #0]
 8004ba8:	f806 3b01 	strb.w	r3, [r6], #1
 8004bac:	e7e4      	b.n	8004b78 <_scanf_float+0x15c>
 8004bae:	6822      	ldr	r2, [r4, #0]
 8004bb0:	0610      	lsls	r0, r2, #24
 8004bb2:	f57f af65 	bpl.w	8004a80 <_scanf_float+0x64>
 8004bb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bba:	e7f4      	b.n	8004ba6 <_scanf_float+0x18a>
 8004bbc:	f1ba 0f00 	cmp.w	sl, #0
 8004bc0:	d10e      	bne.n	8004be0 <_scanf_float+0x1c4>
 8004bc2:	f1b9 0f00 	cmp.w	r9, #0
 8004bc6:	d10e      	bne.n	8004be6 <_scanf_float+0x1ca>
 8004bc8:	6822      	ldr	r2, [r4, #0]
 8004bca:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004bce:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004bd2:	d108      	bne.n	8004be6 <_scanf_float+0x1ca>
 8004bd4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004bd8:	f04f 0a01 	mov.w	sl, #1
 8004bdc:	6022      	str	r2, [r4, #0]
 8004bde:	e7e3      	b.n	8004ba8 <_scanf_float+0x18c>
 8004be0:	f1ba 0f02 	cmp.w	sl, #2
 8004be4:	d055      	beq.n	8004c92 <_scanf_float+0x276>
 8004be6:	2d01      	cmp	r5, #1
 8004be8:	d002      	beq.n	8004bf0 <_scanf_float+0x1d4>
 8004bea:	2d04      	cmp	r5, #4
 8004bec:	f47f af48 	bne.w	8004a80 <_scanf_float+0x64>
 8004bf0:	3501      	adds	r5, #1
 8004bf2:	b2ed      	uxtb	r5, r5
 8004bf4:	e7d8      	b.n	8004ba8 <_scanf_float+0x18c>
 8004bf6:	f1ba 0f01 	cmp.w	sl, #1
 8004bfa:	f47f af41 	bne.w	8004a80 <_scanf_float+0x64>
 8004bfe:	f04f 0a02 	mov.w	sl, #2
 8004c02:	e7d1      	b.n	8004ba8 <_scanf_float+0x18c>
 8004c04:	b97d      	cbnz	r5, 8004c26 <_scanf_float+0x20a>
 8004c06:	f1b9 0f00 	cmp.w	r9, #0
 8004c0a:	f47f af3c 	bne.w	8004a86 <_scanf_float+0x6a>
 8004c0e:	6822      	ldr	r2, [r4, #0]
 8004c10:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004c14:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004c18:	f47f af39 	bne.w	8004a8e <_scanf_float+0x72>
 8004c1c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004c20:	2501      	movs	r5, #1
 8004c22:	6022      	str	r2, [r4, #0]
 8004c24:	e7c0      	b.n	8004ba8 <_scanf_float+0x18c>
 8004c26:	2d03      	cmp	r5, #3
 8004c28:	d0e2      	beq.n	8004bf0 <_scanf_float+0x1d4>
 8004c2a:	2d05      	cmp	r5, #5
 8004c2c:	e7de      	b.n	8004bec <_scanf_float+0x1d0>
 8004c2e:	2d02      	cmp	r5, #2
 8004c30:	f47f af26 	bne.w	8004a80 <_scanf_float+0x64>
 8004c34:	2503      	movs	r5, #3
 8004c36:	e7b7      	b.n	8004ba8 <_scanf_float+0x18c>
 8004c38:	2d06      	cmp	r5, #6
 8004c3a:	f47f af21 	bne.w	8004a80 <_scanf_float+0x64>
 8004c3e:	2507      	movs	r5, #7
 8004c40:	e7b2      	b.n	8004ba8 <_scanf_float+0x18c>
 8004c42:	6822      	ldr	r2, [r4, #0]
 8004c44:	0591      	lsls	r1, r2, #22
 8004c46:	f57f af1b 	bpl.w	8004a80 <_scanf_float+0x64>
 8004c4a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004c4e:	6022      	str	r2, [r4, #0]
 8004c50:	f8cd 9004 	str.w	r9, [sp, #4]
 8004c54:	e7a8      	b.n	8004ba8 <_scanf_float+0x18c>
 8004c56:	6822      	ldr	r2, [r4, #0]
 8004c58:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004c5c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004c60:	d006      	beq.n	8004c70 <_scanf_float+0x254>
 8004c62:	0550      	lsls	r0, r2, #21
 8004c64:	f57f af0c 	bpl.w	8004a80 <_scanf_float+0x64>
 8004c68:	f1b9 0f00 	cmp.w	r9, #0
 8004c6c:	f43f af0f 	beq.w	8004a8e <_scanf_float+0x72>
 8004c70:	0591      	lsls	r1, r2, #22
 8004c72:	bf58      	it	pl
 8004c74:	9901      	ldrpl	r1, [sp, #4]
 8004c76:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004c7a:	bf58      	it	pl
 8004c7c:	eba9 0101 	subpl.w	r1, r9, r1
 8004c80:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004c84:	f04f 0900 	mov.w	r9, #0
 8004c88:	bf58      	it	pl
 8004c8a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004c8e:	6022      	str	r2, [r4, #0]
 8004c90:	e78a      	b.n	8004ba8 <_scanf_float+0x18c>
 8004c92:	f04f 0a03 	mov.w	sl, #3
 8004c96:	e787      	b.n	8004ba8 <_scanf_float+0x18c>
 8004c98:	4639      	mov	r1, r7
 8004c9a:	4640      	mov	r0, r8
 8004c9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004ca0:	4798      	blx	r3
 8004ca2:	2800      	cmp	r0, #0
 8004ca4:	f43f aedf 	beq.w	8004a66 <_scanf_float+0x4a>
 8004ca8:	e6ea      	b.n	8004a80 <_scanf_float+0x64>
 8004caa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004cae:	463a      	mov	r2, r7
 8004cb0:	4640      	mov	r0, r8
 8004cb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004cb6:	4798      	blx	r3
 8004cb8:	6923      	ldr	r3, [r4, #16]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	6123      	str	r3, [r4, #16]
 8004cbe:	e6ec      	b.n	8004a9a <_scanf_float+0x7e>
 8004cc0:	1e6b      	subs	r3, r5, #1
 8004cc2:	2b06      	cmp	r3, #6
 8004cc4:	d825      	bhi.n	8004d12 <_scanf_float+0x2f6>
 8004cc6:	2d02      	cmp	r5, #2
 8004cc8:	d836      	bhi.n	8004d38 <_scanf_float+0x31c>
 8004cca:	455e      	cmp	r6, fp
 8004ccc:	f67f aee8 	bls.w	8004aa0 <_scanf_float+0x84>
 8004cd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004cd4:	463a      	mov	r2, r7
 8004cd6:	4640      	mov	r0, r8
 8004cd8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004cdc:	4798      	blx	r3
 8004cde:	6923      	ldr	r3, [r4, #16]
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	6123      	str	r3, [r4, #16]
 8004ce4:	e7f1      	b.n	8004cca <_scanf_float+0x2ae>
 8004ce6:	9802      	ldr	r0, [sp, #8]
 8004ce8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004cec:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004cf0:	463a      	mov	r2, r7
 8004cf2:	9002      	str	r0, [sp, #8]
 8004cf4:	4640      	mov	r0, r8
 8004cf6:	4798      	blx	r3
 8004cf8:	6923      	ldr	r3, [r4, #16]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	6123      	str	r3, [r4, #16]
 8004cfe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d02:	fa5f fa8a 	uxtb.w	sl, sl
 8004d06:	f1ba 0f02 	cmp.w	sl, #2
 8004d0a:	d1ec      	bne.n	8004ce6 <_scanf_float+0x2ca>
 8004d0c:	3d03      	subs	r5, #3
 8004d0e:	b2ed      	uxtb	r5, r5
 8004d10:	1b76      	subs	r6, r6, r5
 8004d12:	6823      	ldr	r3, [r4, #0]
 8004d14:	05da      	lsls	r2, r3, #23
 8004d16:	d52f      	bpl.n	8004d78 <_scanf_float+0x35c>
 8004d18:	055b      	lsls	r3, r3, #21
 8004d1a:	d510      	bpl.n	8004d3e <_scanf_float+0x322>
 8004d1c:	455e      	cmp	r6, fp
 8004d1e:	f67f aebf 	bls.w	8004aa0 <_scanf_float+0x84>
 8004d22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004d26:	463a      	mov	r2, r7
 8004d28:	4640      	mov	r0, r8
 8004d2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004d2e:	4798      	blx	r3
 8004d30:	6923      	ldr	r3, [r4, #16]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	6123      	str	r3, [r4, #16]
 8004d36:	e7f1      	b.n	8004d1c <_scanf_float+0x300>
 8004d38:	46aa      	mov	sl, r5
 8004d3a:	9602      	str	r6, [sp, #8]
 8004d3c:	e7df      	b.n	8004cfe <_scanf_float+0x2e2>
 8004d3e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004d42:	6923      	ldr	r3, [r4, #16]
 8004d44:	2965      	cmp	r1, #101	; 0x65
 8004d46:	f103 33ff 	add.w	r3, r3, #4294967295
 8004d4a:	f106 35ff 	add.w	r5, r6, #4294967295
 8004d4e:	6123      	str	r3, [r4, #16]
 8004d50:	d00c      	beq.n	8004d6c <_scanf_float+0x350>
 8004d52:	2945      	cmp	r1, #69	; 0x45
 8004d54:	d00a      	beq.n	8004d6c <_scanf_float+0x350>
 8004d56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004d5a:	463a      	mov	r2, r7
 8004d5c:	4640      	mov	r0, r8
 8004d5e:	4798      	blx	r3
 8004d60:	6923      	ldr	r3, [r4, #16]
 8004d62:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	1eb5      	subs	r5, r6, #2
 8004d6a:	6123      	str	r3, [r4, #16]
 8004d6c:	463a      	mov	r2, r7
 8004d6e:	4640      	mov	r0, r8
 8004d70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004d74:	4798      	blx	r3
 8004d76:	462e      	mov	r6, r5
 8004d78:	6825      	ldr	r5, [r4, #0]
 8004d7a:	f015 0510 	ands.w	r5, r5, #16
 8004d7e:	d155      	bne.n	8004e2c <_scanf_float+0x410>
 8004d80:	7035      	strb	r5, [r6, #0]
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d8c:	d11b      	bne.n	8004dc6 <_scanf_float+0x3aa>
 8004d8e:	9b01      	ldr	r3, [sp, #4]
 8004d90:	454b      	cmp	r3, r9
 8004d92:	eba3 0209 	sub.w	r2, r3, r9
 8004d96:	d123      	bne.n	8004de0 <_scanf_float+0x3c4>
 8004d98:	2200      	movs	r2, #0
 8004d9a:	4659      	mov	r1, fp
 8004d9c:	4640      	mov	r0, r8
 8004d9e:	f000 fe7b 	bl	8005a98 <_strtod_r>
 8004da2:	6822      	ldr	r2, [r4, #0]
 8004da4:	9b03      	ldr	r3, [sp, #12]
 8004da6:	f012 0f02 	tst.w	r2, #2
 8004daa:	4606      	mov	r6, r0
 8004dac:	460f      	mov	r7, r1
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	d021      	beq.n	8004df6 <_scanf_float+0x3da>
 8004db2:	1d1a      	adds	r2, r3, #4
 8004db4:	9903      	ldr	r1, [sp, #12]
 8004db6:	600a      	str	r2, [r1, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	e9c3 6700 	strd	r6, r7, [r3]
 8004dbe:	68e3      	ldr	r3, [r4, #12]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	60e3      	str	r3, [r4, #12]
 8004dc4:	e66d      	b.n	8004aa2 <_scanf_float+0x86>
 8004dc6:	9b04      	ldr	r3, [sp, #16]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d0e5      	beq.n	8004d98 <_scanf_float+0x37c>
 8004dcc:	9905      	ldr	r1, [sp, #20]
 8004dce:	230a      	movs	r3, #10
 8004dd0:	462a      	mov	r2, r5
 8004dd2:	4640      	mov	r0, r8
 8004dd4:	3101      	adds	r1, #1
 8004dd6:	f000 fee1 	bl	8005b9c <_strtol_r>
 8004dda:	9b04      	ldr	r3, [sp, #16]
 8004ddc:	9e05      	ldr	r6, [sp, #20]
 8004dde:	1ac2      	subs	r2, r0, r3
 8004de0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004de4:	429e      	cmp	r6, r3
 8004de6:	bf28      	it	cs
 8004de8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004dec:	4630      	mov	r0, r6
 8004dee:	4910      	ldr	r1, [pc, #64]	; (8004e30 <_scanf_float+0x414>)
 8004df0:	f000 f826 	bl	8004e40 <siprintf>
 8004df4:	e7d0      	b.n	8004d98 <_scanf_float+0x37c>
 8004df6:	f012 0f04 	tst.w	r2, #4
 8004dfa:	f103 0204 	add.w	r2, r3, #4
 8004dfe:	d1d9      	bne.n	8004db4 <_scanf_float+0x398>
 8004e00:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004e04:	f8cc 2000 	str.w	r2, [ip]
 8004e08:	f8d3 8000 	ldr.w	r8, [r3]
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	f7fb fdfc 	bl	8000a0c <__aeabi_dcmpun>
 8004e14:	b128      	cbz	r0, 8004e22 <_scanf_float+0x406>
 8004e16:	4807      	ldr	r0, [pc, #28]	; (8004e34 <_scanf_float+0x418>)
 8004e18:	f000 f80e 	bl	8004e38 <nanf>
 8004e1c:	f8c8 0000 	str.w	r0, [r8]
 8004e20:	e7cd      	b.n	8004dbe <_scanf_float+0x3a2>
 8004e22:	4630      	mov	r0, r6
 8004e24:	4639      	mov	r1, r7
 8004e26:	f7fb fe4f 	bl	8000ac8 <__aeabi_d2f>
 8004e2a:	e7f7      	b.n	8004e1c <_scanf_float+0x400>
 8004e2c:	2500      	movs	r5, #0
 8004e2e:	e638      	b.n	8004aa2 <_scanf_float+0x86>
 8004e30:	0800934c 	.word	0x0800934c
 8004e34:	08009758 	.word	0x08009758

08004e38 <nanf>:
 8004e38:	4800      	ldr	r0, [pc, #0]	; (8004e3c <nanf+0x4>)
 8004e3a:	4770      	bx	lr
 8004e3c:	7fc00000 	.word	0x7fc00000

08004e40 <siprintf>:
 8004e40:	b40e      	push	{r1, r2, r3}
 8004e42:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e46:	b500      	push	{lr}
 8004e48:	b09c      	sub	sp, #112	; 0x70
 8004e4a:	ab1d      	add	r3, sp, #116	; 0x74
 8004e4c:	9002      	str	r0, [sp, #8]
 8004e4e:	9006      	str	r0, [sp, #24]
 8004e50:	9107      	str	r1, [sp, #28]
 8004e52:	9104      	str	r1, [sp, #16]
 8004e54:	4808      	ldr	r0, [pc, #32]	; (8004e78 <siprintf+0x38>)
 8004e56:	4909      	ldr	r1, [pc, #36]	; (8004e7c <siprintf+0x3c>)
 8004e58:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e5c:	9105      	str	r1, [sp, #20]
 8004e5e:	6800      	ldr	r0, [r0, #0]
 8004e60:	a902      	add	r1, sp, #8
 8004e62:	9301      	str	r3, [sp, #4]
 8004e64:	f002 feba 	bl	8007bdc <_svfiprintf_r>
 8004e68:	2200      	movs	r2, #0
 8004e6a:	9b02      	ldr	r3, [sp, #8]
 8004e6c:	701a      	strb	r2, [r3, #0]
 8004e6e:	b01c      	add	sp, #112	; 0x70
 8004e70:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e74:	b003      	add	sp, #12
 8004e76:	4770      	bx	lr
 8004e78:	2000007c 	.word	0x2000007c
 8004e7c:	ffff0208 	.word	0xffff0208

08004e80 <sulp>:
 8004e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e84:	460f      	mov	r7, r1
 8004e86:	4690      	mov	r8, r2
 8004e88:	f002 fc14 	bl	80076b4 <__ulp>
 8004e8c:	4604      	mov	r4, r0
 8004e8e:	460d      	mov	r5, r1
 8004e90:	f1b8 0f00 	cmp.w	r8, #0
 8004e94:	d011      	beq.n	8004eba <sulp+0x3a>
 8004e96:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004e9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	dd0b      	ble.n	8004eba <sulp+0x3a>
 8004ea2:	2400      	movs	r4, #0
 8004ea4:	051b      	lsls	r3, r3, #20
 8004ea6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004eaa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004eae:	4622      	mov	r2, r4
 8004eb0:	462b      	mov	r3, r5
 8004eb2:	f7fb fb11 	bl	80004d8 <__aeabi_dmul>
 8004eb6:	4604      	mov	r4, r0
 8004eb8:	460d      	mov	r5, r1
 8004eba:	4620      	mov	r0, r4
 8004ebc:	4629      	mov	r1, r5
 8004ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ec2:	0000      	movs	r0, r0
 8004ec4:	0000      	movs	r0, r0
	...

08004ec8 <_strtod_l>:
 8004ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ecc:	469b      	mov	fp, r3
 8004ece:	2300      	movs	r3, #0
 8004ed0:	b09f      	sub	sp, #124	; 0x7c
 8004ed2:	931a      	str	r3, [sp, #104]	; 0x68
 8004ed4:	4b9e      	ldr	r3, [pc, #632]	; (8005150 <_strtod_l+0x288>)
 8004ed6:	4682      	mov	sl, r0
 8004ed8:	681f      	ldr	r7, [r3, #0]
 8004eda:	460e      	mov	r6, r1
 8004edc:	4638      	mov	r0, r7
 8004ede:	9215      	str	r2, [sp, #84]	; 0x54
 8004ee0:	f7fb f936 	bl	8000150 <strlen>
 8004ee4:	f04f 0800 	mov.w	r8, #0
 8004ee8:	4604      	mov	r4, r0
 8004eea:	f04f 0900 	mov.w	r9, #0
 8004eee:	9619      	str	r6, [sp, #100]	; 0x64
 8004ef0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004ef2:	781a      	ldrb	r2, [r3, #0]
 8004ef4:	2a2b      	cmp	r2, #43	; 0x2b
 8004ef6:	d04c      	beq.n	8004f92 <_strtod_l+0xca>
 8004ef8:	d83a      	bhi.n	8004f70 <_strtod_l+0xa8>
 8004efa:	2a0d      	cmp	r2, #13
 8004efc:	d833      	bhi.n	8004f66 <_strtod_l+0x9e>
 8004efe:	2a08      	cmp	r2, #8
 8004f00:	d833      	bhi.n	8004f6a <_strtod_l+0xa2>
 8004f02:	2a00      	cmp	r2, #0
 8004f04:	d03d      	beq.n	8004f82 <_strtod_l+0xba>
 8004f06:	2300      	movs	r3, #0
 8004f08:	930a      	str	r3, [sp, #40]	; 0x28
 8004f0a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004f0c:	782b      	ldrb	r3, [r5, #0]
 8004f0e:	2b30      	cmp	r3, #48	; 0x30
 8004f10:	f040 80aa 	bne.w	8005068 <_strtod_l+0x1a0>
 8004f14:	786b      	ldrb	r3, [r5, #1]
 8004f16:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004f1a:	2b58      	cmp	r3, #88	; 0x58
 8004f1c:	d166      	bne.n	8004fec <_strtod_l+0x124>
 8004f1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f20:	4650      	mov	r0, sl
 8004f22:	9301      	str	r3, [sp, #4]
 8004f24:	ab1a      	add	r3, sp, #104	; 0x68
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	4a8a      	ldr	r2, [pc, #552]	; (8005154 <_strtod_l+0x28c>)
 8004f2a:	f8cd b008 	str.w	fp, [sp, #8]
 8004f2e:	ab1b      	add	r3, sp, #108	; 0x6c
 8004f30:	a919      	add	r1, sp, #100	; 0x64
 8004f32:	f001 fd17 	bl	8006964 <__gethex>
 8004f36:	f010 0607 	ands.w	r6, r0, #7
 8004f3a:	4604      	mov	r4, r0
 8004f3c:	d005      	beq.n	8004f4a <_strtod_l+0x82>
 8004f3e:	2e06      	cmp	r6, #6
 8004f40:	d129      	bne.n	8004f96 <_strtod_l+0xce>
 8004f42:	2300      	movs	r3, #0
 8004f44:	3501      	adds	r5, #1
 8004f46:	9519      	str	r5, [sp, #100]	; 0x64
 8004f48:	930a      	str	r3, [sp, #40]	; 0x28
 8004f4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f040 858a 	bne.w	8005a66 <_strtod_l+0xb9e>
 8004f52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f54:	b1d3      	cbz	r3, 8004f8c <_strtod_l+0xc4>
 8004f56:	4642      	mov	r2, r8
 8004f58:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004f5c:	4610      	mov	r0, r2
 8004f5e:	4619      	mov	r1, r3
 8004f60:	b01f      	add	sp, #124	; 0x7c
 8004f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f66:	2a20      	cmp	r2, #32
 8004f68:	d1cd      	bne.n	8004f06 <_strtod_l+0x3e>
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	9319      	str	r3, [sp, #100]	; 0x64
 8004f6e:	e7bf      	b.n	8004ef0 <_strtod_l+0x28>
 8004f70:	2a2d      	cmp	r2, #45	; 0x2d
 8004f72:	d1c8      	bne.n	8004f06 <_strtod_l+0x3e>
 8004f74:	2201      	movs	r2, #1
 8004f76:	920a      	str	r2, [sp, #40]	; 0x28
 8004f78:	1c5a      	adds	r2, r3, #1
 8004f7a:	9219      	str	r2, [sp, #100]	; 0x64
 8004f7c:	785b      	ldrb	r3, [r3, #1]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1c3      	bne.n	8004f0a <_strtod_l+0x42>
 8004f82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f84:	9619      	str	r6, [sp, #100]	; 0x64
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f040 856b 	bne.w	8005a62 <_strtod_l+0xb9a>
 8004f8c:	4642      	mov	r2, r8
 8004f8e:	464b      	mov	r3, r9
 8004f90:	e7e4      	b.n	8004f5c <_strtod_l+0x94>
 8004f92:	2200      	movs	r2, #0
 8004f94:	e7ef      	b.n	8004f76 <_strtod_l+0xae>
 8004f96:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004f98:	b13a      	cbz	r2, 8004faa <_strtod_l+0xe2>
 8004f9a:	2135      	movs	r1, #53	; 0x35
 8004f9c:	a81c      	add	r0, sp, #112	; 0x70
 8004f9e:	f002 fc8d 	bl	80078bc <__copybits>
 8004fa2:	4650      	mov	r0, sl
 8004fa4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004fa6:	f002 f855 	bl	8007054 <_Bfree>
 8004faa:	3e01      	subs	r6, #1
 8004fac:	2e04      	cmp	r6, #4
 8004fae:	d806      	bhi.n	8004fbe <_strtod_l+0xf6>
 8004fb0:	e8df f006 	tbb	[pc, r6]
 8004fb4:	1714030a 	.word	0x1714030a
 8004fb8:	0a          	.byte	0x0a
 8004fb9:	00          	.byte	0x00
 8004fba:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8004fbe:	0721      	lsls	r1, r4, #28
 8004fc0:	d5c3      	bpl.n	8004f4a <_strtod_l+0x82>
 8004fc2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8004fc6:	e7c0      	b.n	8004f4a <_strtod_l+0x82>
 8004fc8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004fca:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8004fce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004fd2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004fd6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004fda:	e7f0      	b.n	8004fbe <_strtod_l+0xf6>
 8004fdc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005158 <_strtod_l+0x290>
 8004fe0:	e7ed      	b.n	8004fbe <_strtod_l+0xf6>
 8004fe2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004fe6:	f04f 38ff 	mov.w	r8, #4294967295
 8004fea:	e7e8      	b.n	8004fbe <_strtod_l+0xf6>
 8004fec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004fee:	1c5a      	adds	r2, r3, #1
 8004ff0:	9219      	str	r2, [sp, #100]	; 0x64
 8004ff2:	785b      	ldrb	r3, [r3, #1]
 8004ff4:	2b30      	cmp	r3, #48	; 0x30
 8004ff6:	d0f9      	beq.n	8004fec <_strtod_l+0x124>
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0a6      	beq.n	8004f4a <_strtod_l+0x82>
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	9307      	str	r3, [sp, #28]
 8005000:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005002:	220a      	movs	r2, #10
 8005004:	9308      	str	r3, [sp, #32]
 8005006:	2300      	movs	r3, #0
 8005008:	469b      	mov	fp, r3
 800500a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800500e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005010:	7805      	ldrb	r5, [r0, #0]
 8005012:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8005016:	b2d9      	uxtb	r1, r3
 8005018:	2909      	cmp	r1, #9
 800501a:	d927      	bls.n	800506c <_strtod_l+0x1a4>
 800501c:	4622      	mov	r2, r4
 800501e:	4639      	mov	r1, r7
 8005020:	f002 fef2 	bl	8007e08 <strncmp>
 8005024:	2800      	cmp	r0, #0
 8005026:	d033      	beq.n	8005090 <_strtod_l+0x1c8>
 8005028:	2000      	movs	r0, #0
 800502a:	462a      	mov	r2, r5
 800502c:	465c      	mov	r4, fp
 800502e:	4603      	mov	r3, r0
 8005030:	9004      	str	r0, [sp, #16]
 8005032:	2a65      	cmp	r2, #101	; 0x65
 8005034:	d001      	beq.n	800503a <_strtod_l+0x172>
 8005036:	2a45      	cmp	r2, #69	; 0x45
 8005038:	d114      	bne.n	8005064 <_strtod_l+0x19c>
 800503a:	b91c      	cbnz	r4, 8005044 <_strtod_l+0x17c>
 800503c:	9a07      	ldr	r2, [sp, #28]
 800503e:	4302      	orrs	r2, r0
 8005040:	d09f      	beq.n	8004f82 <_strtod_l+0xba>
 8005042:	2400      	movs	r4, #0
 8005044:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005046:	1c72      	adds	r2, r6, #1
 8005048:	9219      	str	r2, [sp, #100]	; 0x64
 800504a:	7872      	ldrb	r2, [r6, #1]
 800504c:	2a2b      	cmp	r2, #43	; 0x2b
 800504e:	d079      	beq.n	8005144 <_strtod_l+0x27c>
 8005050:	2a2d      	cmp	r2, #45	; 0x2d
 8005052:	f000 8083 	beq.w	800515c <_strtod_l+0x294>
 8005056:	2700      	movs	r7, #0
 8005058:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800505c:	2909      	cmp	r1, #9
 800505e:	f240 8083 	bls.w	8005168 <_strtod_l+0x2a0>
 8005062:	9619      	str	r6, [sp, #100]	; 0x64
 8005064:	2500      	movs	r5, #0
 8005066:	e09f      	b.n	80051a8 <_strtod_l+0x2e0>
 8005068:	2300      	movs	r3, #0
 800506a:	e7c8      	b.n	8004ffe <_strtod_l+0x136>
 800506c:	f1bb 0f08 	cmp.w	fp, #8
 8005070:	bfd5      	itete	le
 8005072:	9906      	ldrle	r1, [sp, #24]
 8005074:	9905      	ldrgt	r1, [sp, #20]
 8005076:	fb02 3301 	mlale	r3, r2, r1, r3
 800507a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800507e:	f100 0001 	add.w	r0, r0, #1
 8005082:	bfd4      	ite	le
 8005084:	9306      	strle	r3, [sp, #24]
 8005086:	9305      	strgt	r3, [sp, #20]
 8005088:	f10b 0b01 	add.w	fp, fp, #1
 800508c:	9019      	str	r0, [sp, #100]	; 0x64
 800508e:	e7be      	b.n	800500e <_strtod_l+0x146>
 8005090:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005092:	191a      	adds	r2, r3, r4
 8005094:	9219      	str	r2, [sp, #100]	; 0x64
 8005096:	5d1a      	ldrb	r2, [r3, r4]
 8005098:	f1bb 0f00 	cmp.w	fp, #0
 800509c:	d036      	beq.n	800510c <_strtod_l+0x244>
 800509e:	465c      	mov	r4, fp
 80050a0:	9004      	str	r0, [sp, #16]
 80050a2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80050a6:	2b09      	cmp	r3, #9
 80050a8:	d912      	bls.n	80050d0 <_strtod_l+0x208>
 80050aa:	2301      	movs	r3, #1
 80050ac:	e7c1      	b.n	8005032 <_strtod_l+0x16a>
 80050ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80050b0:	3001      	adds	r0, #1
 80050b2:	1c5a      	adds	r2, r3, #1
 80050b4:	9219      	str	r2, [sp, #100]	; 0x64
 80050b6:	785a      	ldrb	r2, [r3, #1]
 80050b8:	2a30      	cmp	r2, #48	; 0x30
 80050ba:	d0f8      	beq.n	80050ae <_strtod_l+0x1e6>
 80050bc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	f200 84d5 	bhi.w	8005a70 <_strtod_l+0xba8>
 80050c6:	9004      	str	r0, [sp, #16]
 80050c8:	2000      	movs	r0, #0
 80050ca:	4604      	mov	r4, r0
 80050cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80050ce:	9308      	str	r3, [sp, #32]
 80050d0:	3a30      	subs	r2, #48	; 0x30
 80050d2:	f100 0301 	add.w	r3, r0, #1
 80050d6:	d013      	beq.n	8005100 <_strtod_l+0x238>
 80050d8:	9904      	ldr	r1, [sp, #16]
 80050da:	1905      	adds	r5, r0, r4
 80050dc:	4419      	add	r1, r3
 80050de:	9104      	str	r1, [sp, #16]
 80050e0:	4623      	mov	r3, r4
 80050e2:	210a      	movs	r1, #10
 80050e4:	42ab      	cmp	r3, r5
 80050e6:	d113      	bne.n	8005110 <_strtod_l+0x248>
 80050e8:	1823      	adds	r3, r4, r0
 80050ea:	2b08      	cmp	r3, #8
 80050ec:	f104 0401 	add.w	r4, r4, #1
 80050f0:	4404      	add	r4, r0
 80050f2:	dc1b      	bgt.n	800512c <_strtod_l+0x264>
 80050f4:	230a      	movs	r3, #10
 80050f6:	9906      	ldr	r1, [sp, #24]
 80050f8:	fb03 2301 	mla	r3, r3, r1, r2
 80050fc:	9306      	str	r3, [sp, #24]
 80050fe:	2300      	movs	r3, #0
 8005100:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005102:	4618      	mov	r0, r3
 8005104:	1c51      	adds	r1, r2, #1
 8005106:	9119      	str	r1, [sp, #100]	; 0x64
 8005108:	7852      	ldrb	r2, [r2, #1]
 800510a:	e7ca      	b.n	80050a2 <_strtod_l+0x1da>
 800510c:	4658      	mov	r0, fp
 800510e:	e7d3      	b.n	80050b8 <_strtod_l+0x1f0>
 8005110:	2b08      	cmp	r3, #8
 8005112:	dc04      	bgt.n	800511e <_strtod_l+0x256>
 8005114:	9f06      	ldr	r7, [sp, #24]
 8005116:	434f      	muls	r7, r1
 8005118:	9706      	str	r7, [sp, #24]
 800511a:	3301      	adds	r3, #1
 800511c:	e7e2      	b.n	80050e4 <_strtod_l+0x21c>
 800511e:	1c5f      	adds	r7, r3, #1
 8005120:	2f10      	cmp	r7, #16
 8005122:	bfde      	ittt	le
 8005124:	9f05      	ldrle	r7, [sp, #20]
 8005126:	434f      	mulle	r7, r1
 8005128:	9705      	strle	r7, [sp, #20]
 800512a:	e7f6      	b.n	800511a <_strtod_l+0x252>
 800512c:	2c10      	cmp	r4, #16
 800512e:	bfdf      	itttt	le
 8005130:	230a      	movle	r3, #10
 8005132:	9905      	ldrle	r1, [sp, #20]
 8005134:	fb03 2301 	mlale	r3, r3, r1, r2
 8005138:	9305      	strle	r3, [sp, #20]
 800513a:	e7e0      	b.n	80050fe <_strtod_l+0x236>
 800513c:	2300      	movs	r3, #0
 800513e:	9304      	str	r3, [sp, #16]
 8005140:	2301      	movs	r3, #1
 8005142:	e77b      	b.n	800503c <_strtod_l+0x174>
 8005144:	2700      	movs	r7, #0
 8005146:	1cb2      	adds	r2, r6, #2
 8005148:	9219      	str	r2, [sp, #100]	; 0x64
 800514a:	78b2      	ldrb	r2, [r6, #2]
 800514c:	e784      	b.n	8005058 <_strtod_l+0x190>
 800514e:	bf00      	nop
 8005150:	080095a0 	.word	0x080095a0
 8005154:	08009354 	.word	0x08009354
 8005158:	7ff00000 	.word	0x7ff00000
 800515c:	2701      	movs	r7, #1
 800515e:	e7f2      	b.n	8005146 <_strtod_l+0x27e>
 8005160:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005162:	1c51      	adds	r1, r2, #1
 8005164:	9119      	str	r1, [sp, #100]	; 0x64
 8005166:	7852      	ldrb	r2, [r2, #1]
 8005168:	2a30      	cmp	r2, #48	; 0x30
 800516a:	d0f9      	beq.n	8005160 <_strtod_l+0x298>
 800516c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005170:	2908      	cmp	r1, #8
 8005172:	f63f af77 	bhi.w	8005064 <_strtod_l+0x19c>
 8005176:	f04f 0e0a 	mov.w	lr, #10
 800517a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800517e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005180:	9209      	str	r2, [sp, #36]	; 0x24
 8005182:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005184:	1c51      	adds	r1, r2, #1
 8005186:	9119      	str	r1, [sp, #100]	; 0x64
 8005188:	7852      	ldrb	r2, [r2, #1]
 800518a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800518e:	2d09      	cmp	r5, #9
 8005190:	d935      	bls.n	80051fe <_strtod_l+0x336>
 8005192:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005194:	1b49      	subs	r1, r1, r5
 8005196:	2908      	cmp	r1, #8
 8005198:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800519c:	dc02      	bgt.n	80051a4 <_strtod_l+0x2dc>
 800519e:	4565      	cmp	r5, ip
 80051a0:	bfa8      	it	ge
 80051a2:	4665      	movge	r5, ip
 80051a4:	b107      	cbz	r7, 80051a8 <_strtod_l+0x2e0>
 80051a6:	426d      	negs	r5, r5
 80051a8:	2c00      	cmp	r4, #0
 80051aa:	d14c      	bne.n	8005246 <_strtod_l+0x37e>
 80051ac:	9907      	ldr	r1, [sp, #28]
 80051ae:	4301      	orrs	r1, r0
 80051b0:	f47f aecb 	bne.w	8004f4a <_strtod_l+0x82>
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f47f aee4 	bne.w	8004f82 <_strtod_l+0xba>
 80051ba:	2a69      	cmp	r2, #105	; 0x69
 80051bc:	d026      	beq.n	800520c <_strtod_l+0x344>
 80051be:	dc23      	bgt.n	8005208 <_strtod_l+0x340>
 80051c0:	2a49      	cmp	r2, #73	; 0x49
 80051c2:	d023      	beq.n	800520c <_strtod_l+0x344>
 80051c4:	2a4e      	cmp	r2, #78	; 0x4e
 80051c6:	f47f aedc 	bne.w	8004f82 <_strtod_l+0xba>
 80051ca:	499d      	ldr	r1, [pc, #628]	; (8005440 <_strtod_l+0x578>)
 80051cc:	a819      	add	r0, sp, #100	; 0x64
 80051ce:	f001 fe17 	bl	8006e00 <__match>
 80051d2:	2800      	cmp	r0, #0
 80051d4:	f43f aed5 	beq.w	8004f82 <_strtod_l+0xba>
 80051d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	2b28      	cmp	r3, #40	; 0x28
 80051de:	d12c      	bne.n	800523a <_strtod_l+0x372>
 80051e0:	4998      	ldr	r1, [pc, #608]	; (8005444 <_strtod_l+0x57c>)
 80051e2:	aa1c      	add	r2, sp, #112	; 0x70
 80051e4:	a819      	add	r0, sp, #100	; 0x64
 80051e6:	f001 fe1f 	bl	8006e28 <__hexnan>
 80051ea:	2805      	cmp	r0, #5
 80051ec:	d125      	bne.n	800523a <_strtod_l+0x372>
 80051ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80051f0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80051f4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80051f8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80051fc:	e6a5      	b.n	8004f4a <_strtod_l+0x82>
 80051fe:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8005202:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8005206:	e7bc      	b.n	8005182 <_strtod_l+0x2ba>
 8005208:	2a6e      	cmp	r2, #110	; 0x6e
 800520a:	e7dc      	b.n	80051c6 <_strtod_l+0x2fe>
 800520c:	498e      	ldr	r1, [pc, #568]	; (8005448 <_strtod_l+0x580>)
 800520e:	a819      	add	r0, sp, #100	; 0x64
 8005210:	f001 fdf6 	bl	8006e00 <__match>
 8005214:	2800      	cmp	r0, #0
 8005216:	f43f aeb4 	beq.w	8004f82 <_strtod_l+0xba>
 800521a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800521c:	498b      	ldr	r1, [pc, #556]	; (800544c <_strtod_l+0x584>)
 800521e:	3b01      	subs	r3, #1
 8005220:	a819      	add	r0, sp, #100	; 0x64
 8005222:	9319      	str	r3, [sp, #100]	; 0x64
 8005224:	f001 fdec 	bl	8006e00 <__match>
 8005228:	b910      	cbnz	r0, 8005230 <_strtod_l+0x368>
 800522a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800522c:	3301      	adds	r3, #1
 800522e:	9319      	str	r3, [sp, #100]	; 0x64
 8005230:	f04f 0800 	mov.w	r8, #0
 8005234:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8005450 <_strtod_l+0x588>
 8005238:	e687      	b.n	8004f4a <_strtod_l+0x82>
 800523a:	4886      	ldr	r0, [pc, #536]	; (8005454 <_strtod_l+0x58c>)
 800523c:	f002 fdce 	bl	8007ddc <nan>
 8005240:	4680      	mov	r8, r0
 8005242:	4689      	mov	r9, r1
 8005244:	e681      	b.n	8004f4a <_strtod_l+0x82>
 8005246:	9b04      	ldr	r3, [sp, #16]
 8005248:	f1bb 0f00 	cmp.w	fp, #0
 800524c:	bf08      	it	eq
 800524e:	46a3      	moveq	fp, r4
 8005250:	1aeb      	subs	r3, r5, r3
 8005252:	2c10      	cmp	r4, #16
 8005254:	9806      	ldr	r0, [sp, #24]
 8005256:	4626      	mov	r6, r4
 8005258:	9307      	str	r3, [sp, #28]
 800525a:	bfa8      	it	ge
 800525c:	2610      	movge	r6, #16
 800525e:	f7fb f8c1 	bl	80003e4 <__aeabi_ui2d>
 8005262:	2c09      	cmp	r4, #9
 8005264:	4680      	mov	r8, r0
 8005266:	4689      	mov	r9, r1
 8005268:	dd13      	ble.n	8005292 <_strtod_l+0x3ca>
 800526a:	4b7b      	ldr	r3, [pc, #492]	; (8005458 <_strtod_l+0x590>)
 800526c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005270:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005274:	f7fb f930 	bl	80004d8 <__aeabi_dmul>
 8005278:	4680      	mov	r8, r0
 800527a:	9805      	ldr	r0, [sp, #20]
 800527c:	4689      	mov	r9, r1
 800527e:	f7fb f8b1 	bl	80003e4 <__aeabi_ui2d>
 8005282:	4602      	mov	r2, r0
 8005284:	460b      	mov	r3, r1
 8005286:	4640      	mov	r0, r8
 8005288:	4649      	mov	r1, r9
 800528a:	f7fa ff6f 	bl	800016c <__adddf3>
 800528e:	4680      	mov	r8, r0
 8005290:	4689      	mov	r9, r1
 8005292:	2c0f      	cmp	r4, #15
 8005294:	dc36      	bgt.n	8005304 <_strtod_l+0x43c>
 8005296:	9b07      	ldr	r3, [sp, #28]
 8005298:	2b00      	cmp	r3, #0
 800529a:	f43f ae56 	beq.w	8004f4a <_strtod_l+0x82>
 800529e:	dd22      	ble.n	80052e6 <_strtod_l+0x41e>
 80052a0:	2b16      	cmp	r3, #22
 80052a2:	dc09      	bgt.n	80052b8 <_strtod_l+0x3f0>
 80052a4:	496c      	ldr	r1, [pc, #432]	; (8005458 <_strtod_l+0x590>)
 80052a6:	4642      	mov	r2, r8
 80052a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80052ac:	464b      	mov	r3, r9
 80052ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052b2:	f7fb f911 	bl	80004d8 <__aeabi_dmul>
 80052b6:	e7c3      	b.n	8005240 <_strtod_l+0x378>
 80052b8:	9a07      	ldr	r2, [sp, #28]
 80052ba:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80052be:	4293      	cmp	r3, r2
 80052c0:	db20      	blt.n	8005304 <_strtod_l+0x43c>
 80052c2:	4d65      	ldr	r5, [pc, #404]	; (8005458 <_strtod_l+0x590>)
 80052c4:	f1c4 040f 	rsb	r4, r4, #15
 80052c8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80052cc:	4642      	mov	r2, r8
 80052ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052d2:	464b      	mov	r3, r9
 80052d4:	f7fb f900 	bl	80004d8 <__aeabi_dmul>
 80052d8:	9b07      	ldr	r3, [sp, #28]
 80052da:	1b1c      	subs	r4, r3, r4
 80052dc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80052e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80052e4:	e7e5      	b.n	80052b2 <_strtod_l+0x3ea>
 80052e6:	9b07      	ldr	r3, [sp, #28]
 80052e8:	3316      	adds	r3, #22
 80052ea:	db0b      	blt.n	8005304 <_strtod_l+0x43c>
 80052ec:	9b04      	ldr	r3, [sp, #16]
 80052ee:	4640      	mov	r0, r8
 80052f0:	1b5d      	subs	r5, r3, r5
 80052f2:	4b59      	ldr	r3, [pc, #356]	; (8005458 <_strtod_l+0x590>)
 80052f4:	4649      	mov	r1, r9
 80052f6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80052fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80052fe:	f7fb fa15 	bl	800072c <__aeabi_ddiv>
 8005302:	e79d      	b.n	8005240 <_strtod_l+0x378>
 8005304:	9b07      	ldr	r3, [sp, #28]
 8005306:	1ba6      	subs	r6, r4, r6
 8005308:	441e      	add	r6, r3
 800530a:	2e00      	cmp	r6, #0
 800530c:	dd74      	ble.n	80053f8 <_strtod_l+0x530>
 800530e:	f016 030f 	ands.w	r3, r6, #15
 8005312:	d00a      	beq.n	800532a <_strtod_l+0x462>
 8005314:	4950      	ldr	r1, [pc, #320]	; (8005458 <_strtod_l+0x590>)
 8005316:	4642      	mov	r2, r8
 8005318:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800531c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005320:	464b      	mov	r3, r9
 8005322:	f7fb f8d9 	bl	80004d8 <__aeabi_dmul>
 8005326:	4680      	mov	r8, r0
 8005328:	4689      	mov	r9, r1
 800532a:	f036 060f 	bics.w	r6, r6, #15
 800532e:	d052      	beq.n	80053d6 <_strtod_l+0x50e>
 8005330:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8005334:	dd27      	ble.n	8005386 <_strtod_l+0x4be>
 8005336:	f04f 0b00 	mov.w	fp, #0
 800533a:	f8cd b010 	str.w	fp, [sp, #16]
 800533e:	f8cd b020 	str.w	fp, [sp, #32]
 8005342:	f8cd b018 	str.w	fp, [sp, #24]
 8005346:	2322      	movs	r3, #34	; 0x22
 8005348:	f04f 0800 	mov.w	r8, #0
 800534c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8005450 <_strtod_l+0x588>
 8005350:	f8ca 3000 	str.w	r3, [sl]
 8005354:	9b08      	ldr	r3, [sp, #32]
 8005356:	2b00      	cmp	r3, #0
 8005358:	f43f adf7 	beq.w	8004f4a <_strtod_l+0x82>
 800535c:	4650      	mov	r0, sl
 800535e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005360:	f001 fe78 	bl	8007054 <_Bfree>
 8005364:	4650      	mov	r0, sl
 8005366:	9906      	ldr	r1, [sp, #24]
 8005368:	f001 fe74 	bl	8007054 <_Bfree>
 800536c:	4650      	mov	r0, sl
 800536e:	9904      	ldr	r1, [sp, #16]
 8005370:	f001 fe70 	bl	8007054 <_Bfree>
 8005374:	4650      	mov	r0, sl
 8005376:	9908      	ldr	r1, [sp, #32]
 8005378:	f001 fe6c 	bl	8007054 <_Bfree>
 800537c:	4659      	mov	r1, fp
 800537e:	4650      	mov	r0, sl
 8005380:	f001 fe68 	bl	8007054 <_Bfree>
 8005384:	e5e1      	b.n	8004f4a <_strtod_l+0x82>
 8005386:	4b35      	ldr	r3, [pc, #212]	; (800545c <_strtod_l+0x594>)
 8005388:	4640      	mov	r0, r8
 800538a:	9305      	str	r3, [sp, #20]
 800538c:	2300      	movs	r3, #0
 800538e:	4649      	mov	r1, r9
 8005390:	461f      	mov	r7, r3
 8005392:	1136      	asrs	r6, r6, #4
 8005394:	2e01      	cmp	r6, #1
 8005396:	dc21      	bgt.n	80053dc <_strtod_l+0x514>
 8005398:	b10b      	cbz	r3, 800539e <_strtod_l+0x4d6>
 800539a:	4680      	mov	r8, r0
 800539c:	4689      	mov	r9, r1
 800539e:	4b2f      	ldr	r3, [pc, #188]	; (800545c <_strtod_l+0x594>)
 80053a0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80053a4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80053a8:	4642      	mov	r2, r8
 80053aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053ae:	464b      	mov	r3, r9
 80053b0:	f7fb f892 	bl	80004d8 <__aeabi_dmul>
 80053b4:	4b26      	ldr	r3, [pc, #152]	; (8005450 <_strtod_l+0x588>)
 80053b6:	460a      	mov	r2, r1
 80053b8:	400b      	ands	r3, r1
 80053ba:	4929      	ldr	r1, [pc, #164]	; (8005460 <_strtod_l+0x598>)
 80053bc:	4680      	mov	r8, r0
 80053be:	428b      	cmp	r3, r1
 80053c0:	d8b9      	bhi.n	8005336 <_strtod_l+0x46e>
 80053c2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80053c6:	428b      	cmp	r3, r1
 80053c8:	bf86      	itte	hi
 80053ca:	f04f 38ff 	movhi.w	r8, #4294967295
 80053ce:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8005464 <_strtod_l+0x59c>
 80053d2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80053d6:	2300      	movs	r3, #0
 80053d8:	9305      	str	r3, [sp, #20]
 80053da:	e07f      	b.n	80054dc <_strtod_l+0x614>
 80053dc:	07f2      	lsls	r2, r6, #31
 80053de:	d505      	bpl.n	80053ec <_strtod_l+0x524>
 80053e0:	9b05      	ldr	r3, [sp, #20]
 80053e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e6:	f7fb f877 	bl	80004d8 <__aeabi_dmul>
 80053ea:	2301      	movs	r3, #1
 80053ec:	9a05      	ldr	r2, [sp, #20]
 80053ee:	3701      	adds	r7, #1
 80053f0:	3208      	adds	r2, #8
 80053f2:	1076      	asrs	r6, r6, #1
 80053f4:	9205      	str	r2, [sp, #20]
 80053f6:	e7cd      	b.n	8005394 <_strtod_l+0x4cc>
 80053f8:	d0ed      	beq.n	80053d6 <_strtod_l+0x50e>
 80053fa:	4276      	negs	r6, r6
 80053fc:	f016 020f 	ands.w	r2, r6, #15
 8005400:	d00a      	beq.n	8005418 <_strtod_l+0x550>
 8005402:	4b15      	ldr	r3, [pc, #84]	; (8005458 <_strtod_l+0x590>)
 8005404:	4640      	mov	r0, r8
 8005406:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800540a:	4649      	mov	r1, r9
 800540c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005410:	f7fb f98c 	bl	800072c <__aeabi_ddiv>
 8005414:	4680      	mov	r8, r0
 8005416:	4689      	mov	r9, r1
 8005418:	1136      	asrs	r6, r6, #4
 800541a:	d0dc      	beq.n	80053d6 <_strtod_l+0x50e>
 800541c:	2e1f      	cmp	r6, #31
 800541e:	dd23      	ble.n	8005468 <_strtod_l+0x5a0>
 8005420:	f04f 0b00 	mov.w	fp, #0
 8005424:	f8cd b010 	str.w	fp, [sp, #16]
 8005428:	f8cd b020 	str.w	fp, [sp, #32]
 800542c:	f8cd b018 	str.w	fp, [sp, #24]
 8005430:	2322      	movs	r3, #34	; 0x22
 8005432:	f04f 0800 	mov.w	r8, #0
 8005436:	f04f 0900 	mov.w	r9, #0
 800543a:	f8ca 3000 	str.w	r3, [sl]
 800543e:	e789      	b.n	8005354 <_strtod_l+0x48c>
 8005440:	08009325 	.word	0x08009325
 8005444:	08009368 	.word	0x08009368
 8005448:	0800931d 	.word	0x0800931d
 800544c:	080094ac 	.word	0x080094ac
 8005450:	7ff00000 	.word	0x7ff00000
 8005454:	08009758 	.word	0x08009758
 8005458:	08009638 	.word	0x08009638
 800545c:	08009610 	.word	0x08009610
 8005460:	7ca00000 	.word	0x7ca00000
 8005464:	7fefffff 	.word	0x7fefffff
 8005468:	f016 0310 	ands.w	r3, r6, #16
 800546c:	bf18      	it	ne
 800546e:	236a      	movne	r3, #106	; 0x6a
 8005470:	4640      	mov	r0, r8
 8005472:	9305      	str	r3, [sp, #20]
 8005474:	4649      	mov	r1, r9
 8005476:	2300      	movs	r3, #0
 8005478:	4fb0      	ldr	r7, [pc, #704]	; (800573c <_strtod_l+0x874>)
 800547a:	07f2      	lsls	r2, r6, #31
 800547c:	d504      	bpl.n	8005488 <_strtod_l+0x5c0>
 800547e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005482:	f7fb f829 	bl	80004d8 <__aeabi_dmul>
 8005486:	2301      	movs	r3, #1
 8005488:	1076      	asrs	r6, r6, #1
 800548a:	f107 0708 	add.w	r7, r7, #8
 800548e:	d1f4      	bne.n	800547a <_strtod_l+0x5b2>
 8005490:	b10b      	cbz	r3, 8005496 <_strtod_l+0x5ce>
 8005492:	4680      	mov	r8, r0
 8005494:	4689      	mov	r9, r1
 8005496:	9b05      	ldr	r3, [sp, #20]
 8005498:	b1c3      	cbz	r3, 80054cc <_strtod_l+0x604>
 800549a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800549e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	4649      	mov	r1, r9
 80054a6:	dd11      	ble.n	80054cc <_strtod_l+0x604>
 80054a8:	2b1f      	cmp	r3, #31
 80054aa:	f340 8127 	ble.w	80056fc <_strtod_l+0x834>
 80054ae:	2b34      	cmp	r3, #52	; 0x34
 80054b0:	bfd8      	it	le
 80054b2:	f04f 33ff 	movle.w	r3, #4294967295
 80054b6:	f04f 0800 	mov.w	r8, #0
 80054ba:	bfcf      	iteee	gt
 80054bc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80054c0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80054c4:	fa03 f202 	lslle.w	r2, r3, r2
 80054c8:	ea02 0901 	andle.w	r9, r2, r1
 80054cc:	2200      	movs	r2, #0
 80054ce:	2300      	movs	r3, #0
 80054d0:	4640      	mov	r0, r8
 80054d2:	4649      	mov	r1, r9
 80054d4:	f7fb fa68 	bl	80009a8 <__aeabi_dcmpeq>
 80054d8:	2800      	cmp	r0, #0
 80054da:	d1a1      	bne.n	8005420 <_strtod_l+0x558>
 80054dc:	9b06      	ldr	r3, [sp, #24]
 80054de:	465a      	mov	r2, fp
 80054e0:	9300      	str	r3, [sp, #0]
 80054e2:	4650      	mov	r0, sl
 80054e4:	4623      	mov	r3, r4
 80054e6:	9908      	ldr	r1, [sp, #32]
 80054e8:	f001 fe1c 	bl	8007124 <__s2b>
 80054ec:	9008      	str	r0, [sp, #32]
 80054ee:	2800      	cmp	r0, #0
 80054f0:	f43f af21 	beq.w	8005336 <_strtod_l+0x46e>
 80054f4:	9b04      	ldr	r3, [sp, #16]
 80054f6:	f04f 0b00 	mov.w	fp, #0
 80054fa:	1b5d      	subs	r5, r3, r5
 80054fc:	9b07      	ldr	r3, [sp, #28]
 80054fe:	f8cd b010 	str.w	fp, [sp, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	bfb4      	ite	lt
 8005506:	462b      	movlt	r3, r5
 8005508:	2300      	movge	r3, #0
 800550a:	930e      	str	r3, [sp, #56]	; 0x38
 800550c:	9b07      	ldr	r3, [sp, #28]
 800550e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005512:	9314      	str	r3, [sp, #80]	; 0x50
 8005514:	9b08      	ldr	r3, [sp, #32]
 8005516:	4650      	mov	r0, sl
 8005518:	6859      	ldr	r1, [r3, #4]
 800551a:	f001 fd5b 	bl	8006fd4 <_Balloc>
 800551e:	9006      	str	r0, [sp, #24]
 8005520:	2800      	cmp	r0, #0
 8005522:	f43f af10 	beq.w	8005346 <_strtod_l+0x47e>
 8005526:	9b08      	ldr	r3, [sp, #32]
 8005528:	300c      	adds	r0, #12
 800552a:	691a      	ldr	r2, [r3, #16]
 800552c:	f103 010c 	add.w	r1, r3, #12
 8005530:	3202      	adds	r2, #2
 8005532:	0092      	lsls	r2, r2, #2
 8005534:	f001 fd40 	bl	8006fb8 <memcpy>
 8005538:	ab1c      	add	r3, sp, #112	; 0x70
 800553a:	9301      	str	r3, [sp, #4]
 800553c:	ab1b      	add	r3, sp, #108	; 0x6c
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	4642      	mov	r2, r8
 8005542:	464b      	mov	r3, r9
 8005544:	4650      	mov	r0, sl
 8005546:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800554a:	f002 f92d 	bl	80077a8 <__d2b>
 800554e:	901a      	str	r0, [sp, #104]	; 0x68
 8005550:	2800      	cmp	r0, #0
 8005552:	f43f aef8 	beq.w	8005346 <_strtod_l+0x47e>
 8005556:	2101      	movs	r1, #1
 8005558:	4650      	mov	r0, sl
 800555a:	f001 fe7b 	bl	8007254 <__i2b>
 800555e:	4603      	mov	r3, r0
 8005560:	9004      	str	r0, [sp, #16]
 8005562:	2800      	cmp	r0, #0
 8005564:	f43f aeef 	beq.w	8005346 <_strtod_l+0x47e>
 8005568:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800556a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800556c:	2d00      	cmp	r5, #0
 800556e:	bfab      	itete	ge
 8005570:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005572:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8005574:	18ee      	addge	r6, r5, r3
 8005576:	1b5c      	sublt	r4, r3, r5
 8005578:	9b05      	ldr	r3, [sp, #20]
 800557a:	bfa8      	it	ge
 800557c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800557e:	eba5 0503 	sub.w	r5, r5, r3
 8005582:	4415      	add	r5, r2
 8005584:	4b6e      	ldr	r3, [pc, #440]	; (8005740 <_strtod_l+0x878>)
 8005586:	f105 35ff 	add.w	r5, r5, #4294967295
 800558a:	bfb8      	it	lt
 800558c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800558e:	429d      	cmp	r5, r3
 8005590:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005594:	f280 80c4 	bge.w	8005720 <_strtod_l+0x858>
 8005598:	1b5b      	subs	r3, r3, r5
 800559a:	2b1f      	cmp	r3, #31
 800559c:	f04f 0701 	mov.w	r7, #1
 80055a0:	eba2 0203 	sub.w	r2, r2, r3
 80055a4:	f300 80b1 	bgt.w	800570a <_strtod_l+0x842>
 80055a8:	2500      	movs	r5, #0
 80055aa:	fa07 f303 	lsl.w	r3, r7, r3
 80055ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80055b0:	18b7      	adds	r7, r6, r2
 80055b2:	9b05      	ldr	r3, [sp, #20]
 80055b4:	42be      	cmp	r6, r7
 80055b6:	4414      	add	r4, r2
 80055b8:	441c      	add	r4, r3
 80055ba:	4633      	mov	r3, r6
 80055bc:	bfa8      	it	ge
 80055be:	463b      	movge	r3, r7
 80055c0:	42a3      	cmp	r3, r4
 80055c2:	bfa8      	it	ge
 80055c4:	4623      	movge	r3, r4
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	bfc2      	ittt	gt
 80055ca:	1aff      	subgt	r7, r7, r3
 80055cc:	1ae4      	subgt	r4, r4, r3
 80055ce:	1af6      	subgt	r6, r6, r3
 80055d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	dd17      	ble.n	8005606 <_strtod_l+0x73e>
 80055d6:	461a      	mov	r2, r3
 80055d8:	4650      	mov	r0, sl
 80055da:	9904      	ldr	r1, [sp, #16]
 80055dc:	f001 fef8 	bl	80073d0 <__pow5mult>
 80055e0:	9004      	str	r0, [sp, #16]
 80055e2:	2800      	cmp	r0, #0
 80055e4:	f43f aeaf 	beq.w	8005346 <_strtod_l+0x47e>
 80055e8:	4601      	mov	r1, r0
 80055ea:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80055ec:	4650      	mov	r0, sl
 80055ee:	f001 fe47 	bl	8007280 <__multiply>
 80055f2:	9009      	str	r0, [sp, #36]	; 0x24
 80055f4:	2800      	cmp	r0, #0
 80055f6:	f43f aea6 	beq.w	8005346 <_strtod_l+0x47e>
 80055fa:	4650      	mov	r0, sl
 80055fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80055fe:	f001 fd29 	bl	8007054 <_Bfree>
 8005602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005604:	931a      	str	r3, [sp, #104]	; 0x68
 8005606:	2f00      	cmp	r7, #0
 8005608:	f300 808e 	bgt.w	8005728 <_strtod_l+0x860>
 800560c:	9b07      	ldr	r3, [sp, #28]
 800560e:	2b00      	cmp	r3, #0
 8005610:	dd08      	ble.n	8005624 <_strtod_l+0x75c>
 8005612:	4650      	mov	r0, sl
 8005614:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005616:	9906      	ldr	r1, [sp, #24]
 8005618:	f001 feda 	bl	80073d0 <__pow5mult>
 800561c:	9006      	str	r0, [sp, #24]
 800561e:	2800      	cmp	r0, #0
 8005620:	f43f ae91 	beq.w	8005346 <_strtod_l+0x47e>
 8005624:	2c00      	cmp	r4, #0
 8005626:	dd08      	ble.n	800563a <_strtod_l+0x772>
 8005628:	4622      	mov	r2, r4
 800562a:	4650      	mov	r0, sl
 800562c:	9906      	ldr	r1, [sp, #24]
 800562e:	f001 ff29 	bl	8007484 <__lshift>
 8005632:	9006      	str	r0, [sp, #24]
 8005634:	2800      	cmp	r0, #0
 8005636:	f43f ae86 	beq.w	8005346 <_strtod_l+0x47e>
 800563a:	2e00      	cmp	r6, #0
 800563c:	dd08      	ble.n	8005650 <_strtod_l+0x788>
 800563e:	4632      	mov	r2, r6
 8005640:	4650      	mov	r0, sl
 8005642:	9904      	ldr	r1, [sp, #16]
 8005644:	f001 ff1e 	bl	8007484 <__lshift>
 8005648:	9004      	str	r0, [sp, #16]
 800564a:	2800      	cmp	r0, #0
 800564c:	f43f ae7b 	beq.w	8005346 <_strtod_l+0x47e>
 8005650:	4650      	mov	r0, sl
 8005652:	9a06      	ldr	r2, [sp, #24]
 8005654:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005656:	f001 ffa1 	bl	800759c <__mdiff>
 800565a:	4683      	mov	fp, r0
 800565c:	2800      	cmp	r0, #0
 800565e:	f43f ae72 	beq.w	8005346 <_strtod_l+0x47e>
 8005662:	2400      	movs	r4, #0
 8005664:	68c3      	ldr	r3, [r0, #12]
 8005666:	9904      	ldr	r1, [sp, #16]
 8005668:	60c4      	str	r4, [r0, #12]
 800566a:	930b      	str	r3, [sp, #44]	; 0x2c
 800566c:	f001 ff7a 	bl	8007564 <__mcmp>
 8005670:	42a0      	cmp	r0, r4
 8005672:	da6b      	bge.n	800574c <_strtod_l+0x884>
 8005674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005676:	ea53 0308 	orrs.w	r3, r3, r8
 800567a:	f040 8091 	bne.w	80057a0 <_strtod_l+0x8d8>
 800567e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005682:	2b00      	cmp	r3, #0
 8005684:	f040 808c 	bne.w	80057a0 <_strtod_l+0x8d8>
 8005688:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800568c:	0d1b      	lsrs	r3, r3, #20
 800568e:	051b      	lsls	r3, r3, #20
 8005690:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005694:	f240 8084 	bls.w	80057a0 <_strtod_l+0x8d8>
 8005698:	f8db 3014 	ldr.w	r3, [fp, #20]
 800569c:	b91b      	cbnz	r3, 80056a6 <_strtod_l+0x7de>
 800569e:	f8db 3010 	ldr.w	r3, [fp, #16]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	dd7c      	ble.n	80057a0 <_strtod_l+0x8d8>
 80056a6:	4659      	mov	r1, fp
 80056a8:	2201      	movs	r2, #1
 80056aa:	4650      	mov	r0, sl
 80056ac:	f001 feea 	bl	8007484 <__lshift>
 80056b0:	9904      	ldr	r1, [sp, #16]
 80056b2:	4683      	mov	fp, r0
 80056b4:	f001 ff56 	bl	8007564 <__mcmp>
 80056b8:	2800      	cmp	r0, #0
 80056ba:	dd71      	ble.n	80057a0 <_strtod_l+0x8d8>
 80056bc:	9905      	ldr	r1, [sp, #20]
 80056be:	464b      	mov	r3, r9
 80056c0:	4a20      	ldr	r2, [pc, #128]	; (8005744 <_strtod_l+0x87c>)
 80056c2:	2900      	cmp	r1, #0
 80056c4:	f000 808c 	beq.w	80057e0 <_strtod_l+0x918>
 80056c8:	ea02 0109 	and.w	r1, r2, r9
 80056cc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80056d0:	f300 8086 	bgt.w	80057e0 <_strtod_l+0x918>
 80056d4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80056d8:	f77f aeaa 	ble.w	8005430 <_strtod_l+0x568>
 80056dc:	4640      	mov	r0, r8
 80056de:	4649      	mov	r1, r9
 80056e0:	4b19      	ldr	r3, [pc, #100]	; (8005748 <_strtod_l+0x880>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	f7fa fef8 	bl	80004d8 <__aeabi_dmul>
 80056e8:	460b      	mov	r3, r1
 80056ea:	4303      	orrs	r3, r0
 80056ec:	bf08      	it	eq
 80056ee:	2322      	moveq	r3, #34	; 0x22
 80056f0:	4680      	mov	r8, r0
 80056f2:	4689      	mov	r9, r1
 80056f4:	bf08      	it	eq
 80056f6:	f8ca 3000 	streq.w	r3, [sl]
 80056fa:	e62f      	b.n	800535c <_strtod_l+0x494>
 80056fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005700:	fa02 f303 	lsl.w	r3, r2, r3
 8005704:	ea03 0808 	and.w	r8, r3, r8
 8005708:	e6e0      	b.n	80054cc <_strtod_l+0x604>
 800570a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800570e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005712:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005716:	35e2      	adds	r5, #226	; 0xe2
 8005718:	fa07 f505 	lsl.w	r5, r7, r5
 800571c:	970f      	str	r7, [sp, #60]	; 0x3c
 800571e:	e747      	b.n	80055b0 <_strtod_l+0x6e8>
 8005720:	2301      	movs	r3, #1
 8005722:	2500      	movs	r5, #0
 8005724:	930f      	str	r3, [sp, #60]	; 0x3c
 8005726:	e743      	b.n	80055b0 <_strtod_l+0x6e8>
 8005728:	463a      	mov	r2, r7
 800572a:	4650      	mov	r0, sl
 800572c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800572e:	f001 fea9 	bl	8007484 <__lshift>
 8005732:	901a      	str	r0, [sp, #104]	; 0x68
 8005734:	2800      	cmp	r0, #0
 8005736:	f47f af69 	bne.w	800560c <_strtod_l+0x744>
 800573a:	e604      	b.n	8005346 <_strtod_l+0x47e>
 800573c:	08009380 	.word	0x08009380
 8005740:	fffffc02 	.word	0xfffffc02
 8005744:	7ff00000 	.word	0x7ff00000
 8005748:	39500000 	.word	0x39500000
 800574c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005750:	d165      	bne.n	800581e <_strtod_l+0x956>
 8005752:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005754:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005758:	b35a      	cbz	r2, 80057b2 <_strtod_l+0x8ea>
 800575a:	4a99      	ldr	r2, [pc, #612]	; (80059c0 <_strtod_l+0xaf8>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d12b      	bne.n	80057b8 <_strtod_l+0x8f0>
 8005760:	9b05      	ldr	r3, [sp, #20]
 8005762:	4641      	mov	r1, r8
 8005764:	b303      	cbz	r3, 80057a8 <_strtod_l+0x8e0>
 8005766:	464a      	mov	r2, r9
 8005768:	4b96      	ldr	r3, [pc, #600]	; (80059c4 <_strtod_l+0xafc>)
 800576a:	4013      	ands	r3, r2
 800576c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005770:	f04f 32ff 	mov.w	r2, #4294967295
 8005774:	d81b      	bhi.n	80057ae <_strtod_l+0x8e6>
 8005776:	0d1b      	lsrs	r3, r3, #20
 8005778:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800577c:	fa02 f303 	lsl.w	r3, r2, r3
 8005780:	4299      	cmp	r1, r3
 8005782:	d119      	bne.n	80057b8 <_strtod_l+0x8f0>
 8005784:	4b90      	ldr	r3, [pc, #576]	; (80059c8 <_strtod_l+0xb00>)
 8005786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005788:	429a      	cmp	r2, r3
 800578a:	d102      	bne.n	8005792 <_strtod_l+0x8ca>
 800578c:	3101      	adds	r1, #1
 800578e:	f43f adda 	beq.w	8005346 <_strtod_l+0x47e>
 8005792:	f04f 0800 	mov.w	r8, #0
 8005796:	4b8b      	ldr	r3, [pc, #556]	; (80059c4 <_strtod_l+0xafc>)
 8005798:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800579a:	401a      	ands	r2, r3
 800579c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80057a0:	9b05      	ldr	r3, [sp, #20]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d19a      	bne.n	80056dc <_strtod_l+0x814>
 80057a6:	e5d9      	b.n	800535c <_strtod_l+0x494>
 80057a8:	f04f 33ff 	mov.w	r3, #4294967295
 80057ac:	e7e8      	b.n	8005780 <_strtod_l+0x8b8>
 80057ae:	4613      	mov	r3, r2
 80057b0:	e7e6      	b.n	8005780 <_strtod_l+0x8b8>
 80057b2:	ea53 0308 	orrs.w	r3, r3, r8
 80057b6:	d081      	beq.n	80056bc <_strtod_l+0x7f4>
 80057b8:	b1e5      	cbz	r5, 80057f4 <_strtod_l+0x92c>
 80057ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057bc:	421d      	tst	r5, r3
 80057be:	d0ef      	beq.n	80057a0 <_strtod_l+0x8d8>
 80057c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057c2:	4640      	mov	r0, r8
 80057c4:	4649      	mov	r1, r9
 80057c6:	9a05      	ldr	r2, [sp, #20]
 80057c8:	b1c3      	cbz	r3, 80057fc <_strtod_l+0x934>
 80057ca:	f7ff fb59 	bl	8004e80 <sulp>
 80057ce:	4602      	mov	r2, r0
 80057d0:	460b      	mov	r3, r1
 80057d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057d6:	f7fa fcc9 	bl	800016c <__adddf3>
 80057da:	4680      	mov	r8, r0
 80057dc:	4689      	mov	r9, r1
 80057de:	e7df      	b.n	80057a0 <_strtod_l+0x8d8>
 80057e0:	4013      	ands	r3, r2
 80057e2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80057e6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80057ea:	f04f 38ff 	mov.w	r8, #4294967295
 80057ee:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80057f2:	e7d5      	b.n	80057a0 <_strtod_l+0x8d8>
 80057f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057f6:	ea13 0f08 	tst.w	r3, r8
 80057fa:	e7e0      	b.n	80057be <_strtod_l+0x8f6>
 80057fc:	f7ff fb40 	bl	8004e80 <sulp>
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005808:	f7fa fcae 	bl	8000168 <__aeabi_dsub>
 800580c:	2200      	movs	r2, #0
 800580e:	2300      	movs	r3, #0
 8005810:	4680      	mov	r8, r0
 8005812:	4689      	mov	r9, r1
 8005814:	f7fb f8c8 	bl	80009a8 <__aeabi_dcmpeq>
 8005818:	2800      	cmp	r0, #0
 800581a:	d0c1      	beq.n	80057a0 <_strtod_l+0x8d8>
 800581c:	e608      	b.n	8005430 <_strtod_l+0x568>
 800581e:	4658      	mov	r0, fp
 8005820:	9904      	ldr	r1, [sp, #16]
 8005822:	f002 f81d 	bl	8007860 <__ratio>
 8005826:	2200      	movs	r2, #0
 8005828:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800582c:	4606      	mov	r6, r0
 800582e:	460f      	mov	r7, r1
 8005830:	f7fb f8ce 	bl	80009d0 <__aeabi_dcmple>
 8005834:	2800      	cmp	r0, #0
 8005836:	d070      	beq.n	800591a <_strtod_l+0xa52>
 8005838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800583a:	2b00      	cmp	r3, #0
 800583c:	d042      	beq.n	80058c4 <_strtod_l+0x9fc>
 800583e:	2600      	movs	r6, #0
 8005840:	4f62      	ldr	r7, [pc, #392]	; (80059cc <_strtod_l+0xb04>)
 8005842:	4d62      	ldr	r5, [pc, #392]	; (80059cc <_strtod_l+0xb04>)
 8005844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005846:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800584a:	0d1b      	lsrs	r3, r3, #20
 800584c:	051b      	lsls	r3, r3, #20
 800584e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005850:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005852:	4b5f      	ldr	r3, [pc, #380]	; (80059d0 <_strtod_l+0xb08>)
 8005854:	429a      	cmp	r2, r3
 8005856:	f040 80c3 	bne.w	80059e0 <_strtod_l+0xb18>
 800585a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800585c:	4640      	mov	r0, r8
 800585e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8005862:	4649      	mov	r1, r9
 8005864:	f001 ff26 	bl	80076b4 <__ulp>
 8005868:	4602      	mov	r2, r0
 800586a:	460b      	mov	r3, r1
 800586c:	4630      	mov	r0, r6
 800586e:	4639      	mov	r1, r7
 8005870:	f7fa fe32 	bl	80004d8 <__aeabi_dmul>
 8005874:	4642      	mov	r2, r8
 8005876:	464b      	mov	r3, r9
 8005878:	f7fa fc78 	bl	800016c <__adddf3>
 800587c:	460b      	mov	r3, r1
 800587e:	4951      	ldr	r1, [pc, #324]	; (80059c4 <_strtod_l+0xafc>)
 8005880:	4a54      	ldr	r2, [pc, #336]	; (80059d4 <_strtod_l+0xb0c>)
 8005882:	4019      	ands	r1, r3
 8005884:	4291      	cmp	r1, r2
 8005886:	4680      	mov	r8, r0
 8005888:	d95d      	bls.n	8005946 <_strtod_l+0xa7e>
 800588a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800588c:	4b4e      	ldr	r3, [pc, #312]	; (80059c8 <_strtod_l+0xb00>)
 800588e:	429a      	cmp	r2, r3
 8005890:	d103      	bne.n	800589a <_strtod_l+0x9d2>
 8005892:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005894:	3301      	adds	r3, #1
 8005896:	f43f ad56 	beq.w	8005346 <_strtod_l+0x47e>
 800589a:	f04f 38ff 	mov.w	r8, #4294967295
 800589e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80059c8 <_strtod_l+0xb00>
 80058a2:	4650      	mov	r0, sl
 80058a4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80058a6:	f001 fbd5 	bl	8007054 <_Bfree>
 80058aa:	4650      	mov	r0, sl
 80058ac:	9906      	ldr	r1, [sp, #24]
 80058ae:	f001 fbd1 	bl	8007054 <_Bfree>
 80058b2:	4650      	mov	r0, sl
 80058b4:	9904      	ldr	r1, [sp, #16]
 80058b6:	f001 fbcd 	bl	8007054 <_Bfree>
 80058ba:	4659      	mov	r1, fp
 80058bc:	4650      	mov	r0, sl
 80058be:	f001 fbc9 	bl	8007054 <_Bfree>
 80058c2:	e627      	b.n	8005514 <_strtod_l+0x64c>
 80058c4:	f1b8 0f00 	cmp.w	r8, #0
 80058c8:	d119      	bne.n	80058fe <_strtod_l+0xa36>
 80058ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058d0:	b9e3      	cbnz	r3, 800590c <_strtod_l+0xa44>
 80058d2:	2200      	movs	r2, #0
 80058d4:	4630      	mov	r0, r6
 80058d6:	4639      	mov	r1, r7
 80058d8:	4b3c      	ldr	r3, [pc, #240]	; (80059cc <_strtod_l+0xb04>)
 80058da:	f7fb f86f 	bl	80009bc <__aeabi_dcmplt>
 80058de:	b9c8      	cbnz	r0, 8005914 <_strtod_l+0xa4c>
 80058e0:	2200      	movs	r2, #0
 80058e2:	4630      	mov	r0, r6
 80058e4:	4639      	mov	r1, r7
 80058e6:	4b3c      	ldr	r3, [pc, #240]	; (80059d8 <_strtod_l+0xb10>)
 80058e8:	f7fa fdf6 	bl	80004d8 <__aeabi_dmul>
 80058ec:	4604      	mov	r4, r0
 80058ee:	460d      	mov	r5, r1
 80058f0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80058f4:	9416      	str	r4, [sp, #88]	; 0x58
 80058f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80058f8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80058fc:	e7a2      	b.n	8005844 <_strtod_l+0x97c>
 80058fe:	f1b8 0f01 	cmp.w	r8, #1
 8005902:	d103      	bne.n	800590c <_strtod_l+0xa44>
 8005904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005906:	2b00      	cmp	r3, #0
 8005908:	f43f ad92 	beq.w	8005430 <_strtod_l+0x568>
 800590c:	2600      	movs	r6, #0
 800590e:	2400      	movs	r4, #0
 8005910:	4f32      	ldr	r7, [pc, #200]	; (80059dc <_strtod_l+0xb14>)
 8005912:	e796      	b.n	8005842 <_strtod_l+0x97a>
 8005914:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005916:	4d30      	ldr	r5, [pc, #192]	; (80059d8 <_strtod_l+0xb10>)
 8005918:	e7ea      	b.n	80058f0 <_strtod_l+0xa28>
 800591a:	4b2f      	ldr	r3, [pc, #188]	; (80059d8 <_strtod_l+0xb10>)
 800591c:	2200      	movs	r2, #0
 800591e:	4630      	mov	r0, r6
 8005920:	4639      	mov	r1, r7
 8005922:	f7fa fdd9 	bl	80004d8 <__aeabi_dmul>
 8005926:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005928:	4604      	mov	r4, r0
 800592a:	460d      	mov	r5, r1
 800592c:	b933      	cbnz	r3, 800593c <_strtod_l+0xa74>
 800592e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005932:	9010      	str	r0, [sp, #64]	; 0x40
 8005934:	9311      	str	r3, [sp, #68]	; 0x44
 8005936:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800593a:	e783      	b.n	8005844 <_strtod_l+0x97c>
 800593c:	4602      	mov	r2, r0
 800593e:	460b      	mov	r3, r1
 8005940:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005944:	e7f7      	b.n	8005936 <_strtod_l+0xa6e>
 8005946:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800594a:	9b05      	ldr	r3, [sp, #20]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1a8      	bne.n	80058a2 <_strtod_l+0x9da>
 8005950:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005954:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005956:	0d1b      	lsrs	r3, r3, #20
 8005958:	051b      	lsls	r3, r3, #20
 800595a:	429a      	cmp	r2, r3
 800595c:	d1a1      	bne.n	80058a2 <_strtod_l+0x9da>
 800595e:	4620      	mov	r0, r4
 8005960:	4629      	mov	r1, r5
 8005962:	f7fb fc11 	bl	8001188 <__aeabi_d2lz>
 8005966:	f7fa fd89 	bl	800047c <__aeabi_l2d>
 800596a:	4602      	mov	r2, r0
 800596c:	460b      	mov	r3, r1
 800596e:	4620      	mov	r0, r4
 8005970:	4629      	mov	r1, r5
 8005972:	f7fa fbf9 	bl	8000168 <__aeabi_dsub>
 8005976:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005978:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800597c:	ea43 0308 	orr.w	r3, r3, r8
 8005980:	4313      	orrs	r3, r2
 8005982:	4604      	mov	r4, r0
 8005984:	460d      	mov	r5, r1
 8005986:	d066      	beq.n	8005a56 <_strtod_l+0xb8e>
 8005988:	a309      	add	r3, pc, #36	; (adr r3, 80059b0 <_strtod_l+0xae8>)
 800598a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598e:	f7fb f815 	bl	80009bc <__aeabi_dcmplt>
 8005992:	2800      	cmp	r0, #0
 8005994:	f47f ace2 	bne.w	800535c <_strtod_l+0x494>
 8005998:	a307      	add	r3, pc, #28	; (adr r3, 80059b8 <_strtod_l+0xaf0>)
 800599a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599e:	4620      	mov	r0, r4
 80059a0:	4629      	mov	r1, r5
 80059a2:	f7fb f829 	bl	80009f8 <__aeabi_dcmpgt>
 80059a6:	2800      	cmp	r0, #0
 80059a8:	f43f af7b 	beq.w	80058a2 <_strtod_l+0x9da>
 80059ac:	e4d6      	b.n	800535c <_strtod_l+0x494>
 80059ae:	bf00      	nop
 80059b0:	94a03595 	.word	0x94a03595
 80059b4:	3fdfffff 	.word	0x3fdfffff
 80059b8:	35afe535 	.word	0x35afe535
 80059bc:	3fe00000 	.word	0x3fe00000
 80059c0:	000fffff 	.word	0x000fffff
 80059c4:	7ff00000 	.word	0x7ff00000
 80059c8:	7fefffff 	.word	0x7fefffff
 80059cc:	3ff00000 	.word	0x3ff00000
 80059d0:	7fe00000 	.word	0x7fe00000
 80059d4:	7c9fffff 	.word	0x7c9fffff
 80059d8:	3fe00000 	.word	0x3fe00000
 80059dc:	bff00000 	.word	0xbff00000
 80059e0:	9b05      	ldr	r3, [sp, #20]
 80059e2:	b313      	cbz	r3, 8005a2a <_strtod_l+0xb62>
 80059e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80059ea:	d81e      	bhi.n	8005a2a <_strtod_l+0xb62>
 80059ec:	a326      	add	r3, pc, #152	; (adr r3, 8005a88 <_strtod_l+0xbc0>)
 80059ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f2:	4620      	mov	r0, r4
 80059f4:	4629      	mov	r1, r5
 80059f6:	f7fa ffeb 	bl	80009d0 <__aeabi_dcmple>
 80059fa:	b190      	cbz	r0, 8005a22 <_strtod_l+0xb5a>
 80059fc:	4629      	mov	r1, r5
 80059fe:	4620      	mov	r0, r4
 8005a00:	f7fb f842 	bl	8000a88 <__aeabi_d2uiz>
 8005a04:	2801      	cmp	r0, #1
 8005a06:	bf38      	it	cc
 8005a08:	2001      	movcc	r0, #1
 8005a0a:	f7fa fceb 	bl	80003e4 <__aeabi_ui2d>
 8005a0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a10:	4604      	mov	r4, r0
 8005a12:	460d      	mov	r5, r1
 8005a14:	b9d3      	cbnz	r3, 8005a4c <_strtod_l+0xb84>
 8005a16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a1a:	9012      	str	r0, [sp, #72]	; 0x48
 8005a1c:	9313      	str	r3, [sp, #76]	; 0x4c
 8005a1e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005a22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a24:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005a28:	1a9f      	subs	r7, r3, r2
 8005a2a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a2e:	f001 fe41 	bl	80076b4 <__ulp>
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	4630      	mov	r0, r6
 8005a38:	4639      	mov	r1, r7
 8005a3a:	f7fa fd4d 	bl	80004d8 <__aeabi_dmul>
 8005a3e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005a42:	f7fa fb93 	bl	800016c <__adddf3>
 8005a46:	4680      	mov	r8, r0
 8005a48:	4689      	mov	r9, r1
 8005a4a:	e77e      	b.n	800594a <_strtod_l+0xa82>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005a54:	e7e3      	b.n	8005a1e <_strtod_l+0xb56>
 8005a56:	a30e      	add	r3, pc, #56	; (adr r3, 8005a90 <_strtod_l+0xbc8>)
 8005a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5c:	f7fa ffae 	bl	80009bc <__aeabi_dcmplt>
 8005a60:	e7a1      	b.n	80059a6 <_strtod_l+0xade>
 8005a62:	2300      	movs	r3, #0
 8005a64:	930a      	str	r3, [sp, #40]	; 0x28
 8005a66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005a68:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005a6a:	6013      	str	r3, [r2, #0]
 8005a6c:	f7ff ba71 	b.w	8004f52 <_strtod_l+0x8a>
 8005a70:	2a65      	cmp	r2, #101	; 0x65
 8005a72:	f43f ab63 	beq.w	800513c <_strtod_l+0x274>
 8005a76:	2a45      	cmp	r2, #69	; 0x45
 8005a78:	f43f ab60 	beq.w	800513c <_strtod_l+0x274>
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	f7ff bb95 	b.w	80051ac <_strtod_l+0x2e4>
 8005a82:	bf00      	nop
 8005a84:	f3af 8000 	nop.w
 8005a88:	ffc00000 	.word	0xffc00000
 8005a8c:	41dfffff 	.word	0x41dfffff
 8005a90:	94a03595 	.word	0x94a03595
 8005a94:	3fcfffff 	.word	0x3fcfffff

08005a98 <_strtod_r>:
 8005a98:	4b01      	ldr	r3, [pc, #4]	; (8005aa0 <_strtod_r+0x8>)
 8005a9a:	f7ff ba15 	b.w	8004ec8 <_strtod_l>
 8005a9e:	bf00      	nop
 8005aa0:	200000e4 	.word	0x200000e4

08005aa4 <_strtol_l.constprop.0>:
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aaa:	4680      	mov	r8, r0
 8005aac:	d001      	beq.n	8005ab2 <_strtol_l.constprop.0+0xe>
 8005aae:	2b24      	cmp	r3, #36	; 0x24
 8005ab0:	d906      	bls.n	8005ac0 <_strtol_l.constprop.0+0x1c>
 8005ab2:	f7fe fb21 	bl	80040f8 <__errno>
 8005ab6:	2316      	movs	r3, #22
 8005ab8:	6003      	str	r3, [r0, #0]
 8005aba:	2000      	movs	r0, #0
 8005abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac0:	460d      	mov	r5, r1
 8005ac2:	4f35      	ldr	r7, [pc, #212]	; (8005b98 <_strtol_l.constprop.0+0xf4>)
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005aca:	5de6      	ldrb	r6, [r4, r7]
 8005acc:	f016 0608 	ands.w	r6, r6, #8
 8005ad0:	d1f8      	bne.n	8005ac4 <_strtol_l.constprop.0+0x20>
 8005ad2:	2c2d      	cmp	r4, #45	; 0x2d
 8005ad4:	d12f      	bne.n	8005b36 <_strtol_l.constprop.0+0x92>
 8005ad6:	2601      	movs	r6, #1
 8005ad8:	782c      	ldrb	r4, [r5, #0]
 8005ada:	1c85      	adds	r5, r0, #2
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d057      	beq.n	8005b90 <_strtol_l.constprop.0+0xec>
 8005ae0:	2b10      	cmp	r3, #16
 8005ae2:	d109      	bne.n	8005af8 <_strtol_l.constprop.0+0x54>
 8005ae4:	2c30      	cmp	r4, #48	; 0x30
 8005ae6:	d107      	bne.n	8005af8 <_strtol_l.constprop.0+0x54>
 8005ae8:	7828      	ldrb	r0, [r5, #0]
 8005aea:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005aee:	2858      	cmp	r0, #88	; 0x58
 8005af0:	d149      	bne.n	8005b86 <_strtol_l.constprop.0+0xe2>
 8005af2:	2310      	movs	r3, #16
 8005af4:	786c      	ldrb	r4, [r5, #1]
 8005af6:	3502      	adds	r5, #2
 8005af8:	2700      	movs	r7, #0
 8005afa:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8005afe:	f10e 3eff 	add.w	lr, lr, #4294967295
 8005b02:	fbbe f9f3 	udiv	r9, lr, r3
 8005b06:	4638      	mov	r0, r7
 8005b08:	fb03 ea19 	mls	sl, r3, r9, lr
 8005b0c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005b10:	f1bc 0f09 	cmp.w	ip, #9
 8005b14:	d814      	bhi.n	8005b40 <_strtol_l.constprop.0+0x9c>
 8005b16:	4664      	mov	r4, ip
 8005b18:	42a3      	cmp	r3, r4
 8005b1a:	dd22      	ble.n	8005b62 <_strtol_l.constprop.0+0xbe>
 8005b1c:	2f00      	cmp	r7, #0
 8005b1e:	db1d      	blt.n	8005b5c <_strtol_l.constprop.0+0xb8>
 8005b20:	4581      	cmp	r9, r0
 8005b22:	d31b      	bcc.n	8005b5c <_strtol_l.constprop.0+0xb8>
 8005b24:	d101      	bne.n	8005b2a <_strtol_l.constprop.0+0x86>
 8005b26:	45a2      	cmp	sl, r4
 8005b28:	db18      	blt.n	8005b5c <_strtol_l.constprop.0+0xb8>
 8005b2a:	2701      	movs	r7, #1
 8005b2c:	fb00 4003 	mla	r0, r0, r3, r4
 8005b30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b34:	e7ea      	b.n	8005b0c <_strtol_l.constprop.0+0x68>
 8005b36:	2c2b      	cmp	r4, #43	; 0x2b
 8005b38:	bf04      	itt	eq
 8005b3a:	782c      	ldrbeq	r4, [r5, #0]
 8005b3c:	1c85      	addeq	r5, r0, #2
 8005b3e:	e7cd      	b.n	8005adc <_strtol_l.constprop.0+0x38>
 8005b40:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005b44:	f1bc 0f19 	cmp.w	ip, #25
 8005b48:	d801      	bhi.n	8005b4e <_strtol_l.constprop.0+0xaa>
 8005b4a:	3c37      	subs	r4, #55	; 0x37
 8005b4c:	e7e4      	b.n	8005b18 <_strtol_l.constprop.0+0x74>
 8005b4e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005b52:	f1bc 0f19 	cmp.w	ip, #25
 8005b56:	d804      	bhi.n	8005b62 <_strtol_l.constprop.0+0xbe>
 8005b58:	3c57      	subs	r4, #87	; 0x57
 8005b5a:	e7dd      	b.n	8005b18 <_strtol_l.constprop.0+0x74>
 8005b5c:	f04f 37ff 	mov.w	r7, #4294967295
 8005b60:	e7e6      	b.n	8005b30 <_strtol_l.constprop.0+0x8c>
 8005b62:	2f00      	cmp	r7, #0
 8005b64:	da07      	bge.n	8005b76 <_strtol_l.constprop.0+0xd2>
 8005b66:	2322      	movs	r3, #34	; 0x22
 8005b68:	4670      	mov	r0, lr
 8005b6a:	f8c8 3000 	str.w	r3, [r8]
 8005b6e:	2a00      	cmp	r2, #0
 8005b70:	d0a4      	beq.n	8005abc <_strtol_l.constprop.0+0x18>
 8005b72:	1e69      	subs	r1, r5, #1
 8005b74:	e005      	b.n	8005b82 <_strtol_l.constprop.0+0xde>
 8005b76:	b106      	cbz	r6, 8005b7a <_strtol_l.constprop.0+0xd6>
 8005b78:	4240      	negs	r0, r0
 8005b7a:	2a00      	cmp	r2, #0
 8005b7c:	d09e      	beq.n	8005abc <_strtol_l.constprop.0+0x18>
 8005b7e:	2f00      	cmp	r7, #0
 8005b80:	d1f7      	bne.n	8005b72 <_strtol_l.constprop.0+0xce>
 8005b82:	6011      	str	r1, [r2, #0]
 8005b84:	e79a      	b.n	8005abc <_strtol_l.constprop.0+0x18>
 8005b86:	2430      	movs	r4, #48	; 0x30
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1b5      	bne.n	8005af8 <_strtol_l.constprop.0+0x54>
 8005b8c:	2308      	movs	r3, #8
 8005b8e:	e7b3      	b.n	8005af8 <_strtol_l.constprop.0+0x54>
 8005b90:	2c30      	cmp	r4, #48	; 0x30
 8005b92:	d0a9      	beq.n	8005ae8 <_strtol_l.constprop.0+0x44>
 8005b94:	230a      	movs	r3, #10
 8005b96:	e7af      	b.n	8005af8 <_strtol_l.constprop.0+0x54>
 8005b98:	080093a9 	.word	0x080093a9

08005b9c <_strtol_r>:
 8005b9c:	f7ff bf82 	b.w	8005aa4 <_strtol_l.constprop.0>

08005ba0 <quorem>:
 8005ba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ba4:	6903      	ldr	r3, [r0, #16]
 8005ba6:	690c      	ldr	r4, [r1, #16]
 8005ba8:	4607      	mov	r7, r0
 8005baa:	42a3      	cmp	r3, r4
 8005bac:	f2c0 8082 	blt.w	8005cb4 <quorem+0x114>
 8005bb0:	3c01      	subs	r4, #1
 8005bb2:	f100 0514 	add.w	r5, r0, #20
 8005bb6:	f101 0814 	add.w	r8, r1, #20
 8005bba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bbe:	9301      	str	r3, [sp, #4]
 8005bc0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005bc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	fbb2 f6f3 	udiv	r6, r2, r3
 8005bd0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005bd4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005bd8:	d331      	bcc.n	8005c3e <quorem+0x9e>
 8005bda:	f04f 0e00 	mov.w	lr, #0
 8005bde:	4640      	mov	r0, r8
 8005be0:	46ac      	mov	ip, r5
 8005be2:	46f2      	mov	sl, lr
 8005be4:	f850 2b04 	ldr.w	r2, [r0], #4
 8005be8:	b293      	uxth	r3, r2
 8005bea:	fb06 e303 	mla	r3, r6, r3, lr
 8005bee:	0c12      	lsrs	r2, r2, #16
 8005bf0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	fb06 e202 	mla	r2, r6, r2, lr
 8005bfa:	ebaa 0303 	sub.w	r3, sl, r3
 8005bfe:	f8dc a000 	ldr.w	sl, [ip]
 8005c02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c06:	fa1f fa8a 	uxth.w	sl, sl
 8005c0a:	4453      	add	r3, sl
 8005c0c:	f8dc a000 	ldr.w	sl, [ip]
 8005c10:	b292      	uxth	r2, r2
 8005c12:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005c16:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c20:	4581      	cmp	r9, r0
 8005c22:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005c26:	f84c 3b04 	str.w	r3, [ip], #4
 8005c2a:	d2db      	bcs.n	8005be4 <quorem+0x44>
 8005c2c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005c30:	b92b      	cbnz	r3, 8005c3e <quorem+0x9e>
 8005c32:	9b01      	ldr	r3, [sp, #4]
 8005c34:	3b04      	subs	r3, #4
 8005c36:	429d      	cmp	r5, r3
 8005c38:	461a      	mov	r2, r3
 8005c3a:	d32f      	bcc.n	8005c9c <quorem+0xfc>
 8005c3c:	613c      	str	r4, [r7, #16]
 8005c3e:	4638      	mov	r0, r7
 8005c40:	f001 fc90 	bl	8007564 <__mcmp>
 8005c44:	2800      	cmp	r0, #0
 8005c46:	db25      	blt.n	8005c94 <quorem+0xf4>
 8005c48:	4628      	mov	r0, r5
 8005c4a:	f04f 0c00 	mov.w	ip, #0
 8005c4e:	3601      	adds	r6, #1
 8005c50:	f858 1b04 	ldr.w	r1, [r8], #4
 8005c54:	f8d0 e000 	ldr.w	lr, [r0]
 8005c58:	b28b      	uxth	r3, r1
 8005c5a:	ebac 0303 	sub.w	r3, ip, r3
 8005c5e:	fa1f f28e 	uxth.w	r2, lr
 8005c62:	4413      	add	r3, r2
 8005c64:	0c0a      	lsrs	r2, r1, #16
 8005c66:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005c6a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c74:	45c1      	cmp	r9, r8
 8005c76:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005c7a:	f840 3b04 	str.w	r3, [r0], #4
 8005c7e:	d2e7      	bcs.n	8005c50 <quorem+0xb0>
 8005c80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c88:	b922      	cbnz	r2, 8005c94 <quorem+0xf4>
 8005c8a:	3b04      	subs	r3, #4
 8005c8c:	429d      	cmp	r5, r3
 8005c8e:	461a      	mov	r2, r3
 8005c90:	d30a      	bcc.n	8005ca8 <quorem+0x108>
 8005c92:	613c      	str	r4, [r7, #16]
 8005c94:	4630      	mov	r0, r6
 8005c96:	b003      	add	sp, #12
 8005c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c9c:	6812      	ldr	r2, [r2, #0]
 8005c9e:	3b04      	subs	r3, #4
 8005ca0:	2a00      	cmp	r2, #0
 8005ca2:	d1cb      	bne.n	8005c3c <quorem+0x9c>
 8005ca4:	3c01      	subs	r4, #1
 8005ca6:	e7c6      	b.n	8005c36 <quorem+0x96>
 8005ca8:	6812      	ldr	r2, [r2, #0]
 8005caa:	3b04      	subs	r3, #4
 8005cac:	2a00      	cmp	r2, #0
 8005cae:	d1f0      	bne.n	8005c92 <quorem+0xf2>
 8005cb0:	3c01      	subs	r4, #1
 8005cb2:	e7eb      	b.n	8005c8c <quorem+0xec>
 8005cb4:	2000      	movs	r0, #0
 8005cb6:	e7ee      	b.n	8005c96 <quorem+0xf6>

08005cb8 <_dtoa_r>:
 8005cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cbc:	4616      	mov	r6, r2
 8005cbe:	461f      	mov	r7, r3
 8005cc0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005cc2:	b099      	sub	sp, #100	; 0x64
 8005cc4:	4605      	mov	r5, r0
 8005cc6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005cca:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005cce:	b974      	cbnz	r4, 8005cee <_dtoa_r+0x36>
 8005cd0:	2010      	movs	r0, #16
 8005cd2:	f001 f949 	bl	8006f68 <malloc>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	6268      	str	r0, [r5, #36]	; 0x24
 8005cda:	b920      	cbnz	r0, 8005ce6 <_dtoa_r+0x2e>
 8005cdc:	21ea      	movs	r1, #234	; 0xea
 8005cde:	4ba8      	ldr	r3, [pc, #672]	; (8005f80 <_dtoa_r+0x2c8>)
 8005ce0:	48a8      	ldr	r0, [pc, #672]	; (8005f84 <_dtoa_r+0x2cc>)
 8005ce2:	f002 f8b3 	bl	8007e4c <__assert_func>
 8005ce6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005cea:	6004      	str	r4, [r0, #0]
 8005cec:	60c4      	str	r4, [r0, #12]
 8005cee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005cf0:	6819      	ldr	r1, [r3, #0]
 8005cf2:	b151      	cbz	r1, 8005d0a <_dtoa_r+0x52>
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	4093      	lsls	r3, r2
 8005cfa:	604a      	str	r2, [r1, #4]
 8005cfc:	608b      	str	r3, [r1, #8]
 8005cfe:	4628      	mov	r0, r5
 8005d00:	f001 f9a8 	bl	8007054 <_Bfree>
 8005d04:	2200      	movs	r2, #0
 8005d06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	1e3b      	subs	r3, r7, #0
 8005d0c:	bfaf      	iteee	ge
 8005d0e:	2300      	movge	r3, #0
 8005d10:	2201      	movlt	r2, #1
 8005d12:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005d16:	9305      	strlt	r3, [sp, #20]
 8005d18:	bfa8      	it	ge
 8005d1a:	f8c8 3000 	strge.w	r3, [r8]
 8005d1e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005d22:	4b99      	ldr	r3, [pc, #612]	; (8005f88 <_dtoa_r+0x2d0>)
 8005d24:	bfb8      	it	lt
 8005d26:	f8c8 2000 	strlt.w	r2, [r8]
 8005d2a:	ea33 0309 	bics.w	r3, r3, r9
 8005d2e:	d119      	bne.n	8005d64 <_dtoa_r+0xac>
 8005d30:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d34:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005d36:	6013      	str	r3, [r2, #0]
 8005d38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005d3c:	4333      	orrs	r3, r6
 8005d3e:	f000 857f 	beq.w	8006840 <_dtoa_r+0xb88>
 8005d42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005d44:	b953      	cbnz	r3, 8005d5c <_dtoa_r+0xa4>
 8005d46:	4b91      	ldr	r3, [pc, #580]	; (8005f8c <_dtoa_r+0x2d4>)
 8005d48:	e022      	b.n	8005d90 <_dtoa_r+0xd8>
 8005d4a:	4b91      	ldr	r3, [pc, #580]	; (8005f90 <_dtoa_r+0x2d8>)
 8005d4c:	9303      	str	r3, [sp, #12]
 8005d4e:	3308      	adds	r3, #8
 8005d50:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005d52:	6013      	str	r3, [r2, #0]
 8005d54:	9803      	ldr	r0, [sp, #12]
 8005d56:	b019      	add	sp, #100	; 0x64
 8005d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d5c:	4b8b      	ldr	r3, [pc, #556]	; (8005f8c <_dtoa_r+0x2d4>)
 8005d5e:	9303      	str	r3, [sp, #12]
 8005d60:	3303      	adds	r3, #3
 8005d62:	e7f5      	b.n	8005d50 <_dtoa_r+0x98>
 8005d64:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005d68:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005d6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d70:	2200      	movs	r2, #0
 8005d72:	2300      	movs	r3, #0
 8005d74:	f7fa fe18 	bl	80009a8 <__aeabi_dcmpeq>
 8005d78:	4680      	mov	r8, r0
 8005d7a:	b158      	cbz	r0, 8005d94 <_dtoa_r+0xdc>
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005d80:	6013      	str	r3, [r2, #0]
 8005d82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 8558 	beq.w	800683a <_dtoa_r+0xb82>
 8005d8a:	4882      	ldr	r0, [pc, #520]	; (8005f94 <_dtoa_r+0x2dc>)
 8005d8c:	6018      	str	r0, [r3, #0]
 8005d8e:	1e43      	subs	r3, r0, #1
 8005d90:	9303      	str	r3, [sp, #12]
 8005d92:	e7df      	b.n	8005d54 <_dtoa_r+0x9c>
 8005d94:	ab16      	add	r3, sp, #88	; 0x58
 8005d96:	9301      	str	r3, [sp, #4]
 8005d98:	ab17      	add	r3, sp, #92	; 0x5c
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	4628      	mov	r0, r5
 8005d9e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005da2:	f001 fd01 	bl	80077a8 <__d2b>
 8005da6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005daa:	4683      	mov	fp, r0
 8005dac:	2c00      	cmp	r4, #0
 8005dae:	d07f      	beq.n	8005eb0 <_dtoa_r+0x1f8>
 8005db0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005db4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005db6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005dba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005dbe:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005dc2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005dc6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005dca:	2200      	movs	r2, #0
 8005dcc:	4b72      	ldr	r3, [pc, #456]	; (8005f98 <_dtoa_r+0x2e0>)
 8005dce:	f7fa f9cb 	bl	8000168 <__aeabi_dsub>
 8005dd2:	a365      	add	r3, pc, #404	; (adr r3, 8005f68 <_dtoa_r+0x2b0>)
 8005dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd8:	f7fa fb7e 	bl	80004d8 <__aeabi_dmul>
 8005ddc:	a364      	add	r3, pc, #400	; (adr r3, 8005f70 <_dtoa_r+0x2b8>)
 8005dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de2:	f7fa f9c3 	bl	800016c <__adddf3>
 8005de6:	4606      	mov	r6, r0
 8005de8:	4620      	mov	r0, r4
 8005dea:	460f      	mov	r7, r1
 8005dec:	f7fa fb0a 	bl	8000404 <__aeabi_i2d>
 8005df0:	a361      	add	r3, pc, #388	; (adr r3, 8005f78 <_dtoa_r+0x2c0>)
 8005df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df6:	f7fa fb6f 	bl	80004d8 <__aeabi_dmul>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	4630      	mov	r0, r6
 8005e00:	4639      	mov	r1, r7
 8005e02:	f7fa f9b3 	bl	800016c <__adddf3>
 8005e06:	4606      	mov	r6, r0
 8005e08:	460f      	mov	r7, r1
 8005e0a:	f7fa fe15 	bl	8000a38 <__aeabi_d2iz>
 8005e0e:	2200      	movs	r2, #0
 8005e10:	4682      	mov	sl, r0
 8005e12:	2300      	movs	r3, #0
 8005e14:	4630      	mov	r0, r6
 8005e16:	4639      	mov	r1, r7
 8005e18:	f7fa fdd0 	bl	80009bc <__aeabi_dcmplt>
 8005e1c:	b148      	cbz	r0, 8005e32 <_dtoa_r+0x17a>
 8005e1e:	4650      	mov	r0, sl
 8005e20:	f7fa faf0 	bl	8000404 <__aeabi_i2d>
 8005e24:	4632      	mov	r2, r6
 8005e26:	463b      	mov	r3, r7
 8005e28:	f7fa fdbe 	bl	80009a8 <__aeabi_dcmpeq>
 8005e2c:	b908      	cbnz	r0, 8005e32 <_dtoa_r+0x17a>
 8005e2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e32:	f1ba 0f16 	cmp.w	sl, #22
 8005e36:	d858      	bhi.n	8005eea <_dtoa_r+0x232>
 8005e38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e3c:	4b57      	ldr	r3, [pc, #348]	; (8005f9c <_dtoa_r+0x2e4>)
 8005e3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e46:	f7fa fdb9 	bl	80009bc <__aeabi_dcmplt>
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	d04f      	beq.n	8005eee <_dtoa_r+0x236>
 8005e4e:	2300      	movs	r3, #0
 8005e50:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e54:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e56:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005e58:	1b1c      	subs	r4, r3, r4
 8005e5a:	1e63      	subs	r3, r4, #1
 8005e5c:	9309      	str	r3, [sp, #36]	; 0x24
 8005e5e:	bf49      	itett	mi
 8005e60:	f1c4 0301 	rsbmi	r3, r4, #1
 8005e64:	2300      	movpl	r3, #0
 8005e66:	9306      	strmi	r3, [sp, #24]
 8005e68:	2300      	movmi	r3, #0
 8005e6a:	bf54      	ite	pl
 8005e6c:	9306      	strpl	r3, [sp, #24]
 8005e6e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005e70:	f1ba 0f00 	cmp.w	sl, #0
 8005e74:	db3d      	blt.n	8005ef2 <_dtoa_r+0x23a>
 8005e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e78:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005e7c:	4453      	add	r3, sl
 8005e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e80:	2300      	movs	r3, #0
 8005e82:	930a      	str	r3, [sp, #40]	; 0x28
 8005e84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e86:	2b09      	cmp	r3, #9
 8005e88:	f200 808c 	bhi.w	8005fa4 <_dtoa_r+0x2ec>
 8005e8c:	2b05      	cmp	r3, #5
 8005e8e:	bfc4      	itt	gt
 8005e90:	3b04      	subgt	r3, #4
 8005e92:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005e94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e96:	bfc8      	it	gt
 8005e98:	2400      	movgt	r4, #0
 8005e9a:	f1a3 0302 	sub.w	r3, r3, #2
 8005e9e:	bfd8      	it	le
 8005ea0:	2401      	movle	r4, #1
 8005ea2:	2b03      	cmp	r3, #3
 8005ea4:	f200 808a 	bhi.w	8005fbc <_dtoa_r+0x304>
 8005ea8:	e8df f003 	tbb	[pc, r3]
 8005eac:	5b4d4f2d 	.word	0x5b4d4f2d
 8005eb0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005eb4:	441c      	add	r4, r3
 8005eb6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005eba:	2b20      	cmp	r3, #32
 8005ebc:	bfc3      	ittte	gt
 8005ebe:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005ec2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005ec6:	fa09 f303 	lslgt.w	r3, r9, r3
 8005eca:	f1c3 0320 	rsble	r3, r3, #32
 8005ece:	bfc6      	itte	gt
 8005ed0:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005ed4:	4318      	orrgt	r0, r3
 8005ed6:	fa06 f003 	lslle.w	r0, r6, r3
 8005eda:	f7fa fa83 	bl	80003e4 <__aeabi_ui2d>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005ee4:	3c01      	subs	r4, #1
 8005ee6:	9313      	str	r3, [sp, #76]	; 0x4c
 8005ee8:	e76f      	b.n	8005dca <_dtoa_r+0x112>
 8005eea:	2301      	movs	r3, #1
 8005eec:	e7b2      	b.n	8005e54 <_dtoa_r+0x19c>
 8005eee:	900f      	str	r0, [sp, #60]	; 0x3c
 8005ef0:	e7b1      	b.n	8005e56 <_dtoa_r+0x19e>
 8005ef2:	9b06      	ldr	r3, [sp, #24]
 8005ef4:	eba3 030a 	sub.w	r3, r3, sl
 8005ef8:	9306      	str	r3, [sp, #24]
 8005efa:	f1ca 0300 	rsb	r3, sl, #0
 8005efe:	930a      	str	r3, [sp, #40]	; 0x28
 8005f00:	2300      	movs	r3, #0
 8005f02:	930e      	str	r3, [sp, #56]	; 0x38
 8005f04:	e7be      	b.n	8005e84 <_dtoa_r+0x1cc>
 8005f06:	2300      	movs	r3, #0
 8005f08:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	dc58      	bgt.n	8005fc2 <_dtoa_r+0x30a>
 8005f10:	f04f 0901 	mov.w	r9, #1
 8005f14:	464b      	mov	r3, r9
 8005f16:	f8cd 9020 	str.w	r9, [sp, #32]
 8005f1a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005f1e:	2200      	movs	r2, #0
 8005f20:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005f22:	6042      	str	r2, [r0, #4]
 8005f24:	2204      	movs	r2, #4
 8005f26:	f102 0614 	add.w	r6, r2, #20
 8005f2a:	429e      	cmp	r6, r3
 8005f2c:	6841      	ldr	r1, [r0, #4]
 8005f2e:	d94e      	bls.n	8005fce <_dtoa_r+0x316>
 8005f30:	4628      	mov	r0, r5
 8005f32:	f001 f84f 	bl	8006fd4 <_Balloc>
 8005f36:	9003      	str	r0, [sp, #12]
 8005f38:	2800      	cmp	r0, #0
 8005f3a:	d14c      	bne.n	8005fd6 <_dtoa_r+0x31e>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005f42:	4b17      	ldr	r3, [pc, #92]	; (8005fa0 <_dtoa_r+0x2e8>)
 8005f44:	e6cc      	b.n	8005ce0 <_dtoa_r+0x28>
 8005f46:	2301      	movs	r3, #1
 8005f48:	e7de      	b.n	8005f08 <_dtoa_r+0x250>
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f4e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f50:	eb0a 0903 	add.w	r9, sl, r3
 8005f54:	f109 0301 	add.w	r3, r9, #1
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	9308      	str	r3, [sp, #32]
 8005f5c:	bfb8      	it	lt
 8005f5e:	2301      	movlt	r3, #1
 8005f60:	e7dd      	b.n	8005f1e <_dtoa_r+0x266>
 8005f62:	2301      	movs	r3, #1
 8005f64:	e7f2      	b.n	8005f4c <_dtoa_r+0x294>
 8005f66:	bf00      	nop
 8005f68:	636f4361 	.word	0x636f4361
 8005f6c:	3fd287a7 	.word	0x3fd287a7
 8005f70:	8b60c8b3 	.word	0x8b60c8b3
 8005f74:	3fc68a28 	.word	0x3fc68a28
 8005f78:	509f79fb 	.word	0x509f79fb
 8005f7c:	3fd34413 	.word	0x3fd34413
 8005f80:	080094b6 	.word	0x080094b6
 8005f84:	080094cd 	.word	0x080094cd
 8005f88:	7ff00000 	.word	0x7ff00000
 8005f8c:	080094b2 	.word	0x080094b2
 8005f90:	080094a9 	.word	0x080094a9
 8005f94:	08009329 	.word	0x08009329
 8005f98:	3ff80000 	.word	0x3ff80000
 8005f9c:	08009638 	.word	0x08009638
 8005fa0:	08009528 	.word	0x08009528
 8005fa4:	2401      	movs	r4, #1
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	940b      	str	r4, [sp, #44]	; 0x2c
 8005faa:	9322      	str	r3, [sp, #136]	; 0x88
 8005fac:	f04f 39ff 	mov.w	r9, #4294967295
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	2312      	movs	r3, #18
 8005fb4:	f8cd 9020 	str.w	r9, [sp, #32]
 8005fb8:	9223      	str	r2, [sp, #140]	; 0x8c
 8005fba:	e7b0      	b.n	8005f1e <_dtoa_r+0x266>
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fc0:	e7f4      	b.n	8005fac <_dtoa_r+0x2f4>
 8005fc2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005fc6:	464b      	mov	r3, r9
 8005fc8:	f8cd 9020 	str.w	r9, [sp, #32]
 8005fcc:	e7a7      	b.n	8005f1e <_dtoa_r+0x266>
 8005fce:	3101      	adds	r1, #1
 8005fd0:	6041      	str	r1, [r0, #4]
 8005fd2:	0052      	lsls	r2, r2, #1
 8005fd4:	e7a7      	b.n	8005f26 <_dtoa_r+0x26e>
 8005fd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005fd8:	9a03      	ldr	r2, [sp, #12]
 8005fda:	601a      	str	r2, [r3, #0]
 8005fdc:	9b08      	ldr	r3, [sp, #32]
 8005fde:	2b0e      	cmp	r3, #14
 8005fe0:	f200 80a8 	bhi.w	8006134 <_dtoa_r+0x47c>
 8005fe4:	2c00      	cmp	r4, #0
 8005fe6:	f000 80a5 	beq.w	8006134 <_dtoa_r+0x47c>
 8005fea:	f1ba 0f00 	cmp.w	sl, #0
 8005fee:	dd34      	ble.n	800605a <_dtoa_r+0x3a2>
 8005ff0:	4a9a      	ldr	r2, [pc, #616]	; (800625c <_dtoa_r+0x5a4>)
 8005ff2:	f00a 030f 	and.w	r3, sl, #15
 8005ff6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005ffa:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005ffe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006002:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006006:	ea4f 142a 	mov.w	r4, sl, asr #4
 800600a:	d016      	beq.n	800603a <_dtoa_r+0x382>
 800600c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006010:	4b93      	ldr	r3, [pc, #588]	; (8006260 <_dtoa_r+0x5a8>)
 8006012:	2703      	movs	r7, #3
 8006014:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006018:	f7fa fb88 	bl	800072c <__aeabi_ddiv>
 800601c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006020:	f004 040f 	and.w	r4, r4, #15
 8006024:	4e8e      	ldr	r6, [pc, #568]	; (8006260 <_dtoa_r+0x5a8>)
 8006026:	b954      	cbnz	r4, 800603e <_dtoa_r+0x386>
 8006028:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800602c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006030:	f7fa fb7c 	bl	800072c <__aeabi_ddiv>
 8006034:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006038:	e029      	b.n	800608e <_dtoa_r+0x3d6>
 800603a:	2702      	movs	r7, #2
 800603c:	e7f2      	b.n	8006024 <_dtoa_r+0x36c>
 800603e:	07e1      	lsls	r1, r4, #31
 8006040:	d508      	bpl.n	8006054 <_dtoa_r+0x39c>
 8006042:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006046:	e9d6 2300 	ldrd	r2, r3, [r6]
 800604a:	f7fa fa45 	bl	80004d8 <__aeabi_dmul>
 800604e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006052:	3701      	adds	r7, #1
 8006054:	1064      	asrs	r4, r4, #1
 8006056:	3608      	adds	r6, #8
 8006058:	e7e5      	b.n	8006026 <_dtoa_r+0x36e>
 800605a:	f000 80a5 	beq.w	80061a8 <_dtoa_r+0x4f0>
 800605e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006062:	f1ca 0400 	rsb	r4, sl, #0
 8006066:	4b7d      	ldr	r3, [pc, #500]	; (800625c <_dtoa_r+0x5a4>)
 8006068:	f004 020f 	and.w	r2, r4, #15
 800606c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006074:	f7fa fa30 	bl	80004d8 <__aeabi_dmul>
 8006078:	2702      	movs	r7, #2
 800607a:	2300      	movs	r3, #0
 800607c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006080:	4e77      	ldr	r6, [pc, #476]	; (8006260 <_dtoa_r+0x5a8>)
 8006082:	1124      	asrs	r4, r4, #4
 8006084:	2c00      	cmp	r4, #0
 8006086:	f040 8084 	bne.w	8006192 <_dtoa_r+0x4da>
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1d2      	bne.n	8006034 <_dtoa_r+0x37c>
 800608e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 808b 	beq.w	80061ac <_dtoa_r+0x4f4>
 8006096:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800609a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800609e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80060a2:	2200      	movs	r2, #0
 80060a4:	4b6f      	ldr	r3, [pc, #444]	; (8006264 <_dtoa_r+0x5ac>)
 80060a6:	f7fa fc89 	bl	80009bc <__aeabi_dcmplt>
 80060aa:	2800      	cmp	r0, #0
 80060ac:	d07e      	beq.n	80061ac <_dtoa_r+0x4f4>
 80060ae:	9b08      	ldr	r3, [sp, #32]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d07b      	beq.n	80061ac <_dtoa_r+0x4f4>
 80060b4:	f1b9 0f00 	cmp.w	r9, #0
 80060b8:	dd38      	ble.n	800612c <_dtoa_r+0x474>
 80060ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80060be:	2200      	movs	r2, #0
 80060c0:	4b69      	ldr	r3, [pc, #420]	; (8006268 <_dtoa_r+0x5b0>)
 80060c2:	f7fa fa09 	bl	80004d8 <__aeabi_dmul>
 80060c6:	464c      	mov	r4, r9
 80060c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060cc:	f10a 38ff 	add.w	r8, sl, #4294967295
 80060d0:	3701      	adds	r7, #1
 80060d2:	4638      	mov	r0, r7
 80060d4:	f7fa f996 	bl	8000404 <__aeabi_i2d>
 80060d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060dc:	f7fa f9fc 	bl	80004d8 <__aeabi_dmul>
 80060e0:	2200      	movs	r2, #0
 80060e2:	4b62      	ldr	r3, [pc, #392]	; (800626c <_dtoa_r+0x5b4>)
 80060e4:	f7fa f842 	bl	800016c <__adddf3>
 80060e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80060ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80060f0:	9611      	str	r6, [sp, #68]	; 0x44
 80060f2:	2c00      	cmp	r4, #0
 80060f4:	d15d      	bne.n	80061b2 <_dtoa_r+0x4fa>
 80060f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060fa:	2200      	movs	r2, #0
 80060fc:	4b5c      	ldr	r3, [pc, #368]	; (8006270 <_dtoa_r+0x5b8>)
 80060fe:	f7fa f833 	bl	8000168 <__aeabi_dsub>
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800610a:	4633      	mov	r3, r6
 800610c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800610e:	f7fa fc73 	bl	80009f8 <__aeabi_dcmpgt>
 8006112:	2800      	cmp	r0, #0
 8006114:	f040 829c 	bne.w	8006650 <_dtoa_r+0x998>
 8006118:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800611c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800611e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006122:	f7fa fc4b 	bl	80009bc <__aeabi_dcmplt>
 8006126:	2800      	cmp	r0, #0
 8006128:	f040 8290 	bne.w	800664c <_dtoa_r+0x994>
 800612c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006130:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006134:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006136:	2b00      	cmp	r3, #0
 8006138:	f2c0 8152 	blt.w	80063e0 <_dtoa_r+0x728>
 800613c:	f1ba 0f0e 	cmp.w	sl, #14
 8006140:	f300 814e 	bgt.w	80063e0 <_dtoa_r+0x728>
 8006144:	4b45      	ldr	r3, [pc, #276]	; (800625c <_dtoa_r+0x5a4>)
 8006146:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800614a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800614e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006152:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006154:	2b00      	cmp	r3, #0
 8006156:	f280 80db 	bge.w	8006310 <_dtoa_r+0x658>
 800615a:	9b08      	ldr	r3, [sp, #32]
 800615c:	2b00      	cmp	r3, #0
 800615e:	f300 80d7 	bgt.w	8006310 <_dtoa_r+0x658>
 8006162:	f040 8272 	bne.w	800664a <_dtoa_r+0x992>
 8006166:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800616a:	2200      	movs	r2, #0
 800616c:	4b40      	ldr	r3, [pc, #256]	; (8006270 <_dtoa_r+0x5b8>)
 800616e:	f7fa f9b3 	bl	80004d8 <__aeabi_dmul>
 8006172:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006176:	f7fa fc35 	bl	80009e4 <__aeabi_dcmpge>
 800617a:	9c08      	ldr	r4, [sp, #32]
 800617c:	4626      	mov	r6, r4
 800617e:	2800      	cmp	r0, #0
 8006180:	f040 8248 	bne.w	8006614 <_dtoa_r+0x95c>
 8006184:	2331      	movs	r3, #49	; 0x31
 8006186:	9f03      	ldr	r7, [sp, #12]
 8006188:	f10a 0a01 	add.w	sl, sl, #1
 800618c:	f807 3b01 	strb.w	r3, [r7], #1
 8006190:	e244      	b.n	800661c <_dtoa_r+0x964>
 8006192:	07e2      	lsls	r2, r4, #31
 8006194:	d505      	bpl.n	80061a2 <_dtoa_r+0x4ea>
 8006196:	e9d6 2300 	ldrd	r2, r3, [r6]
 800619a:	f7fa f99d 	bl	80004d8 <__aeabi_dmul>
 800619e:	2301      	movs	r3, #1
 80061a0:	3701      	adds	r7, #1
 80061a2:	1064      	asrs	r4, r4, #1
 80061a4:	3608      	adds	r6, #8
 80061a6:	e76d      	b.n	8006084 <_dtoa_r+0x3cc>
 80061a8:	2702      	movs	r7, #2
 80061aa:	e770      	b.n	800608e <_dtoa_r+0x3d6>
 80061ac:	46d0      	mov	r8, sl
 80061ae:	9c08      	ldr	r4, [sp, #32]
 80061b0:	e78f      	b.n	80060d2 <_dtoa_r+0x41a>
 80061b2:	9903      	ldr	r1, [sp, #12]
 80061b4:	4b29      	ldr	r3, [pc, #164]	; (800625c <_dtoa_r+0x5a4>)
 80061b6:	4421      	add	r1, r4
 80061b8:	9112      	str	r1, [sp, #72]	; 0x48
 80061ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80061c0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80061c4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80061c8:	2900      	cmp	r1, #0
 80061ca:	d055      	beq.n	8006278 <_dtoa_r+0x5c0>
 80061cc:	2000      	movs	r0, #0
 80061ce:	4929      	ldr	r1, [pc, #164]	; (8006274 <_dtoa_r+0x5bc>)
 80061d0:	f7fa faac 	bl	800072c <__aeabi_ddiv>
 80061d4:	463b      	mov	r3, r7
 80061d6:	4632      	mov	r2, r6
 80061d8:	f7f9 ffc6 	bl	8000168 <__aeabi_dsub>
 80061dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80061e0:	9f03      	ldr	r7, [sp, #12]
 80061e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061e6:	f7fa fc27 	bl	8000a38 <__aeabi_d2iz>
 80061ea:	4604      	mov	r4, r0
 80061ec:	f7fa f90a 	bl	8000404 <__aeabi_i2d>
 80061f0:	4602      	mov	r2, r0
 80061f2:	460b      	mov	r3, r1
 80061f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061f8:	f7f9 ffb6 	bl	8000168 <__aeabi_dsub>
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	3430      	adds	r4, #48	; 0x30
 8006202:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006206:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800620a:	f807 4b01 	strb.w	r4, [r7], #1
 800620e:	f7fa fbd5 	bl	80009bc <__aeabi_dcmplt>
 8006212:	2800      	cmp	r0, #0
 8006214:	d174      	bne.n	8006300 <_dtoa_r+0x648>
 8006216:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800621a:	2000      	movs	r0, #0
 800621c:	4911      	ldr	r1, [pc, #68]	; (8006264 <_dtoa_r+0x5ac>)
 800621e:	f7f9 ffa3 	bl	8000168 <__aeabi_dsub>
 8006222:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006226:	f7fa fbc9 	bl	80009bc <__aeabi_dcmplt>
 800622a:	2800      	cmp	r0, #0
 800622c:	f040 80b7 	bne.w	800639e <_dtoa_r+0x6e6>
 8006230:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006232:	429f      	cmp	r7, r3
 8006234:	f43f af7a 	beq.w	800612c <_dtoa_r+0x474>
 8006238:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800623c:	2200      	movs	r2, #0
 800623e:	4b0a      	ldr	r3, [pc, #40]	; (8006268 <_dtoa_r+0x5b0>)
 8006240:	f7fa f94a 	bl	80004d8 <__aeabi_dmul>
 8006244:	2200      	movs	r2, #0
 8006246:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800624a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800624e:	4b06      	ldr	r3, [pc, #24]	; (8006268 <_dtoa_r+0x5b0>)
 8006250:	f7fa f942 	bl	80004d8 <__aeabi_dmul>
 8006254:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006258:	e7c3      	b.n	80061e2 <_dtoa_r+0x52a>
 800625a:	bf00      	nop
 800625c:	08009638 	.word	0x08009638
 8006260:	08009610 	.word	0x08009610
 8006264:	3ff00000 	.word	0x3ff00000
 8006268:	40240000 	.word	0x40240000
 800626c:	401c0000 	.word	0x401c0000
 8006270:	40140000 	.word	0x40140000
 8006274:	3fe00000 	.word	0x3fe00000
 8006278:	4630      	mov	r0, r6
 800627a:	4639      	mov	r1, r7
 800627c:	f7fa f92c 	bl	80004d8 <__aeabi_dmul>
 8006280:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006282:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006286:	9c03      	ldr	r4, [sp, #12]
 8006288:	9314      	str	r3, [sp, #80]	; 0x50
 800628a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800628e:	f7fa fbd3 	bl	8000a38 <__aeabi_d2iz>
 8006292:	9015      	str	r0, [sp, #84]	; 0x54
 8006294:	f7fa f8b6 	bl	8000404 <__aeabi_i2d>
 8006298:	4602      	mov	r2, r0
 800629a:	460b      	mov	r3, r1
 800629c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062a0:	f7f9 ff62 	bl	8000168 <__aeabi_dsub>
 80062a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80062a6:	4606      	mov	r6, r0
 80062a8:	3330      	adds	r3, #48	; 0x30
 80062aa:	f804 3b01 	strb.w	r3, [r4], #1
 80062ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062b0:	460f      	mov	r7, r1
 80062b2:	429c      	cmp	r4, r3
 80062b4:	f04f 0200 	mov.w	r2, #0
 80062b8:	d124      	bne.n	8006304 <_dtoa_r+0x64c>
 80062ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80062be:	4bb0      	ldr	r3, [pc, #704]	; (8006580 <_dtoa_r+0x8c8>)
 80062c0:	f7f9 ff54 	bl	800016c <__adddf3>
 80062c4:	4602      	mov	r2, r0
 80062c6:	460b      	mov	r3, r1
 80062c8:	4630      	mov	r0, r6
 80062ca:	4639      	mov	r1, r7
 80062cc:	f7fa fb94 	bl	80009f8 <__aeabi_dcmpgt>
 80062d0:	2800      	cmp	r0, #0
 80062d2:	d163      	bne.n	800639c <_dtoa_r+0x6e4>
 80062d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80062d8:	2000      	movs	r0, #0
 80062da:	49a9      	ldr	r1, [pc, #676]	; (8006580 <_dtoa_r+0x8c8>)
 80062dc:	f7f9 ff44 	bl	8000168 <__aeabi_dsub>
 80062e0:	4602      	mov	r2, r0
 80062e2:	460b      	mov	r3, r1
 80062e4:	4630      	mov	r0, r6
 80062e6:	4639      	mov	r1, r7
 80062e8:	f7fa fb68 	bl	80009bc <__aeabi_dcmplt>
 80062ec:	2800      	cmp	r0, #0
 80062ee:	f43f af1d 	beq.w	800612c <_dtoa_r+0x474>
 80062f2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80062f4:	1e7b      	subs	r3, r7, #1
 80062f6:	9314      	str	r3, [sp, #80]	; 0x50
 80062f8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80062fc:	2b30      	cmp	r3, #48	; 0x30
 80062fe:	d0f8      	beq.n	80062f2 <_dtoa_r+0x63a>
 8006300:	46c2      	mov	sl, r8
 8006302:	e03b      	b.n	800637c <_dtoa_r+0x6c4>
 8006304:	4b9f      	ldr	r3, [pc, #636]	; (8006584 <_dtoa_r+0x8cc>)
 8006306:	f7fa f8e7 	bl	80004d8 <__aeabi_dmul>
 800630a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800630e:	e7bc      	b.n	800628a <_dtoa_r+0x5d2>
 8006310:	9f03      	ldr	r7, [sp, #12]
 8006312:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006316:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800631a:	4640      	mov	r0, r8
 800631c:	4649      	mov	r1, r9
 800631e:	f7fa fa05 	bl	800072c <__aeabi_ddiv>
 8006322:	f7fa fb89 	bl	8000a38 <__aeabi_d2iz>
 8006326:	4604      	mov	r4, r0
 8006328:	f7fa f86c 	bl	8000404 <__aeabi_i2d>
 800632c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006330:	f7fa f8d2 	bl	80004d8 <__aeabi_dmul>
 8006334:	4602      	mov	r2, r0
 8006336:	460b      	mov	r3, r1
 8006338:	4640      	mov	r0, r8
 800633a:	4649      	mov	r1, r9
 800633c:	f7f9 ff14 	bl	8000168 <__aeabi_dsub>
 8006340:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006344:	f807 6b01 	strb.w	r6, [r7], #1
 8006348:	9e03      	ldr	r6, [sp, #12]
 800634a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800634e:	1bbe      	subs	r6, r7, r6
 8006350:	45b4      	cmp	ip, r6
 8006352:	4602      	mov	r2, r0
 8006354:	460b      	mov	r3, r1
 8006356:	d136      	bne.n	80063c6 <_dtoa_r+0x70e>
 8006358:	f7f9 ff08 	bl	800016c <__adddf3>
 800635c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006360:	4680      	mov	r8, r0
 8006362:	4689      	mov	r9, r1
 8006364:	f7fa fb48 	bl	80009f8 <__aeabi_dcmpgt>
 8006368:	bb58      	cbnz	r0, 80063c2 <_dtoa_r+0x70a>
 800636a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800636e:	4640      	mov	r0, r8
 8006370:	4649      	mov	r1, r9
 8006372:	f7fa fb19 	bl	80009a8 <__aeabi_dcmpeq>
 8006376:	b108      	cbz	r0, 800637c <_dtoa_r+0x6c4>
 8006378:	07e1      	lsls	r1, r4, #31
 800637a:	d422      	bmi.n	80063c2 <_dtoa_r+0x70a>
 800637c:	4628      	mov	r0, r5
 800637e:	4659      	mov	r1, fp
 8006380:	f000 fe68 	bl	8007054 <_Bfree>
 8006384:	2300      	movs	r3, #0
 8006386:	703b      	strb	r3, [r7, #0]
 8006388:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800638a:	f10a 0001 	add.w	r0, sl, #1
 800638e:	6018      	str	r0, [r3, #0]
 8006390:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006392:	2b00      	cmp	r3, #0
 8006394:	f43f acde 	beq.w	8005d54 <_dtoa_r+0x9c>
 8006398:	601f      	str	r7, [r3, #0]
 800639a:	e4db      	b.n	8005d54 <_dtoa_r+0x9c>
 800639c:	4627      	mov	r7, r4
 800639e:	463b      	mov	r3, r7
 80063a0:	461f      	mov	r7, r3
 80063a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063a6:	2a39      	cmp	r2, #57	; 0x39
 80063a8:	d107      	bne.n	80063ba <_dtoa_r+0x702>
 80063aa:	9a03      	ldr	r2, [sp, #12]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d1f7      	bne.n	80063a0 <_dtoa_r+0x6e8>
 80063b0:	2230      	movs	r2, #48	; 0x30
 80063b2:	9903      	ldr	r1, [sp, #12]
 80063b4:	f108 0801 	add.w	r8, r8, #1
 80063b8:	700a      	strb	r2, [r1, #0]
 80063ba:	781a      	ldrb	r2, [r3, #0]
 80063bc:	3201      	adds	r2, #1
 80063be:	701a      	strb	r2, [r3, #0]
 80063c0:	e79e      	b.n	8006300 <_dtoa_r+0x648>
 80063c2:	46d0      	mov	r8, sl
 80063c4:	e7eb      	b.n	800639e <_dtoa_r+0x6e6>
 80063c6:	2200      	movs	r2, #0
 80063c8:	4b6e      	ldr	r3, [pc, #440]	; (8006584 <_dtoa_r+0x8cc>)
 80063ca:	f7fa f885 	bl	80004d8 <__aeabi_dmul>
 80063ce:	2200      	movs	r2, #0
 80063d0:	2300      	movs	r3, #0
 80063d2:	4680      	mov	r8, r0
 80063d4:	4689      	mov	r9, r1
 80063d6:	f7fa fae7 	bl	80009a8 <__aeabi_dcmpeq>
 80063da:	2800      	cmp	r0, #0
 80063dc:	d09b      	beq.n	8006316 <_dtoa_r+0x65e>
 80063de:	e7cd      	b.n	800637c <_dtoa_r+0x6c4>
 80063e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80063e2:	2a00      	cmp	r2, #0
 80063e4:	f000 80d0 	beq.w	8006588 <_dtoa_r+0x8d0>
 80063e8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80063ea:	2a01      	cmp	r2, #1
 80063ec:	f300 80ae 	bgt.w	800654c <_dtoa_r+0x894>
 80063f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80063f2:	2a00      	cmp	r2, #0
 80063f4:	f000 80a6 	beq.w	8006544 <_dtoa_r+0x88c>
 80063f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80063fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80063fe:	9f06      	ldr	r7, [sp, #24]
 8006400:	9a06      	ldr	r2, [sp, #24]
 8006402:	2101      	movs	r1, #1
 8006404:	441a      	add	r2, r3
 8006406:	9206      	str	r2, [sp, #24]
 8006408:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800640a:	4628      	mov	r0, r5
 800640c:	441a      	add	r2, r3
 800640e:	9209      	str	r2, [sp, #36]	; 0x24
 8006410:	f000 ff20 	bl	8007254 <__i2b>
 8006414:	4606      	mov	r6, r0
 8006416:	2f00      	cmp	r7, #0
 8006418:	dd0c      	ble.n	8006434 <_dtoa_r+0x77c>
 800641a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800641c:	2b00      	cmp	r3, #0
 800641e:	dd09      	ble.n	8006434 <_dtoa_r+0x77c>
 8006420:	42bb      	cmp	r3, r7
 8006422:	bfa8      	it	ge
 8006424:	463b      	movge	r3, r7
 8006426:	9a06      	ldr	r2, [sp, #24]
 8006428:	1aff      	subs	r7, r7, r3
 800642a:	1ad2      	subs	r2, r2, r3
 800642c:	9206      	str	r2, [sp, #24]
 800642e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	9309      	str	r3, [sp, #36]	; 0x24
 8006434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006436:	b1f3      	cbz	r3, 8006476 <_dtoa_r+0x7be>
 8006438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800643a:	2b00      	cmp	r3, #0
 800643c:	f000 80a8 	beq.w	8006590 <_dtoa_r+0x8d8>
 8006440:	2c00      	cmp	r4, #0
 8006442:	dd10      	ble.n	8006466 <_dtoa_r+0x7ae>
 8006444:	4631      	mov	r1, r6
 8006446:	4622      	mov	r2, r4
 8006448:	4628      	mov	r0, r5
 800644a:	f000 ffc1 	bl	80073d0 <__pow5mult>
 800644e:	465a      	mov	r2, fp
 8006450:	4601      	mov	r1, r0
 8006452:	4606      	mov	r6, r0
 8006454:	4628      	mov	r0, r5
 8006456:	f000 ff13 	bl	8007280 <__multiply>
 800645a:	4680      	mov	r8, r0
 800645c:	4659      	mov	r1, fp
 800645e:	4628      	mov	r0, r5
 8006460:	f000 fdf8 	bl	8007054 <_Bfree>
 8006464:	46c3      	mov	fp, r8
 8006466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006468:	1b1a      	subs	r2, r3, r4
 800646a:	d004      	beq.n	8006476 <_dtoa_r+0x7be>
 800646c:	4659      	mov	r1, fp
 800646e:	4628      	mov	r0, r5
 8006470:	f000 ffae 	bl	80073d0 <__pow5mult>
 8006474:	4683      	mov	fp, r0
 8006476:	2101      	movs	r1, #1
 8006478:	4628      	mov	r0, r5
 800647a:	f000 feeb 	bl	8007254 <__i2b>
 800647e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006480:	4604      	mov	r4, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	f340 8086 	ble.w	8006594 <_dtoa_r+0x8dc>
 8006488:	461a      	mov	r2, r3
 800648a:	4601      	mov	r1, r0
 800648c:	4628      	mov	r0, r5
 800648e:	f000 ff9f 	bl	80073d0 <__pow5mult>
 8006492:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006494:	4604      	mov	r4, r0
 8006496:	2b01      	cmp	r3, #1
 8006498:	dd7f      	ble.n	800659a <_dtoa_r+0x8e2>
 800649a:	f04f 0800 	mov.w	r8, #0
 800649e:	6923      	ldr	r3, [r4, #16]
 80064a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80064a4:	6918      	ldr	r0, [r3, #16]
 80064a6:	f000 fe87 	bl	80071b8 <__hi0bits>
 80064aa:	f1c0 0020 	rsb	r0, r0, #32
 80064ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064b0:	4418      	add	r0, r3
 80064b2:	f010 001f 	ands.w	r0, r0, #31
 80064b6:	f000 8092 	beq.w	80065de <_dtoa_r+0x926>
 80064ba:	f1c0 0320 	rsb	r3, r0, #32
 80064be:	2b04      	cmp	r3, #4
 80064c0:	f340 808a 	ble.w	80065d8 <_dtoa_r+0x920>
 80064c4:	f1c0 001c 	rsb	r0, r0, #28
 80064c8:	9b06      	ldr	r3, [sp, #24]
 80064ca:	4407      	add	r7, r0
 80064cc:	4403      	add	r3, r0
 80064ce:	9306      	str	r3, [sp, #24]
 80064d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064d2:	4403      	add	r3, r0
 80064d4:	9309      	str	r3, [sp, #36]	; 0x24
 80064d6:	9b06      	ldr	r3, [sp, #24]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	dd05      	ble.n	80064e8 <_dtoa_r+0x830>
 80064dc:	4659      	mov	r1, fp
 80064de:	461a      	mov	r2, r3
 80064e0:	4628      	mov	r0, r5
 80064e2:	f000 ffcf 	bl	8007484 <__lshift>
 80064e6:	4683      	mov	fp, r0
 80064e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	dd05      	ble.n	80064fa <_dtoa_r+0x842>
 80064ee:	4621      	mov	r1, r4
 80064f0:	461a      	mov	r2, r3
 80064f2:	4628      	mov	r0, r5
 80064f4:	f000 ffc6 	bl	8007484 <__lshift>
 80064f8:	4604      	mov	r4, r0
 80064fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d070      	beq.n	80065e2 <_dtoa_r+0x92a>
 8006500:	4621      	mov	r1, r4
 8006502:	4658      	mov	r0, fp
 8006504:	f001 f82e 	bl	8007564 <__mcmp>
 8006508:	2800      	cmp	r0, #0
 800650a:	da6a      	bge.n	80065e2 <_dtoa_r+0x92a>
 800650c:	2300      	movs	r3, #0
 800650e:	4659      	mov	r1, fp
 8006510:	220a      	movs	r2, #10
 8006512:	4628      	mov	r0, r5
 8006514:	f000 fdc0 	bl	8007098 <__multadd>
 8006518:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800651a:	4683      	mov	fp, r0
 800651c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006520:	2b00      	cmp	r3, #0
 8006522:	f000 8194 	beq.w	800684e <_dtoa_r+0xb96>
 8006526:	4631      	mov	r1, r6
 8006528:	2300      	movs	r3, #0
 800652a:	220a      	movs	r2, #10
 800652c:	4628      	mov	r0, r5
 800652e:	f000 fdb3 	bl	8007098 <__multadd>
 8006532:	f1b9 0f00 	cmp.w	r9, #0
 8006536:	4606      	mov	r6, r0
 8006538:	f300 8093 	bgt.w	8006662 <_dtoa_r+0x9aa>
 800653c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800653e:	2b02      	cmp	r3, #2
 8006540:	dc57      	bgt.n	80065f2 <_dtoa_r+0x93a>
 8006542:	e08e      	b.n	8006662 <_dtoa_r+0x9aa>
 8006544:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006546:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800654a:	e757      	b.n	80063fc <_dtoa_r+0x744>
 800654c:	9b08      	ldr	r3, [sp, #32]
 800654e:	1e5c      	subs	r4, r3, #1
 8006550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006552:	42a3      	cmp	r3, r4
 8006554:	bfb7      	itett	lt
 8006556:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006558:	1b1c      	subge	r4, r3, r4
 800655a:	1ae2      	sublt	r2, r4, r3
 800655c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800655e:	bfbe      	ittt	lt
 8006560:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006562:	189b      	addlt	r3, r3, r2
 8006564:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006566:	9b08      	ldr	r3, [sp, #32]
 8006568:	bfb8      	it	lt
 800656a:	2400      	movlt	r4, #0
 800656c:	2b00      	cmp	r3, #0
 800656e:	bfbb      	ittet	lt
 8006570:	9b06      	ldrlt	r3, [sp, #24]
 8006572:	9a08      	ldrlt	r2, [sp, #32]
 8006574:	9f06      	ldrge	r7, [sp, #24]
 8006576:	1a9f      	sublt	r7, r3, r2
 8006578:	bfac      	ite	ge
 800657a:	9b08      	ldrge	r3, [sp, #32]
 800657c:	2300      	movlt	r3, #0
 800657e:	e73f      	b.n	8006400 <_dtoa_r+0x748>
 8006580:	3fe00000 	.word	0x3fe00000
 8006584:	40240000 	.word	0x40240000
 8006588:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800658a:	9f06      	ldr	r7, [sp, #24]
 800658c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800658e:	e742      	b.n	8006416 <_dtoa_r+0x75e>
 8006590:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006592:	e76b      	b.n	800646c <_dtoa_r+0x7b4>
 8006594:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006596:	2b01      	cmp	r3, #1
 8006598:	dc19      	bgt.n	80065ce <_dtoa_r+0x916>
 800659a:	9b04      	ldr	r3, [sp, #16]
 800659c:	b9bb      	cbnz	r3, 80065ce <_dtoa_r+0x916>
 800659e:	9b05      	ldr	r3, [sp, #20]
 80065a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065a4:	b99b      	cbnz	r3, 80065ce <_dtoa_r+0x916>
 80065a6:	9b05      	ldr	r3, [sp, #20]
 80065a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065ac:	0d1b      	lsrs	r3, r3, #20
 80065ae:	051b      	lsls	r3, r3, #20
 80065b0:	b183      	cbz	r3, 80065d4 <_dtoa_r+0x91c>
 80065b2:	f04f 0801 	mov.w	r8, #1
 80065b6:	9b06      	ldr	r3, [sp, #24]
 80065b8:	3301      	adds	r3, #1
 80065ba:	9306      	str	r3, [sp, #24]
 80065bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065be:	3301      	adds	r3, #1
 80065c0:	9309      	str	r3, [sp, #36]	; 0x24
 80065c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f47f af6a 	bne.w	800649e <_dtoa_r+0x7e6>
 80065ca:	2001      	movs	r0, #1
 80065cc:	e76f      	b.n	80064ae <_dtoa_r+0x7f6>
 80065ce:	f04f 0800 	mov.w	r8, #0
 80065d2:	e7f6      	b.n	80065c2 <_dtoa_r+0x90a>
 80065d4:	4698      	mov	r8, r3
 80065d6:	e7f4      	b.n	80065c2 <_dtoa_r+0x90a>
 80065d8:	f43f af7d 	beq.w	80064d6 <_dtoa_r+0x81e>
 80065dc:	4618      	mov	r0, r3
 80065de:	301c      	adds	r0, #28
 80065e0:	e772      	b.n	80064c8 <_dtoa_r+0x810>
 80065e2:	9b08      	ldr	r3, [sp, #32]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	dc36      	bgt.n	8006656 <_dtoa_r+0x99e>
 80065e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	dd33      	ble.n	8006656 <_dtoa_r+0x99e>
 80065ee:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80065f2:	f1b9 0f00 	cmp.w	r9, #0
 80065f6:	d10d      	bne.n	8006614 <_dtoa_r+0x95c>
 80065f8:	4621      	mov	r1, r4
 80065fa:	464b      	mov	r3, r9
 80065fc:	2205      	movs	r2, #5
 80065fe:	4628      	mov	r0, r5
 8006600:	f000 fd4a 	bl	8007098 <__multadd>
 8006604:	4601      	mov	r1, r0
 8006606:	4604      	mov	r4, r0
 8006608:	4658      	mov	r0, fp
 800660a:	f000 ffab 	bl	8007564 <__mcmp>
 800660e:	2800      	cmp	r0, #0
 8006610:	f73f adb8 	bgt.w	8006184 <_dtoa_r+0x4cc>
 8006614:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006616:	9f03      	ldr	r7, [sp, #12]
 8006618:	ea6f 0a03 	mvn.w	sl, r3
 800661c:	f04f 0800 	mov.w	r8, #0
 8006620:	4621      	mov	r1, r4
 8006622:	4628      	mov	r0, r5
 8006624:	f000 fd16 	bl	8007054 <_Bfree>
 8006628:	2e00      	cmp	r6, #0
 800662a:	f43f aea7 	beq.w	800637c <_dtoa_r+0x6c4>
 800662e:	f1b8 0f00 	cmp.w	r8, #0
 8006632:	d005      	beq.n	8006640 <_dtoa_r+0x988>
 8006634:	45b0      	cmp	r8, r6
 8006636:	d003      	beq.n	8006640 <_dtoa_r+0x988>
 8006638:	4641      	mov	r1, r8
 800663a:	4628      	mov	r0, r5
 800663c:	f000 fd0a 	bl	8007054 <_Bfree>
 8006640:	4631      	mov	r1, r6
 8006642:	4628      	mov	r0, r5
 8006644:	f000 fd06 	bl	8007054 <_Bfree>
 8006648:	e698      	b.n	800637c <_dtoa_r+0x6c4>
 800664a:	2400      	movs	r4, #0
 800664c:	4626      	mov	r6, r4
 800664e:	e7e1      	b.n	8006614 <_dtoa_r+0x95c>
 8006650:	46c2      	mov	sl, r8
 8006652:	4626      	mov	r6, r4
 8006654:	e596      	b.n	8006184 <_dtoa_r+0x4cc>
 8006656:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006658:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 80fd 	beq.w	800685c <_dtoa_r+0xba4>
 8006662:	2f00      	cmp	r7, #0
 8006664:	dd05      	ble.n	8006672 <_dtoa_r+0x9ba>
 8006666:	4631      	mov	r1, r6
 8006668:	463a      	mov	r2, r7
 800666a:	4628      	mov	r0, r5
 800666c:	f000 ff0a 	bl	8007484 <__lshift>
 8006670:	4606      	mov	r6, r0
 8006672:	f1b8 0f00 	cmp.w	r8, #0
 8006676:	d05c      	beq.n	8006732 <_dtoa_r+0xa7a>
 8006678:	4628      	mov	r0, r5
 800667a:	6871      	ldr	r1, [r6, #4]
 800667c:	f000 fcaa 	bl	8006fd4 <_Balloc>
 8006680:	4607      	mov	r7, r0
 8006682:	b928      	cbnz	r0, 8006690 <_dtoa_r+0x9d8>
 8006684:	4602      	mov	r2, r0
 8006686:	f240 21ea 	movw	r1, #746	; 0x2ea
 800668a:	4b7f      	ldr	r3, [pc, #508]	; (8006888 <_dtoa_r+0xbd0>)
 800668c:	f7ff bb28 	b.w	8005ce0 <_dtoa_r+0x28>
 8006690:	6932      	ldr	r2, [r6, #16]
 8006692:	f106 010c 	add.w	r1, r6, #12
 8006696:	3202      	adds	r2, #2
 8006698:	0092      	lsls	r2, r2, #2
 800669a:	300c      	adds	r0, #12
 800669c:	f000 fc8c 	bl	8006fb8 <memcpy>
 80066a0:	2201      	movs	r2, #1
 80066a2:	4639      	mov	r1, r7
 80066a4:	4628      	mov	r0, r5
 80066a6:	f000 feed 	bl	8007484 <__lshift>
 80066aa:	46b0      	mov	r8, r6
 80066ac:	4606      	mov	r6, r0
 80066ae:	9b03      	ldr	r3, [sp, #12]
 80066b0:	3301      	adds	r3, #1
 80066b2:	9308      	str	r3, [sp, #32]
 80066b4:	9b03      	ldr	r3, [sp, #12]
 80066b6:	444b      	add	r3, r9
 80066b8:	930a      	str	r3, [sp, #40]	; 0x28
 80066ba:	9b04      	ldr	r3, [sp, #16]
 80066bc:	f003 0301 	and.w	r3, r3, #1
 80066c0:	9309      	str	r3, [sp, #36]	; 0x24
 80066c2:	9b08      	ldr	r3, [sp, #32]
 80066c4:	4621      	mov	r1, r4
 80066c6:	3b01      	subs	r3, #1
 80066c8:	4658      	mov	r0, fp
 80066ca:	9304      	str	r3, [sp, #16]
 80066cc:	f7ff fa68 	bl	8005ba0 <quorem>
 80066d0:	4603      	mov	r3, r0
 80066d2:	4641      	mov	r1, r8
 80066d4:	3330      	adds	r3, #48	; 0x30
 80066d6:	9006      	str	r0, [sp, #24]
 80066d8:	4658      	mov	r0, fp
 80066da:	930b      	str	r3, [sp, #44]	; 0x2c
 80066dc:	f000 ff42 	bl	8007564 <__mcmp>
 80066e0:	4632      	mov	r2, r6
 80066e2:	4681      	mov	r9, r0
 80066e4:	4621      	mov	r1, r4
 80066e6:	4628      	mov	r0, r5
 80066e8:	f000 ff58 	bl	800759c <__mdiff>
 80066ec:	68c2      	ldr	r2, [r0, #12]
 80066ee:	4607      	mov	r7, r0
 80066f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066f2:	bb02      	cbnz	r2, 8006736 <_dtoa_r+0xa7e>
 80066f4:	4601      	mov	r1, r0
 80066f6:	4658      	mov	r0, fp
 80066f8:	f000 ff34 	bl	8007564 <__mcmp>
 80066fc:	4602      	mov	r2, r0
 80066fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006700:	4639      	mov	r1, r7
 8006702:	4628      	mov	r0, r5
 8006704:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006708:	f000 fca4 	bl	8007054 <_Bfree>
 800670c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800670e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006710:	9f08      	ldr	r7, [sp, #32]
 8006712:	ea43 0102 	orr.w	r1, r3, r2
 8006716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006718:	430b      	orrs	r3, r1
 800671a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800671c:	d10d      	bne.n	800673a <_dtoa_r+0xa82>
 800671e:	2b39      	cmp	r3, #57	; 0x39
 8006720:	d029      	beq.n	8006776 <_dtoa_r+0xabe>
 8006722:	f1b9 0f00 	cmp.w	r9, #0
 8006726:	dd01      	ble.n	800672c <_dtoa_r+0xa74>
 8006728:	9b06      	ldr	r3, [sp, #24]
 800672a:	3331      	adds	r3, #49	; 0x31
 800672c:	9a04      	ldr	r2, [sp, #16]
 800672e:	7013      	strb	r3, [r2, #0]
 8006730:	e776      	b.n	8006620 <_dtoa_r+0x968>
 8006732:	4630      	mov	r0, r6
 8006734:	e7b9      	b.n	80066aa <_dtoa_r+0x9f2>
 8006736:	2201      	movs	r2, #1
 8006738:	e7e2      	b.n	8006700 <_dtoa_r+0xa48>
 800673a:	f1b9 0f00 	cmp.w	r9, #0
 800673e:	db06      	blt.n	800674e <_dtoa_r+0xa96>
 8006740:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006742:	ea41 0909 	orr.w	r9, r1, r9
 8006746:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006748:	ea59 0101 	orrs.w	r1, r9, r1
 800674c:	d120      	bne.n	8006790 <_dtoa_r+0xad8>
 800674e:	2a00      	cmp	r2, #0
 8006750:	ddec      	ble.n	800672c <_dtoa_r+0xa74>
 8006752:	4659      	mov	r1, fp
 8006754:	2201      	movs	r2, #1
 8006756:	4628      	mov	r0, r5
 8006758:	9308      	str	r3, [sp, #32]
 800675a:	f000 fe93 	bl	8007484 <__lshift>
 800675e:	4621      	mov	r1, r4
 8006760:	4683      	mov	fp, r0
 8006762:	f000 feff 	bl	8007564 <__mcmp>
 8006766:	2800      	cmp	r0, #0
 8006768:	9b08      	ldr	r3, [sp, #32]
 800676a:	dc02      	bgt.n	8006772 <_dtoa_r+0xaba>
 800676c:	d1de      	bne.n	800672c <_dtoa_r+0xa74>
 800676e:	07da      	lsls	r2, r3, #31
 8006770:	d5dc      	bpl.n	800672c <_dtoa_r+0xa74>
 8006772:	2b39      	cmp	r3, #57	; 0x39
 8006774:	d1d8      	bne.n	8006728 <_dtoa_r+0xa70>
 8006776:	2339      	movs	r3, #57	; 0x39
 8006778:	9a04      	ldr	r2, [sp, #16]
 800677a:	7013      	strb	r3, [r2, #0]
 800677c:	463b      	mov	r3, r7
 800677e:	461f      	mov	r7, r3
 8006780:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006784:	3b01      	subs	r3, #1
 8006786:	2a39      	cmp	r2, #57	; 0x39
 8006788:	d050      	beq.n	800682c <_dtoa_r+0xb74>
 800678a:	3201      	adds	r2, #1
 800678c:	701a      	strb	r2, [r3, #0]
 800678e:	e747      	b.n	8006620 <_dtoa_r+0x968>
 8006790:	2a00      	cmp	r2, #0
 8006792:	dd03      	ble.n	800679c <_dtoa_r+0xae4>
 8006794:	2b39      	cmp	r3, #57	; 0x39
 8006796:	d0ee      	beq.n	8006776 <_dtoa_r+0xabe>
 8006798:	3301      	adds	r3, #1
 800679a:	e7c7      	b.n	800672c <_dtoa_r+0xa74>
 800679c:	9a08      	ldr	r2, [sp, #32]
 800679e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80067a0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80067a4:	428a      	cmp	r2, r1
 80067a6:	d02a      	beq.n	80067fe <_dtoa_r+0xb46>
 80067a8:	4659      	mov	r1, fp
 80067aa:	2300      	movs	r3, #0
 80067ac:	220a      	movs	r2, #10
 80067ae:	4628      	mov	r0, r5
 80067b0:	f000 fc72 	bl	8007098 <__multadd>
 80067b4:	45b0      	cmp	r8, r6
 80067b6:	4683      	mov	fp, r0
 80067b8:	f04f 0300 	mov.w	r3, #0
 80067bc:	f04f 020a 	mov.w	r2, #10
 80067c0:	4641      	mov	r1, r8
 80067c2:	4628      	mov	r0, r5
 80067c4:	d107      	bne.n	80067d6 <_dtoa_r+0xb1e>
 80067c6:	f000 fc67 	bl	8007098 <__multadd>
 80067ca:	4680      	mov	r8, r0
 80067cc:	4606      	mov	r6, r0
 80067ce:	9b08      	ldr	r3, [sp, #32]
 80067d0:	3301      	adds	r3, #1
 80067d2:	9308      	str	r3, [sp, #32]
 80067d4:	e775      	b.n	80066c2 <_dtoa_r+0xa0a>
 80067d6:	f000 fc5f 	bl	8007098 <__multadd>
 80067da:	4631      	mov	r1, r6
 80067dc:	4680      	mov	r8, r0
 80067de:	2300      	movs	r3, #0
 80067e0:	220a      	movs	r2, #10
 80067e2:	4628      	mov	r0, r5
 80067e4:	f000 fc58 	bl	8007098 <__multadd>
 80067e8:	4606      	mov	r6, r0
 80067ea:	e7f0      	b.n	80067ce <_dtoa_r+0xb16>
 80067ec:	f1b9 0f00 	cmp.w	r9, #0
 80067f0:	bfcc      	ite	gt
 80067f2:	464f      	movgt	r7, r9
 80067f4:	2701      	movle	r7, #1
 80067f6:	f04f 0800 	mov.w	r8, #0
 80067fa:	9a03      	ldr	r2, [sp, #12]
 80067fc:	4417      	add	r7, r2
 80067fe:	4659      	mov	r1, fp
 8006800:	2201      	movs	r2, #1
 8006802:	4628      	mov	r0, r5
 8006804:	9308      	str	r3, [sp, #32]
 8006806:	f000 fe3d 	bl	8007484 <__lshift>
 800680a:	4621      	mov	r1, r4
 800680c:	4683      	mov	fp, r0
 800680e:	f000 fea9 	bl	8007564 <__mcmp>
 8006812:	2800      	cmp	r0, #0
 8006814:	dcb2      	bgt.n	800677c <_dtoa_r+0xac4>
 8006816:	d102      	bne.n	800681e <_dtoa_r+0xb66>
 8006818:	9b08      	ldr	r3, [sp, #32]
 800681a:	07db      	lsls	r3, r3, #31
 800681c:	d4ae      	bmi.n	800677c <_dtoa_r+0xac4>
 800681e:	463b      	mov	r3, r7
 8006820:	461f      	mov	r7, r3
 8006822:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006826:	2a30      	cmp	r2, #48	; 0x30
 8006828:	d0fa      	beq.n	8006820 <_dtoa_r+0xb68>
 800682a:	e6f9      	b.n	8006620 <_dtoa_r+0x968>
 800682c:	9a03      	ldr	r2, [sp, #12]
 800682e:	429a      	cmp	r2, r3
 8006830:	d1a5      	bne.n	800677e <_dtoa_r+0xac6>
 8006832:	2331      	movs	r3, #49	; 0x31
 8006834:	f10a 0a01 	add.w	sl, sl, #1
 8006838:	e779      	b.n	800672e <_dtoa_r+0xa76>
 800683a:	4b14      	ldr	r3, [pc, #80]	; (800688c <_dtoa_r+0xbd4>)
 800683c:	f7ff baa8 	b.w	8005d90 <_dtoa_r+0xd8>
 8006840:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006842:	2b00      	cmp	r3, #0
 8006844:	f47f aa81 	bne.w	8005d4a <_dtoa_r+0x92>
 8006848:	4b11      	ldr	r3, [pc, #68]	; (8006890 <_dtoa_r+0xbd8>)
 800684a:	f7ff baa1 	b.w	8005d90 <_dtoa_r+0xd8>
 800684e:	f1b9 0f00 	cmp.w	r9, #0
 8006852:	dc03      	bgt.n	800685c <_dtoa_r+0xba4>
 8006854:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006856:	2b02      	cmp	r3, #2
 8006858:	f73f aecb 	bgt.w	80065f2 <_dtoa_r+0x93a>
 800685c:	9f03      	ldr	r7, [sp, #12]
 800685e:	4621      	mov	r1, r4
 8006860:	4658      	mov	r0, fp
 8006862:	f7ff f99d 	bl	8005ba0 <quorem>
 8006866:	9a03      	ldr	r2, [sp, #12]
 8006868:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800686c:	f807 3b01 	strb.w	r3, [r7], #1
 8006870:	1aba      	subs	r2, r7, r2
 8006872:	4591      	cmp	r9, r2
 8006874:	ddba      	ble.n	80067ec <_dtoa_r+0xb34>
 8006876:	4659      	mov	r1, fp
 8006878:	2300      	movs	r3, #0
 800687a:	220a      	movs	r2, #10
 800687c:	4628      	mov	r0, r5
 800687e:	f000 fc0b 	bl	8007098 <__multadd>
 8006882:	4683      	mov	fp, r0
 8006884:	e7eb      	b.n	800685e <_dtoa_r+0xba6>
 8006886:	bf00      	nop
 8006888:	08009528 	.word	0x08009528
 800688c:	08009328 	.word	0x08009328
 8006890:	080094a9 	.word	0x080094a9

08006894 <rshift>:
 8006894:	6903      	ldr	r3, [r0, #16]
 8006896:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800689a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800689e:	f100 0414 	add.w	r4, r0, #20
 80068a2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80068a6:	dd46      	ble.n	8006936 <rshift+0xa2>
 80068a8:	f011 011f 	ands.w	r1, r1, #31
 80068ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80068b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80068b4:	d10c      	bne.n	80068d0 <rshift+0x3c>
 80068b6:	4629      	mov	r1, r5
 80068b8:	f100 0710 	add.w	r7, r0, #16
 80068bc:	42b1      	cmp	r1, r6
 80068be:	d335      	bcc.n	800692c <rshift+0x98>
 80068c0:	1a9b      	subs	r3, r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	1eea      	subs	r2, r5, #3
 80068c6:	4296      	cmp	r6, r2
 80068c8:	bf38      	it	cc
 80068ca:	2300      	movcc	r3, #0
 80068cc:	4423      	add	r3, r4
 80068ce:	e015      	b.n	80068fc <rshift+0x68>
 80068d0:	46a1      	mov	r9, r4
 80068d2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80068d6:	f1c1 0820 	rsb	r8, r1, #32
 80068da:	40cf      	lsrs	r7, r1
 80068dc:	f105 0e04 	add.w	lr, r5, #4
 80068e0:	4576      	cmp	r6, lr
 80068e2:	46f4      	mov	ip, lr
 80068e4:	d816      	bhi.n	8006914 <rshift+0x80>
 80068e6:	1a9a      	subs	r2, r3, r2
 80068e8:	0092      	lsls	r2, r2, #2
 80068ea:	3a04      	subs	r2, #4
 80068ec:	3501      	adds	r5, #1
 80068ee:	42ae      	cmp	r6, r5
 80068f0:	bf38      	it	cc
 80068f2:	2200      	movcc	r2, #0
 80068f4:	18a3      	adds	r3, r4, r2
 80068f6:	50a7      	str	r7, [r4, r2]
 80068f8:	b107      	cbz	r7, 80068fc <rshift+0x68>
 80068fa:	3304      	adds	r3, #4
 80068fc:	42a3      	cmp	r3, r4
 80068fe:	eba3 0204 	sub.w	r2, r3, r4
 8006902:	bf08      	it	eq
 8006904:	2300      	moveq	r3, #0
 8006906:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800690a:	6102      	str	r2, [r0, #16]
 800690c:	bf08      	it	eq
 800690e:	6143      	streq	r3, [r0, #20]
 8006910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006914:	f8dc c000 	ldr.w	ip, [ip]
 8006918:	fa0c fc08 	lsl.w	ip, ip, r8
 800691c:	ea4c 0707 	orr.w	r7, ip, r7
 8006920:	f849 7b04 	str.w	r7, [r9], #4
 8006924:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006928:	40cf      	lsrs	r7, r1
 800692a:	e7d9      	b.n	80068e0 <rshift+0x4c>
 800692c:	f851 cb04 	ldr.w	ip, [r1], #4
 8006930:	f847 cf04 	str.w	ip, [r7, #4]!
 8006934:	e7c2      	b.n	80068bc <rshift+0x28>
 8006936:	4623      	mov	r3, r4
 8006938:	e7e0      	b.n	80068fc <rshift+0x68>

0800693a <__hexdig_fun>:
 800693a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800693e:	2b09      	cmp	r3, #9
 8006940:	d802      	bhi.n	8006948 <__hexdig_fun+0xe>
 8006942:	3820      	subs	r0, #32
 8006944:	b2c0      	uxtb	r0, r0
 8006946:	4770      	bx	lr
 8006948:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800694c:	2b05      	cmp	r3, #5
 800694e:	d801      	bhi.n	8006954 <__hexdig_fun+0x1a>
 8006950:	3847      	subs	r0, #71	; 0x47
 8006952:	e7f7      	b.n	8006944 <__hexdig_fun+0xa>
 8006954:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006958:	2b05      	cmp	r3, #5
 800695a:	d801      	bhi.n	8006960 <__hexdig_fun+0x26>
 800695c:	3827      	subs	r0, #39	; 0x27
 800695e:	e7f1      	b.n	8006944 <__hexdig_fun+0xa>
 8006960:	2000      	movs	r0, #0
 8006962:	4770      	bx	lr

08006964 <__gethex>:
 8006964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006968:	b08b      	sub	sp, #44	; 0x2c
 800696a:	9305      	str	r3, [sp, #20]
 800696c:	4bb2      	ldr	r3, [pc, #712]	; (8006c38 <__gethex+0x2d4>)
 800696e:	9002      	str	r0, [sp, #8]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	468b      	mov	fp, r1
 8006974:	4618      	mov	r0, r3
 8006976:	4690      	mov	r8, r2
 8006978:	9303      	str	r3, [sp, #12]
 800697a:	f7f9 fbe9 	bl	8000150 <strlen>
 800697e:	4682      	mov	sl, r0
 8006980:	9b03      	ldr	r3, [sp, #12]
 8006982:	f8db 2000 	ldr.w	r2, [fp]
 8006986:	4403      	add	r3, r0
 8006988:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800698c:	9306      	str	r3, [sp, #24]
 800698e:	1c93      	adds	r3, r2, #2
 8006990:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006994:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006998:	32fe      	adds	r2, #254	; 0xfe
 800699a:	18d1      	adds	r1, r2, r3
 800699c:	461f      	mov	r7, r3
 800699e:	f813 0b01 	ldrb.w	r0, [r3], #1
 80069a2:	9101      	str	r1, [sp, #4]
 80069a4:	2830      	cmp	r0, #48	; 0x30
 80069a6:	d0f8      	beq.n	800699a <__gethex+0x36>
 80069a8:	f7ff ffc7 	bl	800693a <__hexdig_fun>
 80069ac:	4604      	mov	r4, r0
 80069ae:	2800      	cmp	r0, #0
 80069b0:	d13a      	bne.n	8006a28 <__gethex+0xc4>
 80069b2:	4652      	mov	r2, sl
 80069b4:	4638      	mov	r0, r7
 80069b6:	9903      	ldr	r1, [sp, #12]
 80069b8:	f001 fa26 	bl	8007e08 <strncmp>
 80069bc:	4605      	mov	r5, r0
 80069be:	2800      	cmp	r0, #0
 80069c0:	d166      	bne.n	8006a90 <__gethex+0x12c>
 80069c2:	f817 000a 	ldrb.w	r0, [r7, sl]
 80069c6:	eb07 060a 	add.w	r6, r7, sl
 80069ca:	f7ff ffb6 	bl	800693a <__hexdig_fun>
 80069ce:	2800      	cmp	r0, #0
 80069d0:	d060      	beq.n	8006a94 <__gethex+0x130>
 80069d2:	4633      	mov	r3, r6
 80069d4:	7818      	ldrb	r0, [r3, #0]
 80069d6:	461f      	mov	r7, r3
 80069d8:	2830      	cmp	r0, #48	; 0x30
 80069da:	f103 0301 	add.w	r3, r3, #1
 80069de:	d0f9      	beq.n	80069d4 <__gethex+0x70>
 80069e0:	f7ff ffab 	bl	800693a <__hexdig_fun>
 80069e4:	2301      	movs	r3, #1
 80069e6:	fab0 f480 	clz	r4, r0
 80069ea:	4635      	mov	r5, r6
 80069ec:	0964      	lsrs	r4, r4, #5
 80069ee:	9301      	str	r3, [sp, #4]
 80069f0:	463a      	mov	r2, r7
 80069f2:	4616      	mov	r6, r2
 80069f4:	7830      	ldrb	r0, [r6, #0]
 80069f6:	3201      	adds	r2, #1
 80069f8:	f7ff ff9f 	bl	800693a <__hexdig_fun>
 80069fc:	2800      	cmp	r0, #0
 80069fe:	d1f8      	bne.n	80069f2 <__gethex+0x8e>
 8006a00:	4652      	mov	r2, sl
 8006a02:	4630      	mov	r0, r6
 8006a04:	9903      	ldr	r1, [sp, #12]
 8006a06:	f001 f9ff 	bl	8007e08 <strncmp>
 8006a0a:	b980      	cbnz	r0, 8006a2e <__gethex+0xca>
 8006a0c:	b94d      	cbnz	r5, 8006a22 <__gethex+0xbe>
 8006a0e:	eb06 050a 	add.w	r5, r6, sl
 8006a12:	462a      	mov	r2, r5
 8006a14:	4616      	mov	r6, r2
 8006a16:	7830      	ldrb	r0, [r6, #0]
 8006a18:	3201      	adds	r2, #1
 8006a1a:	f7ff ff8e 	bl	800693a <__hexdig_fun>
 8006a1e:	2800      	cmp	r0, #0
 8006a20:	d1f8      	bne.n	8006a14 <__gethex+0xb0>
 8006a22:	1bad      	subs	r5, r5, r6
 8006a24:	00ad      	lsls	r5, r5, #2
 8006a26:	e004      	b.n	8006a32 <__gethex+0xce>
 8006a28:	2400      	movs	r4, #0
 8006a2a:	4625      	mov	r5, r4
 8006a2c:	e7e0      	b.n	80069f0 <__gethex+0x8c>
 8006a2e:	2d00      	cmp	r5, #0
 8006a30:	d1f7      	bne.n	8006a22 <__gethex+0xbe>
 8006a32:	7833      	ldrb	r3, [r6, #0]
 8006a34:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006a38:	2b50      	cmp	r3, #80	; 0x50
 8006a3a:	d139      	bne.n	8006ab0 <__gethex+0x14c>
 8006a3c:	7873      	ldrb	r3, [r6, #1]
 8006a3e:	2b2b      	cmp	r3, #43	; 0x2b
 8006a40:	d02a      	beq.n	8006a98 <__gethex+0x134>
 8006a42:	2b2d      	cmp	r3, #45	; 0x2d
 8006a44:	d02c      	beq.n	8006aa0 <__gethex+0x13c>
 8006a46:	f04f 0900 	mov.w	r9, #0
 8006a4a:	1c71      	adds	r1, r6, #1
 8006a4c:	7808      	ldrb	r0, [r1, #0]
 8006a4e:	f7ff ff74 	bl	800693a <__hexdig_fun>
 8006a52:	1e43      	subs	r3, r0, #1
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b18      	cmp	r3, #24
 8006a58:	d82a      	bhi.n	8006ab0 <__gethex+0x14c>
 8006a5a:	f1a0 0210 	sub.w	r2, r0, #16
 8006a5e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006a62:	f7ff ff6a 	bl	800693a <__hexdig_fun>
 8006a66:	1e43      	subs	r3, r0, #1
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b18      	cmp	r3, #24
 8006a6c:	d91b      	bls.n	8006aa6 <__gethex+0x142>
 8006a6e:	f1b9 0f00 	cmp.w	r9, #0
 8006a72:	d000      	beq.n	8006a76 <__gethex+0x112>
 8006a74:	4252      	negs	r2, r2
 8006a76:	4415      	add	r5, r2
 8006a78:	f8cb 1000 	str.w	r1, [fp]
 8006a7c:	b1d4      	cbz	r4, 8006ab4 <__gethex+0x150>
 8006a7e:	9b01      	ldr	r3, [sp, #4]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	bf14      	ite	ne
 8006a84:	2700      	movne	r7, #0
 8006a86:	2706      	moveq	r7, #6
 8006a88:	4638      	mov	r0, r7
 8006a8a:	b00b      	add	sp, #44	; 0x2c
 8006a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a90:	463e      	mov	r6, r7
 8006a92:	4625      	mov	r5, r4
 8006a94:	2401      	movs	r4, #1
 8006a96:	e7cc      	b.n	8006a32 <__gethex+0xce>
 8006a98:	f04f 0900 	mov.w	r9, #0
 8006a9c:	1cb1      	adds	r1, r6, #2
 8006a9e:	e7d5      	b.n	8006a4c <__gethex+0xe8>
 8006aa0:	f04f 0901 	mov.w	r9, #1
 8006aa4:	e7fa      	b.n	8006a9c <__gethex+0x138>
 8006aa6:	230a      	movs	r3, #10
 8006aa8:	fb03 0202 	mla	r2, r3, r2, r0
 8006aac:	3a10      	subs	r2, #16
 8006aae:	e7d6      	b.n	8006a5e <__gethex+0xfa>
 8006ab0:	4631      	mov	r1, r6
 8006ab2:	e7e1      	b.n	8006a78 <__gethex+0x114>
 8006ab4:	4621      	mov	r1, r4
 8006ab6:	1bf3      	subs	r3, r6, r7
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	2b07      	cmp	r3, #7
 8006abc:	dc0a      	bgt.n	8006ad4 <__gethex+0x170>
 8006abe:	9802      	ldr	r0, [sp, #8]
 8006ac0:	f000 fa88 	bl	8006fd4 <_Balloc>
 8006ac4:	4604      	mov	r4, r0
 8006ac6:	b940      	cbnz	r0, 8006ada <__gethex+0x176>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	21de      	movs	r1, #222	; 0xde
 8006acc:	4b5b      	ldr	r3, [pc, #364]	; (8006c3c <__gethex+0x2d8>)
 8006ace:	485c      	ldr	r0, [pc, #368]	; (8006c40 <__gethex+0x2dc>)
 8006ad0:	f001 f9bc 	bl	8007e4c <__assert_func>
 8006ad4:	3101      	adds	r1, #1
 8006ad6:	105b      	asrs	r3, r3, #1
 8006ad8:	e7ef      	b.n	8006aba <__gethex+0x156>
 8006ada:	f04f 0b00 	mov.w	fp, #0
 8006ade:	f100 0914 	add.w	r9, r0, #20
 8006ae2:	f1ca 0301 	rsb	r3, sl, #1
 8006ae6:	f8cd 9010 	str.w	r9, [sp, #16]
 8006aea:	f8cd b004 	str.w	fp, [sp, #4]
 8006aee:	9308      	str	r3, [sp, #32]
 8006af0:	42b7      	cmp	r7, r6
 8006af2:	d33f      	bcc.n	8006b74 <__gethex+0x210>
 8006af4:	9f04      	ldr	r7, [sp, #16]
 8006af6:	9b01      	ldr	r3, [sp, #4]
 8006af8:	f847 3b04 	str.w	r3, [r7], #4
 8006afc:	eba7 0709 	sub.w	r7, r7, r9
 8006b00:	10bf      	asrs	r7, r7, #2
 8006b02:	6127      	str	r7, [r4, #16]
 8006b04:	4618      	mov	r0, r3
 8006b06:	f000 fb57 	bl	80071b8 <__hi0bits>
 8006b0a:	017f      	lsls	r7, r7, #5
 8006b0c:	f8d8 6000 	ldr.w	r6, [r8]
 8006b10:	1a3f      	subs	r7, r7, r0
 8006b12:	42b7      	cmp	r7, r6
 8006b14:	dd62      	ble.n	8006bdc <__gethex+0x278>
 8006b16:	1bbf      	subs	r7, r7, r6
 8006b18:	4639      	mov	r1, r7
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	f000 fef1 	bl	8007902 <__any_on>
 8006b20:	4682      	mov	sl, r0
 8006b22:	b1a8      	cbz	r0, 8006b50 <__gethex+0x1ec>
 8006b24:	f04f 0a01 	mov.w	sl, #1
 8006b28:	1e7b      	subs	r3, r7, #1
 8006b2a:	1159      	asrs	r1, r3, #5
 8006b2c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006b30:	f003 021f 	and.w	r2, r3, #31
 8006b34:	fa0a f202 	lsl.w	r2, sl, r2
 8006b38:	420a      	tst	r2, r1
 8006b3a:	d009      	beq.n	8006b50 <__gethex+0x1ec>
 8006b3c:	4553      	cmp	r3, sl
 8006b3e:	dd05      	ble.n	8006b4c <__gethex+0x1e8>
 8006b40:	4620      	mov	r0, r4
 8006b42:	1eb9      	subs	r1, r7, #2
 8006b44:	f000 fedd 	bl	8007902 <__any_on>
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	d144      	bne.n	8006bd6 <__gethex+0x272>
 8006b4c:	f04f 0a02 	mov.w	sl, #2
 8006b50:	4639      	mov	r1, r7
 8006b52:	4620      	mov	r0, r4
 8006b54:	f7ff fe9e 	bl	8006894 <rshift>
 8006b58:	443d      	add	r5, r7
 8006b5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006b5e:	42ab      	cmp	r3, r5
 8006b60:	da4a      	bge.n	8006bf8 <__gethex+0x294>
 8006b62:	4621      	mov	r1, r4
 8006b64:	9802      	ldr	r0, [sp, #8]
 8006b66:	f000 fa75 	bl	8007054 <_Bfree>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006b6e:	27a3      	movs	r7, #163	; 0xa3
 8006b70:	6013      	str	r3, [r2, #0]
 8006b72:	e789      	b.n	8006a88 <__gethex+0x124>
 8006b74:	1e73      	subs	r3, r6, #1
 8006b76:	9a06      	ldr	r2, [sp, #24]
 8006b78:	9307      	str	r3, [sp, #28]
 8006b7a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d019      	beq.n	8006bb6 <__gethex+0x252>
 8006b82:	f1bb 0f20 	cmp.w	fp, #32
 8006b86:	d107      	bne.n	8006b98 <__gethex+0x234>
 8006b88:	9b04      	ldr	r3, [sp, #16]
 8006b8a:	9a01      	ldr	r2, [sp, #4]
 8006b8c:	f843 2b04 	str.w	r2, [r3], #4
 8006b90:	9304      	str	r3, [sp, #16]
 8006b92:	2300      	movs	r3, #0
 8006b94:	469b      	mov	fp, r3
 8006b96:	9301      	str	r3, [sp, #4]
 8006b98:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006b9c:	f7ff fecd 	bl	800693a <__hexdig_fun>
 8006ba0:	9b01      	ldr	r3, [sp, #4]
 8006ba2:	f000 000f 	and.w	r0, r0, #15
 8006ba6:	fa00 f00b 	lsl.w	r0, r0, fp
 8006baa:	4303      	orrs	r3, r0
 8006bac:	9301      	str	r3, [sp, #4]
 8006bae:	f10b 0b04 	add.w	fp, fp, #4
 8006bb2:	9b07      	ldr	r3, [sp, #28]
 8006bb4:	e00d      	b.n	8006bd2 <__gethex+0x26e>
 8006bb6:	9a08      	ldr	r2, [sp, #32]
 8006bb8:	1e73      	subs	r3, r6, #1
 8006bba:	4413      	add	r3, r2
 8006bbc:	42bb      	cmp	r3, r7
 8006bbe:	d3e0      	bcc.n	8006b82 <__gethex+0x21e>
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	4652      	mov	r2, sl
 8006bc4:	9903      	ldr	r1, [sp, #12]
 8006bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8006bc8:	f001 f91e 	bl	8007e08 <strncmp>
 8006bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	d1d7      	bne.n	8006b82 <__gethex+0x21e>
 8006bd2:	461e      	mov	r6, r3
 8006bd4:	e78c      	b.n	8006af0 <__gethex+0x18c>
 8006bd6:	f04f 0a03 	mov.w	sl, #3
 8006bda:	e7b9      	b.n	8006b50 <__gethex+0x1ec>
 8006bdc:	da09      	bge.n	8006bf2 <__gethex+0x28e>
 8006bde:	1bf7      	subs	r7, r6, r7
 8006be0:	4621      	mov	r1, r4
 8006be2:	463a      	mov	r2, r7
 8006be4:	9802      	ldr	r0, [sp, #8]
 8006be6:	f000 fc4d 	bl	8007484 <__lshift>
 8006bea:	4604      	mov	r4, r0
 8006bec:	1bed      	subs	r5, r5, r7
 8006bee:	f100 0914 	add.w	r9, r0, #20
 8006bf2:	f04f 0a00 	mov.w	sl, #0
 8006bf6:	e7b0      	b.n	8006b5a <__gethex+0x1f6>
 8006bf8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006bfc:	42a8      	cmp	r0, r5
 8006bfe:	dd72      	ble.n	8006ce6 <__gethex+0x382>
 8006c00:	1b45      	subs	r5, r0, r5
 8006c02:	42ae      	cmp	r6, r5
 8006c04:	dc35      	bgt.n	8006c72 <__gethex+0x30e>
 8006c06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	d029      	beq.n	8006c62 <__gethex+0x2fe>
 8006c0e:	2b03      	cmp	r3, #3
 8006c10:	d02b      	beq.n	8006c6a <__gethex+0x306>
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d11c      	bne.n	8006c50 <__gethex+0x2ec>
 8006c16:	42ae      	cmp	r6, r5
 8006c18:	d11a      	bne.n	8006c50 <__gethex+0x2ec>
 8006c1a:	2e01      	cmp	r6, #1
 8006c1c:	d112      	bne.n	8006c44 <__gethex+0x2e0>
 8006c1e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006c22:	9a05      	ldr	r2, [sp, #20]
 8006c24:	2762      	movs	r7, #98	; 0x62
 8006c26:	6013      	str	r3, [r2, #0]
 8006c28:	2301      	movs	r3, #1
 8006c2a:	6123      	str	r3, [r4, #16]
 8006c2c:	f8c9 3000 	str.w	r3, [r9]
 8006c30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c32:	601c      	str	r4, [r3, #0]
 8006c34:	e728      	b.n	8006a88 <__gethex+0x124>
 8006c36:	bf00      	nop
 8006c38:	080095a0 	.word	0x080095a0
 8006c3c:	08009528 	.word	0x08009528
 8006c40:	08009539 	.word	0x08009539
 8006c44:	4620      	mov	r0, r4
 8006c46:	1e71      	subs	r1, r6, #1
 8006c48:	f000 fe5b 	bl	8007902 <__any_on>
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	d1e6      	bne.n	8006c1e <__gethex+0x2ba>
 8006c50:	4621      	mov	r1, r4
 8006c52:	9802      	ldr	r0, [sp, #8]
 8006c54:	f000 f9fe 	bl	8007054 <_Bfree>
 8006c58:	2300      	movs	r3, #0
 8006c5a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006c5c:	2750      	movs	r7, #80	; 0x50
 8006c5e:	6013      	str	r3, [r2, #0]
 8006c60:	e712      	b.n	8006a88 <__gethex+0x124>
 8006c62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1f3      	bne.n	8006c50 <__gethex+0x2ec>
 8006c68:	e7d9      	b.n	8006c1e <__gethex+0x2ba>
 8006c6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1d6      	bne.n	8006c1e <__gethex+0x2ba>
 8006c70:	e7ee      	b.n	8006c50 <__gethex+0x2ec>
 8006c72:	1e6f      	subs	r7, r5, #1
 8006c74:	f1ba 0f00 	cmp.w	sl, #0
 8006c78:	d132      	bne.n	8006ce0 <__gethex+0x37c>
 8006c7a:	b127      	cbz	r7, 8006c86 <__gethex+0x322>
 8006c7c:	4639      	mov	r1, r7
 8006c7e:	4620      	mov	r0, r4
 8006c80:	f000 fe3f 	bl	8007902 <__any_on>
 8006c84:	4682      	mov	sl, r0
 8006c86:	2101      	movs	r1, #1
 8006c88:	117b      	asrs	r3, r7, #5
 8006c8a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006c8e:	f007 071f 	and.w	r7, r7, #31
 8006c92:	fa01 f707 	lsl.w	r7, r1, r7
 8006c96:	421f      	tst	r7, r3
 8006c98:	f04f 0702 	mov.w	r7, #2
 8006c9c:	4629      	mov	r1, r5
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	bf18      	it	ne
 8006ca2:	f04a 0a02 	orrne.w	sl, sl, #2
 8006ca6:	1b76      	subs	r6, r6, r5
 8006ca8:	f7ff fdf4 	bl	8006894 <rshift>
 8006cac:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006cb0:	f1ba 0f00 	cmp.w	sl, #0
 8006cb4:	d048      	beq.n	8006d48 <__gethex+0x3e4>
 8006cb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d015      	beq.n	8006cea <__gethex+0x386>
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	d017      	beq.n	8006cf2 <__gethex+0x38e>
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d109      	bne.n	8006cda <__gethex+0x376>
 8006cc6:	f01a 0f02 	tst.w	sl, #2
 8006cca:	d006      	beq.n	8006cda <__gethex+0x376>
 8006ccc:	f8d9 0000 	ldr.w	r0, [r9]
 8006cd0:	ea4a 0a00 	orr.w	sl, sl, r0
 8006cd4:	f01a 0f01 	tst.w	sl, #1
 8006cd8:	d10e      	bne.n	8006cf8 <__gethex+0x394>
 8006cda:	f047 0710 	orr.w	r7, r7, #16
 8006cde:	e033      	b.n	8006d48 <__gethex+0x3e4>
 8006ce0:	f04f 0a01 	mov.w	sl, #1
 8006ce4:	e7cf      	b.n	8006c86 <__gethex+0x322>
 8006ce6:	2701      	movs	r7, #1
 8006ce8:	e7e2      	b.n	8006cb0 <__gethex+0x34c>
 8006cea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006cec:	f1c3 0301 	rsb	r3, r3, #1
 8006cf0:	9315      	str	r3, [sp, #84]	; 0x54
 8006cf2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d0f0      	beq.n	8006cda <__gethex+0x376>
 8006cf8:	f04f 0c00 	mov.w	ip, #0
 8006cfc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006d00:	f104 0314 	add.w	r3, r4, #20
 8006d04:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006d08:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d12:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006d16:	d01c      	beq.n	8006d52 <__gethex+0x3ee>
 8006d18:	3201      	adds	r2, #1
 8006d1a:	6002      	str	r2, [r0, #0]
 8006d1c:	2f02      	cmp	r7, #2
 8006d1e:	f104 0314 	add.w	r3, r4, #20
 8006d22:	d13d      	bne.n	8006da0 <__gethex+0x43c>
 8006d24:	f8d8 2000 	ldr.w	r2, [r8]
 8006d28:	3a01      	subs	r2, #1
 8006d2a:	42b2      	cmp	r2, r6
 8006d2c:	d10a      	bne.n	8006d44 <__gethex+0x3e0>
 8006d2e:	2201      	movs	r2, #1
 8006d30:	1171      	asrs	r1, r6, #5
 8006d32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d36:	f006 061f 	and.w	r6, r6, #31
 8006d3a:	fa02 f606 	lsl.w	r6, r2, r6
 8006d3e:	421e      	tst	r6, r3
 8006d40:	bf18      	it	ne
 8006d42:	4617      	movne	r7, r2
 8006d44:	f047 0720 	orr.w	r7, r7, #32
 8006d48:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d4a:	601c      	str	r4, [r3, #0]
 8006d4c:	9b05      	ldr	r3, [sp, #20]
 8006d4e:	601d      	str	r5, [r3, #0]
 8006d50:	e69a      	b.n	8006a88 <__gethex+0x124>
 8006d52:	4299      	cmp	r1, r3
 8006d54:	f843 cc04 	str.w	ip, [r3, #-4]
 8006d58:	d8d8      	bhi.n	8006d0c <__gethex+0x3a8>
 8006d5a:	68a3      	ldr	r3, [r4, #8]
 8006d5c:	459b      	cmp	fp, r3
 8006d5e:	db17      	blt.n	8006d90 <__gethex+0x42c>
 8006d60:	6861      	ldr	r1, [r4, #4]
 8006d62:	9802      	ldr	r0, [sp, #8]
 8006d64:	3101      	adds	r1, #1
 8006d66:	f000 f935 	bl	8006fd4 <_Balloc>
 8006d6a:	4681      	mov	r9, r0
 8006d6c:	b918      	cbnz	r0, 8006d76 <__gethex+0x412>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	2184      	movs	r1, #132	; 0x84
 8006d72:	4b19      	ldr	r3, [pc, #100]	; (8006dd8 <__gethex+0x474>)
 8006d74:	e6ab      	b.n	8006ace <__gethex+0x16a>
 8006d76:	6922      	ldr	r2, [r4, #16]
 8006d78:	f104 010c 	add.w	r1, r4, #12
 8006d7c:	3202      	adds	r2, #2
 8006d7e:	0092      	lsls	r2, r2, #2
 8006d80:	300c      	adds	r0, #12
 8006d82:	f000 f919 	bl	8006fb8 <memcpy>
 8006d86:	4621      	mov	r1, r4
 8006d88:	9802      	ldr	r0, [sp, #8]
 8006d8a:	f000 f963 	bl	8007054 <_Bfree>
 8006d8e:	464c      	mov	r4, r9
 8006d90:	6923      	ldr	r3, [r4, #16]
 8006d92:	1c5a      	adds	r2, r3, #1
 8006d94:	6122      	str	r2, [r4, #16]
 8006d96:	2201      	movs	r2, #1
 8006d98:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d9c:	615a      	str	r2, [r3, #20]
 8006d9e:	e7bd      	b.n	8006d1c <__gethex+0x3b8>
 8006da0:	6922      	ldr	r2, [r4, #16]
 8006da2:	455a      	cmp	r2, fp
 8006da4:	dd0b      	ble.n	8006dbe <__gethex+0x45a>
 8006da6:	2101      	movs	r1, #1
 8006da8:	4620      	mov	r0, r4
 8006daa:	f7ff fd73 	bl	8006894 <rshift>
 8006dae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006db2:	3501      	adds	r5, #1
 8006db4:	42ab      	cmp	r3, r5
 8006db6:	f6ff aed4 	blt.w	8006b62 <__gethex+0x1fe>
 8006dba:	2701      	movs	r7, #1
 8006dbc:	e7c2      	b.n	8006d44 <__gethex+0x3e0>
 8006dbe:	f016 061f 	ands.w	r6, r6, #31
 8006dc2:	d0fa      	beq.n	8006dba <__gethex+0x456>
 8006dc4:	4453      	add	r3, sl
 8006dc6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006dca:	f000 f9f5 	bl	80071b8 <__hi0bits>
 8006dce:	f1c6 0620 	rsb	r6, r6, #32
 8006dd2:	42b0      	cmp	r0, r6
 8006dd4:	dbe7      	blt.n	8006da6 <__gethex+0x442>
 8006dd6:	e7f0      	b.n	8006dba <__gethex+0x456>
 8006dd8:	08009528 	.word	0x08009528

08006ddc <L_shift>:
 8006ddc:	f1c2 0208 	rsb	r2, r2, #8
 8006de0:	0092      	lsls	r2, r2, #2
 8006de2:	b570      	push	{r4, r5, r6, lr}
 8006de4:	f1c2 0620 	rsb	r6, r2, #32
 8006de8:	6843      	ldr	r3, [r0, #4]
 8006dea:	6804      	ldr	r4, [r0, #0]
 8006dec:	fa03 f506 	lsl.w	r5, r3, r6
 8006df0:	432c      	orrs	r4, r5
 8006df2:	40d3      	lsrs	r3, r2
 8006df4:	6004      	str	r4, [r0, #0]
 8006df6:	f840 3f04 	str.w	r3, [r0, #4]!
 8006dfa:	4288      	cmp	r0, r1
 8006dfc:	d3f4      	bcc.n	8006de8 <L_shift+0xc>
 8006dfe:	bd70      	pop	{r4, r5, r6, pc}

08006e00 <__match>:
 8006e00:	b530      	push	{r4, r5, lr}
 8006e02:	6803      	ldr	r3, [r0, #0]
 8006e04:	3301      	adds	r3, #1
 8006e06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e0a:	b914      	cbnz	r4, 8006e12 <__match+0x12>
 8006e0c:	6003      	str	r3, [r0, #0]
 8006e0e:	2001      	movs	r0, #1
 8006e10:	bd30      	pop	{r4, r5, pc}
 8006e12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e16:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006e1a:	2d19      	cmp	r5, #25
 8006e1c:	bf98      	it	ls
 8006e1e:	3220      	addls	r2, #32
 8006e20:	42a2      	cmp	r2, r4
 8006e22:	d0f0      	beq.n	8006e06 <__match+0x6>
 8006e24:	2000      	movs	r0, #0
 8006e26:	e7f3      	b.n	8006e10 <__match+0x10>

08006e28 <__hexnan>:
 8006e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e2c:	2500      	movs	r5, #0
 8006e2e:	680b      	ldr	r3, [r1, #0]
 8006e30:	4682      	mov	sl, r0
 8006e32:	115e      	asrs	r6, r3, #5
 8006e34:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006e38:	f013 031f 	ands.w	r3, r3, #31
 8006e3c:	bf18      	it	ne
 8006e3e:	3604      	addne	r6, #4
 8006e40:	1f37      	subs	r7, r6, #4
 8006e42:	46b9      	mov	r9, r7
 8006e44:	463c      	mov	r4, r7
 8006e46:	46ab      	mov	fp, r5
 8006e48:	b087      	sub	sp, #28
 8006e4a:	4690      	mov	r8, r2
 8006e4c:	6802      	ldr	r2, [r0, #0]
 8006e4e:	9301      	str	r3, [sp, #4]
 8006e50:	f846 5c04 	str.w	r5, [r6, #-4]
 8006e54:	9502      	str	r5, [sp, #8]
 8006e56:	7851      	ldrb	r1, [r2, #1]
 8006e58:	1c53      	adds	r3, r2, #1
 8006e5a:	9303      	str	r3, [sp, #12]
 8006e5c:	b341      	cbz	r1, 8006eb0 <__hexnan+0x88>
 8006e5e:	4608      	mov	r0, r1
 8006e60:	9205      	str	r2, [sp, #20]
 8006e62:	9104      	str	r1, [sp, #16]
 8006e64:	f7ff fd69 	bl	800693a <__hexdig_fun>
 8006e68:	2800      	cmp	r0, #0
 8006e6a:	d14f      	bne.n	8006f0c <__hexnan+0xe4>
 8006e6c:	9904      	ldr	r1, [sp, #16]
 8006e6e:	9a05      	ldr	r2, [sp, #20]
 8006e70:	2920      	cmp	r1, #32
 8006e72:	d818      	bhi.n	8006ea6 <__hexnan+0x7e>
 8006e74:	9b02      	ldr	r3, [sp, #8]
 8006e76:	459b      	cmp	fp, r3
 8006e78:	dd13      	ble.n	8006ea2 <__hexnan+0x7a>
 8006e7a:	454c      	cmp	r4, r9
 8006e7c:	d206      	bcs.n	8006e8c <__hexnan+0x64>
 8006e7e:	2d07      	cmp	r5, #7
 8006e80:	dc04      	bgt.n	8006e8c <__hexnan+0x64>
 8006e82:	462a      	mov	r2, r5
 8006e84:	4649      	mov	r1, r9
 8006e86:	4620      	mov	r0, r4
 8006e88:	f7ff ffa8 	bl	8006ddc <L_shift>
 8006e8c:	4544      	cmp	r4, r8
 8006e8e:	d950      	bls.n	8006f32 <__hexnan+0x10a>
 8006e90:	2300      	movs	r3, #0
 8006e92:	f1a4 0904 	sub.w	r9, r4, #4
 8006e96:	f844 3c04 	str.w	r3, [r4, #-4]
 8006e9a:	461d      	mov	r5, r3
 8006e9c:	464c      	mov	r4, r9
 8006e9e:	f8cd b008 	str.w	fp, [sp, #8]
 8006ea2:	9a03      	ldr	r2, [sp, #12]
 8006ea4:	e7d7      	b.n	8006e56 <__hexnan+0x2e>
 8006ea6:	2929      	cmp	r1, #41	; 0x29
 8006ea8:	d156      	bne.n	8006f58 <__hexnan+0x130>
 8006eaa:	3202      	adds	r2, #2
 8006eac:	f8ca 2000 	str.w	r2, [sl]
 8006eb0:	f1bb 0f00 	cmp.w	fp, #0
 8006eb4:	d050      	beq.n	8006f58 <__hexnan+0x130>
 8006eb6:	454c      	cmp	r4, r9
 8006eb8:	d206      	bcs.n	8006ec8 <__hexnan+0xa0>
 8006eba:	2d07      	cmp	r5, #7
 8006ebc:	dc04      	bgt.n	8006ec8 <__hexnan+0xa0>
 8006ebe:	462a      	mov	r2, r5
 8006ec0:	4649      	mov	r1, r9
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	f7ff ff8a 	bl	8006ddc <L_shift>
 8006ec8:	4544      	cmp	r4, r8
 8006eca:	d934      	bls.n	8006f36 <__hexnan+0x10e>
 8006ecc:	4623      	mov	r3, r4
 8006ece:	f1a8 0204 	sub.w	r2, r8, #4
 8006ed2:	f853 1b04 	ldr.w	r1, [r3], #4
 8006ed6:	429f      	cmp	r7, r3
 8006ed8:	f842 1f04 	str.w	r1, [r2, #4]!
 8006edc:	d2f9      	bcs.n	8006ed2 <__hexnan+0xaa>
 8006ede:	1b3b      	subs	r3, r7, r4
 8006ee0:	f023 0303 	bic.w	r3, r3, #3
 8006ee4:	3304      	adds	r3, #4
 8006ee6:	3401      	adds	r4, #1
 8006ee8:	3e03      	subs	r6, #3
 8006eea:	42b4      	cmp	r4, r6
 8006eec:	bf88      	it	hi
 8006eee:	2304      	movhi	r3, #4
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	4443      	add	r3, r8
 8006ef4:	f843 2b04 	str.w	r2, [r3], #4
 8006ef8:	429f      	cmp	r7, r3
 8006efa:	d2fb      	bcs.n	8006ef4 <__hexnan+0xcc>
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	b91b      	cbnz	r3, 8006f08 <__hexnan+0xe0>
 8006f00:	4547      	cmp	r7, r8
 8006f02:	d127      	bne.n	8006f54 <__hexnan+0x12c>
 8006f04:	2301      	movs	r3, #1
 8006f06:	603b      	str	r3, [r7, #0]
 8006f08:	2005      	movs	r0, #5
 8006f0a:	e026      	b.n	8006f5a <__hexnan+0x132>
 8006f0c:	3501      	adds	r5, #1
 8006f0e:	2d08      	cmp	r5, #8
 8006f10:	f10b 0b01 	add.w	fp, fp, #1
 8006f14:	dd06      	ble.n	8006f24 <__hexnan+0xfc>
 8006f16:	4544      	cmp	r4, r8
 8006f18:	d9c3      	bls.n	8006ea2 <__hexnan+0x7a>
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	2501      	movs	r5, #1
 8006f1e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006f22:	3c04      	subs	r4, #4
 8006f24:	6822      	ldr	r2, [r4, #0]
 8006f26:	f000 000f 	and.w	r0, r0, #15
 8006f2a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006f2e:	6022      	str	r2, [r4, #0]
 8006f30:	e7b7      	b.n	8006ea2 <__hexnan+0x7a>
 8006f32:	2508      	movs	r5, #8
 8006f34:	e7b5      	b.n	8006ea2 <__hexnan+0x7a>
 8006f36:	9b01      	ldr	r3, [sp, #4]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d0df      	beq.n	8006efc <__hexnan+0xd4>
 8006f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f40:	f1c3 0320 	rsb	r3, r3, #32
 8006f44:	fa22 f303 	lsr.w	r3, r2, r3
 8006f48:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006f4c:	401a      	ands	r2, r3
 8006f4e:	f846 2c04 	str.w	r2, [r6, #-4]
 8006f52:	e7d3      	b.n	8006efc <__hexnan+0xd4>
 8006f54:	3f04      	subs	r7, #4
 8006f56:	e7d1      	b.n	8006efc <__hexnan+0xd4>
 8006f58:	2004      	movs	r0, #4
 8006f5a:	b007      	add	sp, #28
 8006f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006f60 <_localeconv_r>:
 8006f60:	4800      	ldr	r0, [pc, #0]	; (8006f64 <_localeconv_r+0x4>)
 8006f62:	4770      	bx	lr
 8006f64:	200001d4 	.word	0x200001d4

08006f68 <malloc>:
 8006f68:	4b02      	ldr	r3, [pc, #8]	; (8006f74 <malloc+0xc>)
 8006f6a:	4601      	mov	r1, r0
 8006f6c:	6818      	ldr	r0, [r3, #0]
 8006f6e:	f000 bd65 	b.w	8007a3c <_malloc_r>
 8006f72:	bf00      	nop
 8006f74:	2000007c 	.word	0x2000007c

08006f78 <__ascii_mbtowc>:
 8006f78:	b082      	sub	sp, #8
 8006f7a:	b901      	cbnz	r1, 8006f7e <__ascii_mbtowc+0x6>
 8006f7c:	a901      	add	r1, sp, #4
 8006f7e:	b142      	cbz	r2, 8006f92 <__ascii_mbtowc+0x1a>
 8006f80:	b14b      	cbz	r3, 8006f96 <__ascii_mbtowc+0x1e>
 8006f82:	7813      	ldrb	r3, [r2, #0]
 8006f84:	600b      	str	r3, [r1, #0]
 8006f86:	7812      	ldrb	r2, [r2, #0]
 8006f88:	1e10      	subs	r0, r2, #0
 8006f8a:	bf18      	it	ne
 8006f8c:	2001      	movne	r0, #1
 8006f8e:	b002      	add	sp, #8
 8006f90:	4770      	bx	lr
 8006f92:	4610      	mov	r0, r2
 8006f94:	e7fb      	b.n	8006f8e <__ascii_mbtowc+0x16>
 8006f96:	f06f 0001 	mvn.w	r0, #1
 8006f9a:	e7f8      	b.n	8006f8e <__ascii_mbtowc+0x16>

08006f9c <memchr>:
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	b510      	push	{r4, lr}
 8006fa0:	b2c9      	uxtb	r1, r1
 8006fa2:	4402      	add	r2, r0
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	d101      	bne.n	8006fae <memchr+0x12>
 8006faa:	2000      	movs	r0, #0
 8006fac:	e003      	b.n	8006fb6 <memchr+0x1a>
 8006fae:	7804      	ldrb	r4, [r0, #0]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	428c      	cmp	r4, r1
 8006fb4:	d1f6      	bne.n	8006fa4 <memchr+0x8>
 8006fb6:	bd10      	pop	{r4, pc}

08006fb8 <memcpy>:
 8006fb8:	440a      	add	r2, r1
 8006fba:	4291      	cmp	r1, r2
 8006fbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fc0:	d100      	bne.n	8006fc4 <memcpy+0xc>
 8006fc2:	4770      	bx	lr
 8006fc4:	b510      	push	{r4, lr}
 8006fc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fca:	4291      	cmp	r1, r2
 8006fcc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fd0:	d1f9      	bne.n	8006fc6 <memcpy+0xe>
 8006fd2:	bd10      	pop	{r4, pc}

08006fd4 <_Balloc>:
 8006fd4:	b570      	push	{r4, r5, r6, lr}
 8006fd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006fd8:	4604      	mov	r4, r0
 8006fda:	460d      	mov	r5, r1
 8006fdc:	b976      	cbnz	r6, 8006ffc <_Balloc+0x28>
 8006fde:	2010      	movs	r0, #16
 8006fe0:	f7ff ffc2 	bl	8006f68 <malloc>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	6260      	str	r0, [r4, #36]	; 0x24
 8006fe8:	b920      	cbnz	r0, 8006ff4 <_Balloc+0x20>
 8006fea:	2166      	movs	r1, #102	; 0x66
 8006fec:	4b17      	ldr	r3, [pc, #92]	; (800704c <_Balloc+0x78>)
 8006fee:	4818      	ldr	r0, [pc, #96]	; (8007050 <_Balloc+0x7c>)
 8006ff0:	f000 ff2c 	bl	8007e4c <__assert_func>
 8006ff4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ff8:	6006      	str	r6, [r0, #0]
 8006ffa:	60c6      	str	r6, [r0, #12]
 8006ffc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006ffe:	68f3      	ldr	r3, [r6, #12]
 8007000:	b183      	cbz	r3, 8007024 <_Balloc+0x50>
 8007002:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800700a:	b9b8      	cbnz	r0, 800703c <_Balloc+0x68>
 800700c:	2101      	movs	r1, #1
 800700e:	fa01 f605 	lsl.w	r6, r1, r5
 8007012:	1d72      	adds	r2, r6, #5
 8007014:	4620      	mov	r0, r4
 8007016:	0092      	lsls	r2, r2, #2
 8007018:	f000 fc94 	bl	8007944 <_calloc_r>
 800701c:	b160      	cbz	r0, 8007038 <_Balloc+0x64>
 800701e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007022:	e00e      	b.n	8007042 <_Balloc+0x6e>
 8007024:	2221      	movs	r2, #33	; 0x21
 8007026:	2104      	movs	r1, #4
 8007028:	4620      	mov	r0, r4
 800702a:	f000 fc8b 	bl	8007944 <_calloc_r>
 800702e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007030:	60f0      	str	r0, [r6, #12]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1e4      	bne.n	8007002 <_Balloc+0x2e>
 8007038:	2000      	movs	r0, #0
 800703a:	bd70      	pop	{r4, r5, r6, pc}
 800703c:	6802      	ldr	r2, [r0, #0]
 800703e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007042:	2300      	movs	r3, #0
 8007044:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007048:	e7f7      	b.n	800703a <_Balloc+0x66>
 800704a:	bf00      	nop
 800704c:	080094b6 	.word	0x080094b6
 8007050:	080095b4 	.word	0x080095b4

08007054 <_Bfree>:
 8007054:	b570      	push	{r4, r5, r6, lr}
 8007056:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007058:	4605      	mov	r5, r0
 800705a:	460c      	mov	r4, r1
 800705c:	b976      	cbnz	r6, 800707c <_Bfree+0x28>
 800705e:	2010      	movs	r0, #16
 8007060:	f7ff ff82 	bl	8006f68 <malloc>
 8007064:	4602      	mov	r2, r0
 8007066:	6268      	str	r0, [r5, #36]	; 0x24
 8007068:	b920      	cbnz	r0, 8007074 <_Bfree+0x20>
 800706a:	218a      	movs	r1, #138	; 0x8a
 800706c:	4b08      	ldr	r3, [pc, #32]	; (8007090 <_Bfree+0x3c>)
 800706e:	4809      	ldr	r0, [pc, #36]	; (8007094 <_Bfree+0x40>)
 8007070:	f000 feec 	bl	8007e4c <__assert_func>
 8007074:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007078:	6006      	str	r6, [r0, #0]
 800707a:	60c6      	str	r6, [r0, #12]
 800707c:	b13c      	cbz	r4, 800708e <_Bfree+0x3a>
 800707e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007080:	6862      	ldr	r2, [r4, #4]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007088:	6021      	str	r1, [r4, #0]
 800708a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800708e:	bd70      	pop	{r4, r5, r6, pc}
 8007090:	080094b6 	.word	0x080094b6
 8007094:	080095b4 	.word	0x080095b4

08007098 <__multadd>:
 8007098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800709c:	4607      	mov	r7, r0
 800709e:	460c      	mov	r4, r1
 80070a0:	461e      	mov	r6, r3
 80070a2:	2000      	movs	r0, #0
 80070a4:	690d      	ldr	r5, [r1, #16]
 80070a6:	f101 0c14 	add.w	ip, r1, #20
 80070aa:	f8dc 3000 	ldr.w	r3, [ip]
 80070ae:	3001      	adds	r0, #1
 80070b0:	b299      	uxth	r1, r3
 80070b2:	fb02 6101 	mla	r1, r2, r1, r6
 80070b6:	0c1e      	lsrs	r6, r3, #16
 80070b8:	0c0b      	lsrs	r3, r1, #16
 80070ba:	fb02 3306 	mla	r3, r2, r6, r3
 80070be:	b289      	uxth	r1, r1
 80070c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80070c4:	4285      	cmp	r5, r0
 80070c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80070ca:	f84c 1b04 	str.w	r1, [ip], #4
 80070ce:	dcec      	bgt.n	80070aa <__multadd+0x12>
 80070d0:	b30e      	cbz	r6, 8007116 <__multadd+0x7e>
 80070d2:	68a3      	ldr	r3, [r4, #8]
 80070d4:	42ab      	cmp	r3, r5
 80070d6:	dc19      	bgt.n	800710c <__multadd+0x74>
 80070d8:	6861      	ldr	r1, [r4, #4]
 80070da:	4638      	mov	r0, r7
 80070dc:	3101      	adds	r1, #1
 80070de:	f7ff ff79 	bl	8006fd4 <_Balloc>
 80070e2:	4680      	mov	r8, r0
 80070e4:	b928      	cbnz	r0, 80070f2 <__multadd+0x5a>
 80070e6:	4602      	mov	r2, r0
 80070e8:	21b5      	movs	r1, #181	; 0xb5
 80070ea:	4b0c      	ldr	r3, [pc, #48]	; (800711c <__multadd+0x84>)
 80070ec:	480c      	ldr	r0, [pc, #48]	; (8007120 <__multadd+0x88>)
 80070ee:	f000 fead 	bl	8007e4c <__assert_func>
 80070f2:	6922      	ldr	r2, [r4, #16]
 80070f4:	f104 010c 	add.w	r1, r4, #12
 80070f8:	3202      	adds	r2, #2
 80070fa:	0092      	lsls	r2, r2, #2
 80070fc:	300c      	adds	r0, #12
 80070fe:	f7ff ff5b 	bl	8006fb8 <memcpy>
 8007102:	4621      	mov	r1, r4
 8007104:	4638      	mov	r0, r7
 8007106:	f7ff ffa5 	bl	8007054 <_Bfree>
 800710a:	4644      	mov	r4, r8
 800710c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007110:	3501      	adds	r5, #1
 8007112:	615e      	str	r6, [r3, #20]
 8007114:	6125      	str	r5, [r4, #16]
 8007116:	4620      	mov	r0, r4
 8007118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800711c:	08009528 	.word	0x08009528
 8007120:	080095b4 	.word	0x080095b4

08007124 <__s2b>:
 8007124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007128:	4615      	mov	r5, r2
 800712a:	2209      	movs	r2, #9
 800712c:	461f      	mov	r7, r3
 800712e:	3308      	adds	r3, #8
 8007130:	460c      	mov	r4, r1
 8007132:	fb93 f3f2 	sdiv	r3, r3, r2
 8007136:	4606      	mov	r6, r0
 8007138:	2201      	movs	r2, #1
 800713a:	2100      	movs	r1, #0
 800713c:	429a      	cmp	r2, r3
 800713e:	db09      	blt.n	8007154 <__s2b+0x30>
 8007140:	4630      	mov	r0, r6
 8007142:	f7ff ff47 	bl	8006fd4 <_Balloc>
 8007146:	b940      	cbnz	r0, 800715a <__s2b+0x36>
 8007148:	4602      	mov	r2, r0
 800714a:	21ce      	movs	r1, #206	; 0xce
 800714c:	4b18      	ldr	r3, [pc, #96]	; (80071b0 <__s2b+0x8c>)
 800714e:	4819      	ldr	r0, [pc, #100]	; (80071b4 <__s2b+0x90>)
 8007150:	f000 fe7c 	bl	8007e4c <__assert_func>
 8007154:	0052      	lsls	r2, r2, #1
 8007156:	3101      	adds	r1, #1
 8007158:	e7f0      	b.n	800713c <__s2b+0x18>
 800715a:	9b08      	ldr	r3, [sp, #32]
 800715c:	2d09      	cmp	r5, #9
 800715e:	6143      	str	r3, [r0, #20]
 8007160:	f04f 0301 	mov.w	r3, #1
 8007164:	6103      	str	r3, [r0, #16]
 8007166:	dd16      	ble.n	8007196 <__s2b+0x72>
 8007168:	f104 0909 	add.w	r9, r4, #9
 800716c:	46c8      	mov	r8, r9
 800716e:	442c      	add	r4, r5
 8007170:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007174:	4601      	mov	r1, r0
 8007176:	220a      	movs	r2, #10
 8007178:	4630      	mov	r0, r6
 800717a:	3b30      	subs	r3, #48	; 0x30
 800717c:	f7ff ff8c 	bl	8007098 <__multadd>
 8007180:	45a0      	cmp	r8, r4
 8007182:	d1f5      	bne.n	8007170 <__s2b+0x4c>
 8007184:	f1a5 0408 	sub.w	r4, r5, #8
 8007188:	444c      	add	r4, r9
 800718a:	1b2d      	subs	r5, r5, r4
 800718c:	1963      	adds	r3, r4, r5
 800718e:	42bb      	cmp	r3, r7
 8007190:	db04      	blt.n	800719c <__s2b+0x78>
 8007192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007196:	2509      	movs	r5, #9
 8007198:	340a      	adds	r4, #10
 800719a:	e7f6      	b.n	800718a <__s2b+0x66>
 800719c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80071a0:	4601      	mov	r1, r0
 80071a2:	220a      	movs	r2, #10
 80071a4:	4630      	mov	r0, r6
 80071a6:	3b30      	subs	r3, #48	; 0x30
 80071a8:	f7ff ff76 	bl	8007098 <__multadd>
 80071ac:	e7ee      	b.n	800718c <__s2b+0x68>
 80071ae:	bf00      	nop
 80071b0:	08009528 	.word	0x08009528
 80071b4:	080095b4 	.word	0x080095b4

080071b8 <__hi0bits>:
 80071b8:	0c02      	lsrs	r2, r0, #16
 80071ba:	0412      	lsls	r2, r2, #16
 80071bc:	4603      	mov	r3, r0
 80071be:	b9ca      	cbnz	r2, 80071f4 <__hi0bits+0x3c>
 80071c0:	0403      	lsls	r3, r0, #16
 80071c2:	2010      	movs	r0, #16
 80071c4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80071c8:	bf04      	itt	eq
 80071ca:	021b      	lsleq	r3, r3, #8
 80071cc:	3008      	addeq	r0, #8
 80071ce:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80071d2:	bf04      	itt	eq
 80071d4:	011b      	lsleq	r3, r3, #4
 80071d6:	3004      	addeq	r0, #4
 80071d8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80071dc:	bf04      	itt	eq
 80071de:	009b      	lsleq	r3, r3, #2
 80071e0:	3002      	addeq	r0, #2
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	db05      	blt.n	80071f2 <__hi0bits+0x3a>
 80071e6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80071ea:	f100 0001 	add.w	r0, r0, #1
 80071ee:	bf08      	it	eq
 80071f0:	2020      	moveq	r0, #32
 80071f2:	4770      	bx	lr
 80071f4:	2000      	movs	r0, #0
 80071f6:	e7e5      	b.n	80071c4 <__hi0bits+0xc>

080071f8 <__lo0bits>:
 80071f8:	6803      	ldr	r3, [r0, #0]
 80071fa:	4602      	mov	r2, r0
 80071fc:	f013 0007 	ands.w	r0, r3, #7
 8007200:	d00b      	beq.n	800721a <__lo0bits+0x22>
 8007202:	07d9      	lsls	r1, r3, #31
 8007204:	d421      	bmi.n	800724a <__lo0bits+0x52>
 8007206:	0798      	lsls	r0, r3, #30
 8007208:	bf49      	itett	mi
 800720a:	085b      	lsrmi	r3, r3, #1
 800720c:	089b      	lsrpl	r3, r3, #2
 800720e:	2001      	movmi	r0, #1
 8007210:	6013      	strmi	r3, [r2, #0]
 8007212:	bf5c      	itt	pl
 8007214:	2002      	movpl	r0, #2
 8007216:	6013      	strpl	r3, [r2, #0]
 8007218:	4770      	bx	lr
 800721a:	b299      	uxth	r1, r3
 800721c:	b909      	cbnz	r1, 8007222 <__lo0bits+0x2a>
 800721e:	2010      	movs	r0, #16
 8007220:	0c1b      	lsrs	r3, r3, #16
 8007222:	b2d9      	uxtb	r1, r3
 8007224:	b909      	cbnz	r1, 800722a <__lo0bits+0x32>
 8007226:	3008      	adds	r0, #8
 8007228:	0a1b      	lsrs	r3, r3, #8
 800722a:	0719      	lsls	r1, r3, #28
 800722c:	bf04      	itt	eq
 800722e:	091b      	lsreq	r3, r3, #4
 8007230:	3004      	addeq	r0, #4
 8007232:	0799      	lsls	r1, r3, #30
 8007234:	bf04      	itt	eq
 8007236:	089b      	lsreq	r3, r3, #2
 8007238:	3002      	addeq	r0, #2
 800723a:	07d9      	lsls	r1, r3, #31
 800723c:	d403      	bmi.n	8007246 <__lo0bits+0x4e>
 800723e:	085b      	lsrs	r3, r3, #1
 8007240:	f100 0001 	add.w	r0, r0, #1
 8007244:	d003      	beq.n	800724e <__lo0bits+0x56>
 8007246:	6013      	str	r3, [r2, #0]
 8007248:	4770      	bx	lr
 800724a:	2000      	movs	r0, #0
 800724c:	4770      	bx	lr
 800724e:	2020      	movs	r0, #32
 8007250:	4770      	bx	lr
	...

08007254 <__i2b>:
 8007254:	b510      	push	{r4, lr}
 8007256:	460c      	mov	r4, r1
 8007258:	2101      	movs	r1, #1
 800725a:	f7ff febb 	bl	8006fd4 <_Balloc>
 800725e:	4602      	mov	r2, r0
 8007260:	b928      	cbnz	r0, 800726e <__i2b+0x1a>
 8007262:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007266:	4b04      	ldr	r3, [pc, #16]	; (8007278 <__i2b+0x24>)
 8007268:	4804      	ldr	r0, [pc, #16]	; (800727c <__i2b+0x28>)
 800726a:	f000 fdef 	bl	8007e4c <__assert_func>
 800726e:	2301      	movs	r3, #1
 8007270:	6144      	str	r4, [r0, #20]
 8007272:	6103      	str	r3, [r0, #16]
 8007274:	bd10      	pop	{r4, pc}
 8007276:	bf00      	nop
 8007278:	08009528 	.word	0x08009528
 800727c:	080095b4 	.word	0x080095b4

08007280 <__multiply>:
 8007280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007284:	4691      	mov	r9, r2
 8007286:	690a      	ldr	r2, [r1, #16]
 8007288:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800728c:	460c      	mov	r4, r1
 800728e:	429a      	cmp	r2, r3
 8007290:	bfbe      	ittt	lt
 8007292:	460b      	movlt	r3, r1
 8007294:	464c      	movlt	r4, r9
 8007296:	4699      	movlt	r9, r3
 8007298:	6927      	ldr	r7, [r4, #16]
 800729a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800729e:	68a3      	ldr	r3, [r4, #8]
 80072a0:	6861      	ldr	r1, [r4, #4]
 80072a2:	eb07 060a 	add.w	r6, r7, sl
 80072a6:	42b3      	cmp	r3, r6
 80072a8:	b085      	sub	sp, #20
 80072aa:	bfb8      	it	lt
 80072ac:	3101      	addlt	r1, #1
 80072ae:	f7ff fe91 	bl	8006fd4 <_Balloc>
 80072b2:	b930      	cbnz	r0, 80072c2 <__multiply+0x42>
 80072b4:	4602      	mov	r2, r0
 80072b6:	f240 115d 	movw	r1, #349	; 0x15d
 80072ba:	4b43      	ldr	r3, [pc, #268]	; (80073c8 <__multiply+0x148>)
 80072bc:	4843      	ldr	r0, [pc, #268]	; (80073cc <__multiply+0x14c>)
 80072be:	f000 fdc5 	bl	8007e4c <__assert_func>
 80072c2:	f100 0514 	add.w	r5, r0, #20
 80072c6:	462b      	mov	r3, r5
 80072c8:	2200      	movs	r2, #0
 80072ca:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80072ce:	4543      	cmp	r3, r8
 80072d0:	d321      	bcc.n	8007316 <__multiply+0x96>
 80072d2:	f104 0314 	add.w	r3, r4, #20
 80072d6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80072da:	f109 0314 	add.w	r3, r9, #20
 80072de:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80072e2:	9202      	str	r2, [sp, #8]
 80072e4:	1b3a      	subs	r2, r7, r4
 80072e6:	3a15      	subs	r2, #21
 80072e8:	f022 0203 	bic.w	r2, r2, #3
 80072ec:	3204      	adds	r2, #4
 80072ee:	f104 0115 	add.w	r1, r4, #21
 80072f2:	428f      	cmp	r7, r1
 80072f4:	bf38      	it	cc
 80072f6:	2204      	movcc	r2, #4
 80072f8:	9201      	str	r2, [sp, #4]
 80072fa:	9a02      	ldr	r2, [sp, #8]
 80072fc:	9303      	str	r3, [sp, #12]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d80c      	bhi.n	800731c <__multiply+0x9c>
 8007302:	2e00      	cmp	r6, #0
 8007304:	dd03      	ble.n	800730e <__multiply+0x8e>
 8007306:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800730a:	2b00      	cmp	r3, #0
 800730c:	d059      	beq.n	80073c2 <__multiply+0x142>
 800730e:	6106      	str	r6, [r0, #16]
 8007310:	b005      	add	sp, #20
 8007312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007316:	f843 2b04 	str.w	r2, [r3], #4
 800731a:	e7d8      	b.n	80072ce <__multiply+0x4e>
 800731c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007320:	f1ba 0f00 	cmp.w	sl, #0
 8007324:	d023      	beq.n	800736e <__multiply+0xee>
 8007326:	46a9      	mov	r9, r5
 8007328:	f04f 0c00 	mov.w	ip, #0
 800732c:	f104 0e14 	add.w	lr, r4, #20
 8007330:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007334:	f8d9 1000 	ldr.w	r1, [r9]
 8007338:	fa1f fb82 	uxth.w	fp, r2
 800733c:	b289      	uxth	r1, r1
 800733e:	fb0a 110b 	mla	r1, sl, fp, r1
 8007342:	4461      	add	r1, ip
 8007344:	f8d9 c000 	ldr.w	ip, [r9]
 8007348:	0c12      	lsrs	r2, r2, #16
 800734a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800734e:	fb0a c202 	mla	r2, sl, r2, ip
 8007352:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007356:	b289      	uxth	r1, r1
 8007358:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800735c:	4577      	cmp	r7, lr
 800735e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007362:	f849 1b04 	str.w	r1, [r9], #4
 8007366:	d8e3      	bhi.n	8007330 <__multiply+0xb0>
 8007368:	9a01      	ldr	r2, [sp, #4]
 800736a:	f845 c002 	str.w	ip, [r5, r2]
 800736e:	9a03      	ldr	r2, [sp, #12]
 8007370:	3304      	adds	r3, #4
 8007372:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007376:	f1b9 0f00 	cmp.w	r9, #0
 800737a:	d020      	beq.n	80073be <__multiply+0x13e>
 800737c:	46ae      	mov	lr, r5
 800737e:	f04f 0a00 	mov.w	sl, #0
 8007382:	6829      	ldr	r1, [r5, #0]
 8007384:	f104 0c14 	add.w	ip, r4, #20
 8007388:	f8bc b000 	ldrh.w	fp, [ip]
 800738c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007390:	b289      	uxth	r1, r1
 8007392:	fb09 220b 	mla	r2, r9, fp, r2
 8007396:	4492      	add	sl, r2
 8007398:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800739c:	f84e 1b04 	str.w	r1, [lr], #4
 80073a0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80073a4:	f8be 1000 	ldrh.w	r1, [lr]
 80073a8:	0c12      	lsrs	r2, r2, #16
 80073aa:	fb09 1102 	mla	r1, r9, r2, r1
 80073ae:	4567      	cmp	r7, ip
 80073b0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80073b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80073b8:	d8e6      	bhi.n	8007388 <__multiply+0x108>
 80073ba:	9a01      	ldr	r2, [sp, #4]
 80073bc:	50a9      	str	r1, [r5, r2]
 80073be:	3504      	adds	r5, #4
 80073c0:	e79b      	b.n	80072fa <__multiply+0x7a>
 80073c2:	3e01      	subs	r6, #1
 80073c4:	e79d      	b.n	8007302 <__multiply+0x82>
 80073c6:	bf00      	nop
 80073c8:	08009528 	.word	0x08009528
 80073cc:	080095b4 	.word	0x080095b4

080073d0 <__pow5mult>:
 80073d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073d4:	4615      	mov	r5, r2
 80073d6:	f012 0203 	ands.w	r2, r2, #3
 80073da:	4606      	mov	r6, r0
 80073dc:	460f      	mov	r7, r1
 80073de:	d007      	beq.n	80073f0 <__pow5mult+0x20>
 80073e0:	4c25      	ldr	r4, [pc, #148]	; (8007478 <__pow5mult+0xa8>)
 80073e2:	3a01      	subs	r2, #1
 80073e4:	2300      	movs	r3, #0
 80073e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80073ea:	f7ff fe55 	bl	8007098 <__multadd>
 80073ee:	4607      	mov	r7, r0
 80073f0:	10ad      	asrs	r5, r5, #2
 80073f2:	d03d      	beq.n	8007470 <__pow5mult+0xa0>
 80073f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80073f6:	b97c      	cbnz	r4, 8007418 <__pow5mult+0x48>
 80073f8:	2010      	movs	r0, #16
 80073fa:	f7ff fdb5 	bl	8006f68 <malloc>
 80073fe:	4602      	mov	r2, r0
 8007400:	6270      	str	r0, [r6, #36]	; 0x24
 8007402:	b928      	cbnz	r0, 8007410 <__pow5mult+0x40>
 8007404:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007408:	4b1c      	ldr	r3, [pc, #112]	; (800747c <__pow5mult+0xac>)
 800740a:	481d      	ldr	r0, [pc, #116]	; (8007480 <__pow5mult+0xb0>)
 800740c:	f000 fd1e 	bl	8007e4c <__assert_func>
 8007410:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007414:	6004      	str	r4, [r0, #0]
 8007416:	60c4      	str	r4, [r0, #12]
 8007418:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800741c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007420:	b94c      	cbnz	r4, 8007436 <__pow5mult+0x66>
 8007422:	f240 2171 	movw	r1, #625	; 0x271
 8007426:	4630      	mov	r0, r6
 8007428:	f7ff ff14 	bl	8007254 <__i2b>
 800742c:	2300      	movs	r3, #0
 800742e:	4604      	mov	r4, r0
 8007430:	f8c8 0008 	str.w	r0, [r8, #8]
 8007434:	6003      	str	r3, [r0, #0]
 8007436:	f04f 0900 	mov.w	r9, #0
 800743a:	07eb      	lsls	r3, r5, #31
 800743c:	d50a      	bpl.n	8007454 <__pow5mult+0x84>
 800743e:	4639      	mov	r1, r7
 8007440:	4622      	mov	r2, r4
 8007442:	4630      	mov	r0, r6
 8007444:	f7ff ff1c 	bl	8007280 <__multiply>
 8007448:	4680      	mov	r8, r0
 800744a:	4639      	mov	r1, r7
 800744c:	4630      	mov	r0, r6
 800744e:	f7ff fe01 	bl	8007054 <_Bfree>
 8007452:	4647      	mov	r7, r8
 8007454:	106d      	asrs	r5, r5, #1
 8007456:	d00b      	beq.n	8007470 <__pow5mult+0xa0>
 8007458:	6820      	ldr	r0, [r4, #0]
 800745a:	b938      	cbnz	r0, 800746c <__pow5mult+0x9c>
 800745c:	4622      	mov	r2, r4
 800745e:	4621      	mov	r1, r4
 8007460:	4630      	mov	r0, r6
 8007462:	f7ff ff0d 	bl	8007280 <__multiply>
 8007466:	6020      	str	r0, [r4, #0]
 8007468:	f8c0 9000 	str.w	r9, [r0]
 800746c:	4604      	mov	r4, r0
 800746e:	e7e4      	b.n	800743a <__pow5mult+0x6a>
 8007470:	4638      	mov	r0, r7
 8007472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007476:	bf00      	nop
 8007478:	08009700 	.word	0x08009700
 800747c:	080094b6 	.word	0x080094b6
 8007480:	080095b4 	.word	0x080095b4

08007484 <__lshift>:
 8007484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007488:	460c      	mov	r4, r1
 800748a:	4607      	mov	r7, r0
 800748c:	4691      	mov	r9, r2
 800748e:	6923      	ldr	r3, [r4, #16]
 8007490:	6849      	ldr	r1, [r1, #4]
 8007492:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007496:	68a3      	ldr	r3, [r4, #8]
 8007498:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800749c:	f108 0601 	add.w	r6, r8, #1
 80074a0:	42b3      	cmp	r3, r6
 80074a2:	db0b      	blt.n	80074bc <__lshift+0x38>
 80074a4:	4638      	mov	r0, r7
 80074a6:	f7ff fd95 	bl	8006fd4 <_Balloc>
 80074aa:	4605      	mov	r5, r0
 80074ac:	b948      	cbnz	r0, 80074c2 <__lshift+0x3e>
 80074ae:	4602      	mov	r2, r0
 80074b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80074b4:	4b29      	ldr	r3, [pc, #164]	; (800755c <__lshift+0xd8>)
 80074b6:	482a      	ldr	r0, [pc, #168]	; (8007560 <__lshift+0xdc>)
 80074b8:	f000 fcc8 	bl	8007e4c <__assert_func>
 80074bc:	3101      	adds	r1, #1
 80074be:	005b      	lsls	r3, r3, #1
 80074c0:	e7ee      	b.n	80074a0 <__lshift+0x1c>
 80074c2:	2300      	movs	r3, #0
 80074c4:	f100 0114 	add.w	r1, r0, #20
 80074c8:	f100 0210 	add.w	r2, r0, #16
 80074cc:	4618      	mov	r0, r3
 80074ce:	4553      	cmp	r3, sl
 80074d0:	db37      	blt.n	8007542 <__lshift+0xbe>
 80074d2:	6920      	ldr	r0, [r4, #16]
 80074d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80074d8:	f104 0314 	add.w	r3, r4, #20
 80074dc:	f019 091f 	ands.w	r9, r9, #31
 80074e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80074e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80074e8:	d02f      	beq.n	800754a <__lshift+0xc6>
 80074ea:	468a      	mov	sl, r1
 80074ec:	f04f 0c00 	mov.w	ip, #0
 80074f0:	f1c9 0e20 	rsb	lr, r9, #32
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	fa02 f209 	lsl.w	r2, r2, r9
 80074fa:	ea42 020c 	orr.w	r2, r2, ip
 80074fe:	f84a 2b04 	str.w	r2, [sl], #4
 8007502:	f853 2b04 	ldr.w	r2, [r3], #4
 8007506:	4298      	cmp	r0, r3
 8007508:	fa22 fc0e 	lsr.w	ip, r2, lr
 800750c:	d8f2      	bhi.n	80074f4 <__lshift+0x70>
 800750e:	1b03      	subs	r3, r0, r4
 8007510:	3b15      	subs	r3, #21
 8007512:	f023 0303 	bic.w	r3, r3, #3
 8007516:	3304      	adds	r3, #4
 8007518:	f104 0215 	add.w	r2, r4, #21
 800751c:	4290      	cmp	r0, r2
 800751e:	bf38      	it	cc
 8007520:	2304      	movcc	r3, #4
 8007522:	f841 c003 	str.w	ip, [r1, r3]
 8007526:	f1bc 0f00 	cmp.w	ip, #0
 800752a:	d001      	beq.n	8007530 <__lshift+0xac>
 800752c:	f108 0602 	add.w	r6, r8, #2
 8007530:	3e01      	subs	r6, #1
 8007532:	4638      	mov	r0, r7
 8007534:	4621      	mov	r1, r4
 8007536:	612e      	str	r6, [r5, #16]
 8007538:	f7ff fd8c 	bl	8007054 <_Bfree>
 800753c:	4628      	mov	r0, r5
 800753e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007542:	f842 0f04 	str.w	r0, [r2, #4]!
 8007546:	3301      	adds	r3, #1
 8007548:	e7c1      	b.n	80074ce <__lshift+0x4a>
 800754a:	3904      	subs	r1, #4
 800754c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007550:	4298      	cmp	r0, r3
 8007552:	f841 2f04 	str.w	r2, [r1, #4]!
 8007556:	d8f9      	bhi.n	800754c <__lshift+0xc8>
 8007558:	e7ea      	b.n	8007530 <__lshift+0xac>
 800755a:	bf00      	nop
 800755c:	08009528 	.word	0x08009528
 8007560:	080095b4 	.word	0x080095b4

08007564 <__mcmp>:
 8007564:	4603      	mov	r3, r0
 8007566:	690a      	ldr	r2, [r1, #16]
 8007568:	6900      	ldr	r0, [r0, #16]
 800756a:	b530      	push	{r4, r5, lr}
 800756c:	1a80      	subs	r0, r0, r2
 800756e:	d10d      	bne.n	800758c <__mcmp+0x28>
 8007570:	3314      	adds	r3, #20
 8007572:	3114      	adds	r1, #20
 8007574:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007578:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800757c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007580:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007584:	4295      	cmp	r5, r2
 8007586:	d002      	beq.n	800758e <__mcmp+0x2a>
 8007588:	d304      	bcc.n	8007594 <__mcmp+0x30>
 800758a:	2001      	movs	r0, #1
 800758c:	bd30      	pop	{r4, r5, pc}
 800758e:	42a3      	cmp	r3, r4
 8007590:	d3f4      	bcc.n	800757c <__mcmp+0x18>
 8007592:	e7fb      	b.n	800758c <__mcmp+0x28>
 8007594:	f04f 30ff 	mov.w	r0, #4294967295
 8007598:	e7f8      	b.n	800758c <__mcmp+0x28>
	...

0800759c <__mdiff>:
 800759c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a0:	460d      	mov	r5, r1
 80075a2:	4607      	mov	r7, r0
 80075a4:	4611      	mov	r1, r2
 80075a6:	4628      	mov	r0, r5
 80075a8:	4614      	mov	r4, r2
 80075aa:	f7ff ffdb 	bl	8007564 <__mcmp>
 80075ae:	1e06      	subs	r6, r0, #0
 80075b0:	d111      	bne.n	80075d6 <__mdiff+0x3a>
 80075b2:	4631      	mov	r1, r6
 80075b4:	4638      	mov	r0, r7
 80075b6:	f7ff fd0d 	bl	8006fd4 <_Balloc>
 80075ba:	4602      	mov	r2, r0
 80075bc:	b928      	cbnz	r0, 80075ca <__mdiff+0x2e>
 80075be:	f240 2132 	movw	r1, #562	; 0x232
 80075c2:	4b3a      	ldr	r3, [pc, #232]	; (80076ac <__mdiff+0x110>)
 80075c4:	483a      	ldr	r0, [pc, #232]	; (80076b0 <__mdiff+0x114>)
 80075c6:	f000 fc41 	bl	8007e4c <__assert_func>
 80075ca:	2301      	movs	r3, #1
 80075cc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80075d0:	4610      	mov	r0, r2
 80075d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075d6:	bfa4      	itt	ge
 80075d8:	4623      	movge	r3, r4
 80075da:	462c      	movge	r4, r5
 80075dc:	4638      	mov	r0, r7
 80075de:	6861      	ldr	r1, [r4, #4]
 80075e0:	bfa6      	itte	ge
 80075e2:	461d      	movge	r5, r3
 80075e4:	2600      	movge	r6, #0
 80075e6:	2601      	movlt	r6, #1
 80075e8:	f7ff fcf4 	bl	8006fd4 <_Balloc>
 80075ec:	4602      	mov	r2, r0
 80075ee:	b918      	cbnz	r0, 80075f8 <__mdiff+0x5c>
 80075f0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80075f4:	4b2d      	ldr	r3, [pc, #180]	; (80076ac <__mdiff+0x110>)
 80075f6:	e7e5      	b.n	80075c4 <__mdiff+0x28>
 80075f8:	f102 0814 	add.w	r8, r2, #20
 80075fc:	46c2      	mov	sl, r8
 80075fe:	f04f 0c00 	mov.w	ip, #0
 8007602:	6927      	ldr	r7, [r4, #16]
 8007604:	60c6      	str	r6, [r0, #12]
 8007606:	692e      	ldr	r6, [r5, #16]
 8007608:	f104 0014 	add.w	r0, r4, #20
 800760c:	f105 0914 	add.w	r9, r5, #20
 8007610:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007614:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007618:	3410      	adds	r4, #16
 800761a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800761e:	f859 3b04 	ldr.w	r3, [r9], #4
 8007622:	fa1f f18b 	uxth.w	r1, fp
 8007626:	448c      	add	ip, r1
 8007628:	b299      	uxth	r1, r3
 800762a:	0c1b      	lsrs	r3, r3, #16
 800762c:	ebac 0101 	sub.w	r1, ip, r1
 8007630:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007634:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007638:	b289      	uxth	r1, r1
 800763a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800763e:	454e      	cmp	r6, r9
 8007640:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007644:	f84a 3b04 	str.w	r3, [sl], #4
 8007648:	d8e7      	bhi.n	800761a <__mdiff+0x7e>
 800764a:	1b73      	subs	r3, r6, r5
 800764c:	3b15      	subs	r3, #21
 800764e:	f023 0303 	bic.w	r3, r3, #3
 8007652:	3515      	adds	r5, #21
 8007654:	3304      	adds	r3, #4
 8007656:	42ae      	cmp	r6, r5
 8007658:	bf38      	it	cc
 800765a:	2304      	movcc	r3, #4
 800765c:	4418      	add	r0, r3
 800765e:	4443      	add	r3, r8
 8007660:	461e      	mov	r6, r3
 8007662:	4605      	mov	r5, r0
 8007664:	4575      	cmp	r5, lr
 8007666:	d30e      	bcc.n	8007686 <__mdiff+0xea>
 8007668:	f10e 0103 	add.w	r1, lr, #3
 800766c:	1a09      	subs	r1, r1, r0
 800766e:	f021 0103 	bic.w	r1, r1, #3
 8007672:	3803      	subs	r0, #3
 8007674:	4586      	cmp	lr, r0
 8007676:	bf38      	it	cc
 8007678:	2100      	movcc	r1, #0
 800767a:	4419      	add	r1, r3
 800767c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007680:	b18b      	cbz	r3, 80076a6 <__mdiff+0x10a>
 8007682:	6117      	str	r7, [r2, #16]
 8007684:	e7a4      	b.n	80075d0 <__mdiff+0x34>
 8007686:	f855 8b04 	ldr.w	r8, [r5], #4
 800768a:	fa1f f188 	uxth.w	r1, r8
 800768e:	4461      	add	r1, ip
 8007690:	140c      	asrs	r4, r1, #16
 8007692:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007696:	b289      	uxth	r1, r1
 8007698:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800769c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80076a0:	f846 1b04 	str.w	r1, [r6], #4
 80076a4:	e7de      	b.n	8007664 <__mdiff+0xc8>
 80076a6:	3f01      	subs	r7, #1
 80076a8:	e7e8      	b.n	800767c <__mdiff+0xe0>
 80076aa:	bf00      	nop
 80076ac:	08009528 	.word	0x08009528
 80076b0:	080095b4 	.word	0x080095b4

080076b4 <__ulp>:
 80076b4:	4b11      	ldr	r3, [pc, #68]	; (80076fc <__ulp+0x48>)
 80076b6:	400b      	ands	r3, r1
 80076b8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	dd02      	ble.n	80076c6 <__ulp+0x12>
 80076c0:	2000      	movs	r0, #0
 80076c2:	4619      	mov	r1, r3
 80076c4:	4770      	bx	lr
 80076c6:	425b      	negs	r3, r3
 80076c8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80076cc:	f04f 0000 	mov.w	r0, #0
 80076d0:	f04f 0100 	mov.w	r1, #0
 80076d4:	ea4f 5223 	mov.w	r2, r3, asr #20
 80076d8:	da04      	bge.n	80076e4 <__ulp+0x30>
 80076da:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80076de:	fa43 f102 	asr.w	r1, r3, r2
 80076e2:	4770      	bx	lr
 80076e4:	f1a2 0314 	sub.w	r3, r2, #20
 80076e8:	2b1e      	cmp	r3, #30
 80076ea:	bfd6      	itet	le
 80076ec:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80076f0:	2301      	movgt	r3, #1
 80076f2:	fa22 f303 	lsrle.w	r3, r2, r3
 80076f6:	4618      	mov	r0, r3
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	7ff00000 	.word	0x7ff00000

08007700 <__b2d>:
 8007700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007704:	6907      	ldr	r7, [r0, #16]
 8007706:	f100 0914 	add.w	r9, r0, #20
 800770a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800770e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007712:	f1a7 0804 	sub.w	r8, r7, #4
 8007716:	4630      	mov	r0, r6
 8007718:	f7ff fd4e 	bl	80071b8 <__hi0bits>
 800771c:	f1c0 0320 	rsb	r3, r0, #32
 8007720:	280a      	cmp	r0, #10
 8007722:	600b      	str	r3, [r1, #0]
 8007724:	491f      	ldr	r1, [pc, #124]	; (80077a4 <__b2d+0xa4>)
 8007726:	dc17      	bgt.n	8007758 <__b2d+0x58>
 8007728:	45c1      	cmp	r9, r8
 800772a:	bf28      	it	cs
 800772c:	2200      	movcs	r2, #0
 800772e:	f1c0 0c0b 	rsb	ip, r0, #11
 8007732:	fa26 f30c 	lsr.w	r3, r6, ip
 8007736:	bf38      	it	cc
 8007738:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800773c:	ea43 0501 	orr.w	r5, r3, r1
 8007740:	f100 0315 	add.w	r3, r0, #21
 8007744:	fa06 f303 	lsl.w	r3, r6, r3
 8007748:	fa22 f20c 	lsr.w	r2, r2, ip
 800774c:	ea43 0402 	orr.w	r4, r3, r2
 8007750:	4620      	mov	r0, r4
 8007752:	4629      	mov	r1, r5
 8007754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007758:	45c1      	cmp	r9, r8
 800775a:	bf2e      	itee	cs
 800775c:	2200      	movcs	r2, #0
 800775e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007762:	f1a7 0808 	subcc.w	r8, r7, #8
 8007766:	f1b0 030b 	subs.w	r3, r0, #11
 800776a:	d016      	beq.n	800779a <__b2d+0x9a>
 800776c:	f1c3 0720 	rsb	r7, r3, #32
 8007770:	fa22 f107 	lsr.w	r1, r2, r7
 8007774:	45c8      	cmp	r8, r9
 8007776:	fa06 f603 	lsl.w	r6, r6, r3
 800777a:	ea46 0601 	orr.w	r6, r6, r1
 800777e:	bf94      	ite	ls
 8007780:	2100      	movls	r1, #0
 8007782:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007786:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800778a:	fa02 f003 	lsl.w	r0, r2, r3
 800778e:	40f9      	lsrs	r1, r7
 8007790:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007794:	ea40 0401 	orr.w	r4, r0, r1
 8007798:	e7da      	b.n	8007750 <__b2d+0x50>
 800779a:	4614      	mov	r4, r2
 800779c:	ea46 0501 	orr.w	r5, r6, r1
 80077a0:	e7d6      	b.n	8007750 <__b2d+0x50>
 80077a2:	bf00      	nop
 80077a4:	3ff00000 	.word	0x3ff00000

080077a8 <__d2b>:
 80077a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80077ac:	2101      	movs	r1, #1
 80077ae:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80077b2:	4690      	mov	r8, r2
 80077b4:	461d      	mov	r5, r3
 80077b6:	f7ff fc0d 	bl	8006fd4 <_Balloc>
 80077ba:	4604      	mov	r4, r0
 80077bc:	b930      	cbnz	r0, 80077cc <__d2b+0x24>
 80077be:	4602      	mov	r2, r0
 80077c0:	f240 310a 	movw	r1, #778	; 0x30a
 80077c4:	4b24      	ldr	r3, [pc, #144]	; (8007858 <__d2b+0xb0>)
 80077c6:	4825      	ldr	r0, [pc, #148]	; (800785c <__d2b+0xb4>)
 80077c8:	f000 fb40 	bl	8007e4c <__assert_func>
 80077cc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80077d0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80077d4:	bb2d      	cbnz	r5, 8007822 <__d2b+0x7a>
 80077d6:	9301      	str	r3, [sp, #4]
 80077d8:	f1b8 0300 	subs.w	r3, r8, #0
 80077dc:	d026      	beq.n	800782c <__d2b+0x84>
 80077de:	4668      	mov	r0, sp
 80077e0:	9300      	str	r3, [sp, #0]
 80077e2:	f7ff fd09 	bl	80071f8 <__lo0bits>
 80077e6:	9900      	ldr	r1, [sp, #0]
 80077e8:	b1f0      	cbz	r0, 8007828 <__d2b+0x80>
 80077ea:	9a01      	ldr	r2, [sp, #4]
 80077ec:	f1c0 0320 	rsb	r3, r0, #32
 80077f0:	fa02 f303 	lsl.w	r3, r2, r3
 80077f4:	430b      	orrs	r3, r1
 80077f6:	40c2      	lsrs	r2, r0
 80077f8:	6163      	str	r3, [r4, #20]
 80077fa:	9201      	str	r2, [sp, #4]
 80077fc:	9b01      	ldr	r3, [sp, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	bf14      	ite	ne
 8007802:	2102      	movne	r1, #2
 8007804:	2101      	moveq	r1, #1
 8007806:	61a3      	str	r3, [r4, #24]
 8007808:	6121      	str	r1, [r4, #16]
 800780a:	b1c5      	cbz	r5, 800783e <__d2b+0x96>
 800780c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007810:	4405      	add	r5, r0
 8007812:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007816:	603d      	str	r5, [r7, #0]
 8007818:	6030      	str	r0, [r6, #0]
 800781a:	4620      	mov	r0, r4
 800781c:	b002      	add	sp, #8
 800781e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007822:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007826:	e7d6      	b.n	80077d6 <__d2b+0x2e>
 8007828:	6161      	str	r1, [r4, #20]
 800782a:	e7e7      	b.n	80077fc <__d2b+0x54>
 800782c:	a801      	add	r0, sp, #4
 800782e:	f7ff fce3 	bl	80071f8 <__lo0bits>
 8007832:	2101      	movs	r1, #1
 8007834:	9b01      	ldr	r3, [sp, #4]
 8007836:	6121      	str	r1, [r4, #16]
 8007838:	6163      	str	r3, [r4, #20]
 800783a:	3020      	adds	r0, #32
 800783c:	e7e5      	b.n	800780a <__d2b+0x62>
 800783e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007842:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007846:	6038      	str	r0, [r7, #0]
 8007848:	6918      	ldr	r0, [r3, #16]
 800784a:	f7ff fcb5 	bl	80071b8 <__hi0bits>
 800784e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007852:	6031      	str	r1, [r6, #0]
 8007854:	e7e1      	b.n	800781a <__d2b+0x72>
 8007856:	bf00      	nop
 8007858:	08009528 	.word	0x08009528
 800785c:	080095b4 	.word	0x080095b4

08007860 <__ratio>:
 8007860:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007864:	4688      	mov	r8, r1
 8007866:	4669      	mov	r1, sp
 8007868:	4681      	mov	r9, r0
 800786a:	f7ff ff49 	bl	8007700 <__b2d>
 800786e:	460f      	mov	r7, r1
 8007870:	4604      	mov	r4, r0
 8007872:	460d      	mov	r5, r1
 8007874:	4640      	mov	r0, r8
 8007876:	a901      	add	r1, sp, #4
 8007878:	f7ff ff42 	bl	8007700 <__b2d>
 800787c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007880:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007884:	468b      	mov	fp, r1
 8007886:	eba3 0c02 	sub.w	ip, r3, r2
 800788a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800788e:	1a9b      	subs	r3, r3, r2
 8007890:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007894:	2b00      	cmp	r3, #0
 8007896:	bfd5      	itete	le
 8007898:	460a      	movle	r2, r1
 800789a:	462a      	movgt	r2, r5
 800789c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80078a0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80078a4:	bfd8      	it	le
 80078a6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80078aa:	465b      	mov	r3, fp
 80078ac:	4602      	mov	r2, r0
 80078ae:	4639      	mov	r1, r7
 80078b0:	4620      	mov	r0, r4
 80078b2:	f7f8 ff3b 	bl	800072c <__aeabi_ddiv>
 80078b6:	b003      	add	sp, #12
 80078b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080078bc <__copybits>:
 80078bc:	3901      	subs	r1, #1
 80078be:	b570      	push	{r4, r5, r6, lr}
 80078c0:	1149      	asrs	r1, r1, #5
 80078c2:	6914      	ldr	r4, [r2, #16]
 80078c4:	3101      	adds	r1, #1
 80078c6:	f102 0314 	add.w	r3, r2, #20
 80078ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80078ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80078d2:	1f05      	subs	r5, r0, #4
 80078d4:	42a3      	cmp	r3, r4
 80078d6:	d30c      	bcc.n	80078f2 <__copybits+0x36>
 80078d8:	1aa3      	subs	r3, r4, r2
 80078da:	3b11      	subs	r3, #17
 80078dc:	f023 0303 	bic.w	r3, r3, #3
 80078e0:	3211      	adds	r2, #17
 80078e2:	42a2      	cmp	r2, r4
 80078e4:	bf88      	it	hi
 80078e6:	2300      	movhi	r3, #0
 80078e8:	4418      	add	r0, r3
 80078ea:	2300      	movs	r3, #0
 80078ec:	4288      	cmp	r0, r1
 80078ee:	d305      	bcc.n	80078fc <__copybits+0x40>
 80078f0:	bd70      	pop	{r4, r5, r6, pc}
 80078f2:	f853 6b04 	ldr.w	r6, [r3], #4
 80078f6:	f845 6f04 	str.w	r6, [r5, #4]!
 80078fa:	e7eb      	b.n	80078d4 <__copybits+0x18>
 80078fc:	f840 3b04 	str.w	r3, [r0], #4
 8007900:	e7f4      	b.n	80078ec <__copybits+0x30>

08007902 <__any_on>:
 8007902:	f100 0214 	add.w	r2, r0, #20
 8007906:	6900      	ldr	r0, [r0, #16]
 8007908:	114b      	asrs	r3, r1, #5
 800790a:	4298      	cmp	r0, r3
 800790c:	b510      	push	{r4, lr}
 800790e:	db11      	blt.n	8007934 <__any_on+0x32>
 8007910:	dd0a      	ble.n	8007928 <__any_on+0x26>
 8007912:	f011 011f 	ands.w	r1, r1, #31
 8007916:	d007      	beq.n	8007928 <__any_on+0x26>
 8007918:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800791c:	fa24 f001 	lsr.w	r0, r4, r1
 8007920:	fa00 f101 	lsl.w	r1, r0, r1
 8007924:	428c      	cmp	r4, r1
 8007926:	d10b      	bne.n	8007940 <__any_on+0x3e>
 8007928:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800792c:	4293      	cmp	r3, r2
 800792e:	d803      	bhi.n	8007938 <__any_on+0x36>
 8007930:	2000      	movs	r0, #0
 8007932:	bd10      	pop	{r4, pc}
 8007934:	4603      	mov	r3, r0
 8007936:	e7f7      	b.n	8007928 <__any_on+0x26>
 8007938:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800793c:	2900      	cmp	r1, #0
 800793e:	d0f5      	beq.n	800792c <__any_on+0x2a>
 8007940:	2001      	movs	r0, #1
 8007942:	e7f6      	b.n	8007932 <__any_on+0x30>

08007944 <_calloc_r>:
 8007944:	b570      	push	{r4, r5, r6, lr}
 8007946:	fba1 5402 	umull	r5, r4, r1, r2
 800794a:	b934      	cbnz	r4, 800795a <_calloc_r+0x16>
 800794c:	4629      	mov	r1, r5
 800794e:	f000 f875 	bl	8007a3c <_malloc_r>
 8007952:	4606      	mov	r6, r0
 8007954:	b928      	cbnz	r0, 8007962 <_calloc_r+0x1e>
 8007956:	4630      	mov	r0, r6
 8007958:	bd70      	pop	{r4, r5, r6, pc}
 800795a:	220c      	movs	r2, #12
 800795c:	2600      	movs	r6, #0
 800795e:	6002      	str	r2, [r0, #0]
 8007960:	e7f9      	b.n	8007956 <_calloc_r+0x12>
 8007962:	462a      	mov	r2, r5
 8007964:	4621      	mov	r1, r4
 8007966:	f7fc fbf1 	bl	800414c <memset>
 800796a:	e7f4      	b.n	8007956 <_calloc_r+0x12>

0800796c <_free_r>:
 800796c:	b538      	push	{r3, r4, r5, lr}
 800796e:	4605      	mov	r5, r0
 8007970:	2900      	cmp	r1, #0
 8007972:	d040      	beq.n	80079f6 <_free_r+0x8a>
 8007974:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007978:	1f0c      	subs	r4, r1, #4
 800797a:	2b00      	cmp	r3, #0
 800797c:	bfb8      	it	lt
 800797e:	18e4      	addlt	r4, r4, r3
 8007980:	f000 faae 	bl	8007ee0 <__malloc_lock>
 8007984:	4a1c      	ldr	r2, [pc, #112]	; (80079f8 <_free_r+0x8c>)
 8007986:	6813      	ldr	r3, [r2, #0]
 8007988:	b933      	cbnz	r3, 8007998 <_free_r+0x2c>
 800798a:	6063      	str	r3, [r4, #4]
 800798c:	6014      	str	r4, [r2, #0]
 800798e:	4628      	mov	r0, r5
 8007990:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007994:	f000 baaa 	b.w	8007eec <__malloc_unlock>
 8007998:	42a3      	cmp	r3, r4
 800799a:	d908      	bls.n	80079ae <_free_r+0x42>
 800799c:	6820      	ldr	r0, [r4, #0]
 800799e:	1821      	adds	r1, r4, r0
 80079a0:	428b      	cmp	r3, r1
 80079a2:	bf01      	itttt	eq
 80079a4:	6819      	ldreq	r1, [r3, #0]
 80079a6:	685b      	ldreq	r3, [r3, #4]
 80079a8:	1809      	addeq	r1, r1, r0
 80079aa:	6021      	streq	r1, [r4, #0]
 80079ac:	e7ed      	b.n	800798a <_free_r+0x1e>
 80079ae:	461a      	mov	r2, r3
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	b10b      	cbz	r3, 80079b8 <_free_r+0x4c>
 80079b4:	42a3      	cmp	r3, r4
 80079b6:	d9fa      	bls.n	80079ae <_free_r+0x42>
 80079b8:	6811      	ldr	r1, [r2, #0]
 80079ba:	1850      	adds	r0, r2, r1
 80079bc:	42a0      	cmp	r0, r4
 80079be:	d10b      	bne.n	80079d8 <_free_r+0x6c>
 80079c0:	6820      	ldr	r0, [r4, #0]
 80079c2:	4401      	add	r1, r0
 80079c4:	1850      	adds	r0, r2, r1
 80079c6:	4283      	cmp	r3, r0
 80079c8:	6011      	str	r1, [r2, #0]
 80079ca:	d1e0      	bne.n	800798e <_free_r+0x22>
 80079cc:	6818      	ldr	r0, [r3, #0]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	4401      	add	r1, r0
 80079d2:	6011      	str	r1, [r2, #0]
 80079d4:	6053      	str	r3, [r2, #4]
 80079d6:	e7da      	b.n	800798e <_free_r+0x22>
 80079d8:	d902      	bls.n	80079e0 <_free_r+0x74>
 80079da:	230c      	movs	r3, #12
 80079dc:	602b      	str	r3, [r5, #0]
 80079de:	e7d6      	b.n	800798e <_free_r+0x22>
 80079e0:	6820      	ldr	r0, [r4, #0]
 80079e2:	1821      	adds	r1, r4, r0
 80079e4:	428b      	cmp	r3, r1
 80079e6:	bf01      	itttt	eq
 80079e8:	6819      	ldreq	r1, [r3, #0]
 80079ea:	685b      	ldreq	r3, [r3, #4]
 80079ec:	1809      	addeq	r1, r1, r0
 80079ee:	6021      	streq	r1, [r4, #0]
 80079f0:	6063      	str	r3, [r4, #4]
 80079f2:	6054      	str	r4, [r2, #4]
 80079f4:	e7cb      	b.n	800798e <_free_r+0x22>
 80079f6:	bd38      	pop	{r3, r4, r5, pc}
 80079f8:	200002dc 	.word	0x200002dc

080079fc <sbrk_aligned>:
 80079fc:	b570      	push	{r4, r5, r6, lr}
 80079fe:	4e0e      	ldr	r6, [pc, #56]	; (8007a38 <sbrk_aligned+0x3c>)
 8007a00:	460c      	mov	r4, r1
 8007a02:	6831      	ldr	r1, [r6, #0]
 8007a04:	4605      	mov	r5, r0
 8007a06:	b911      	cbnz	r1, 8007a0e <sbrk_aligned+0x12>
 8007a08:	f000 f9ee 	bl	8007de8 <_sbrk_r>
 8007a0c:	6030      	str	r0, [r6, #0]
 8007a0e:	4621      	mov	r1, r4
 8007a10:	4628      	mov	r0, r5
 8007a12:	f000 f9e9 	bl	8007de8 <_sbrk_r>
 8007a16:	1c43      	adds	r3, r0, #1
 8007a18:	d00a      	beq.n	8007a30 <sbrk_aligned+0x34>
 8007a1a:	1cc4      	adds	r4, r0, #3
 8007a1c:	f024 0403 	bic.w	r4, r4, #3
 8007a20:	42a0      	cmp	r0, r4
 8007a22:	d007      	beq.n	8007a34 <sbrk_aligned+0x38>
 8007a24:	1a21      	subs	r1, r4, r0
 8007a26:	4628      	mov	r0, r5
 8007a28:	f000 f9de 	bl	8007de8 <_sbrk_r>
 8007a2c:	3001      	adds	r0, #1
 8007a2e:	d101      	bne.n	8007a34 <sbrk_aligned+0x38>
 8007a30:	f04f 34ff 	mov.w	r4, #4294967295
 8007a34:	4620      	mov	r0, r4
 8007a36:	bd70      	pop	{r4, r5, r6, pc}
 8007a38:	200002e0 	.word	0x200002e0

08007a3c <_malloc_r>:
 8007a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a40:	1ccd      	adds	r5, r1, #3
 8007a42:	f025 0503 	bic.w	r5, r5, #3
 8007a46:	3508      	adds	r5, #8
 8007a48:	2d0c      	cmp	r5, #12
 8007a4a:	bf38      	it	cc
 8007a4c:	250c      	movcc	r5, #12
 8007a4e:	2d00      	cmp	r5, #0
 8007a50:	4607      	mov	r7, r0
 8007a52:	db01      	blt.n	8007a58 <_malloc_r+0x1c>
 8007a54:	42a9      	cmp	r1, r5
 8007a56:	d905      	bls.n	8007a64 <_malloc_r+0x28>
 8007a58:	230c      	movs	r3, #12
 8007a5a:	2600      	movs	r6, #0
 8007a5c:	603b      	str	r3, [r7, #0]
 8007a5e:	4630      	mov	r0, r6
 8007a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a64:	4e2e      	ldr	r6, [pc, #184]	; (8007b20 <_malloc_r+0xe4>)
 8007a66:	f000 fa3b 	bl	8007ee0 <__malloc_lock>
 8007a6a:	6833      	ldr	r3, [r6, #0]
 8007a6c:	461c      	mov	r4, r3
 8007a6e:	bb34      	cbnz	r4, 8007abe <_malloc_r+0x82>
 8007a70:	4629      	mov	r1, r5
 8007a72:	4638      	mov	r0, r7
 8007a74:	f7ff ffc2 	bl	80079fc <sbrk_aligned>
 8007a78:	1c43      	adds	r3, r0, #1
 8007a7a:	4604      	mov	r4, r0
 8007a7c:	d14d      	bne.n	8007b1a <_malloc_r+0xde>
 8007a7e:	6834      	ldr	r4, [r6, #0]
 8007a80:	4626      	mov	r6, r4
 8007a82:	2e00      	cmp	r6, #0
 8007a84:	d140      	bne.n	8007b08 <_malloc_r+0xcc>
 8007a86:	6823      	ldr	r3, [r4, #0]
 8007a88:	4631      	mov	r1, r6
 8007a8a:	4638      	mov	r0, r7
 8007a8c:	eb04 0803 	add.w	r8, r4, r3
 8007a90:	f000 f9aa 	bl	8007de8 <_sbrk_r>
 8007a94:	4580      	cmp	r8, r0
 8007a96:	d13a      	bne.n	8007b0e <_malloc_r+0xd2>
 8007a98:	6821      	ldr	r1, [r4, #0]
 8007a9a:	3503      	adds	r5, #3
 8007a9c:	1a6d      	subs	r5, r5, r1
 8007a9e:	f025 0503 	bic.w	r5, r5, #3
 8007aa2:	3508      	adds	r5, #8
 8007aa4:	2d0c      	cmp	r5, #12
 8007aa6:	bf38      	it	cc
 8007aa8:	250c      	movcc	r5, #12
 8007aaa:	4638      	mov	r0, r7
 8007aac:	4629      	mov	r1, r5
 8007aae:	f7ff ffa5 	bl	80079fc <sbrk_aligned>
 8007ab2:	3001      	adds	r0, #1
 8007ab4:	d02b      	beq.n	8007b0e <_malloc_r+0xd2>
 8007ab6:	6823      	ldr	r3, [r4, #0]
 8007ab8:	442b      	add	r3, r5
 8007aba:	6023      	str	r3, [r4, #0]
 8007abc:	e00e      	b.n	8007adc <_malloc_r+0xa0>
 8007abe:	6822      	ldr	r2, [r4, #0]
 8007ac0:	1b52      	subs	r2, r2, r5
 8007ac2:	d41e      	bmi.n	8007b02 <_malloc_r+0xc6>
 8007ac4:	2a0b      	cmp	r2, #11
 8007ac6:	d916      	bls.n	8007af6 <_malloc_r+0xba>
 8007ac8:	1961      	adds	r1, r4, r5
 8007aca:	42a3      	cmp	r3, r4
 8007acc:	6025      	str	r5, [r4, #0]
 8007ace:	bf18      	it	ne
 8007ad0:	6059      	strne	r1, [r3, #4]
 8007ad2:	6863      	ldr	r3, [r4, #4]
 8007ad4:	bf08      	it	eq
 8007ad6:	6031      	streq	r1, [r6, #0]
 8007ad8:	5162      	str	r2, [r4, r5]
 8007ada:	604b      	str	r3, [r1, #4]
 8007adc:	4638      	mov	r0, r7
 8007ade:	f104 060b 	add.w	r6, r4, #11
 8007ae2:	f000 fa03 	bl	8007eec <__malloc_unlock>
 8007ae6:	f026 0607 	bic.w	r6, r6, #7
 8007aea:	1d23      	adds	r3, r4, #4
 8007aec:	1af2      	subs	r2, r6, r3
 8007aee:	d0b6      	beq.n	8007a5e <_malloc_r+0x22>
 8007af0:	1b9b      	subs	r3, r3, r6
 8007af2:	50a3      	str	r3, [r4, r2]
 8007af4:	e7b3      	b.n	8007a5e <_malloc_r+0x22>
 8007af6:	6862      	ldr	r2, [r4, #4]
 8007af8:	42a3      	cmp	r3, r4
 8007afa:	bf0c      	ite	eq
 8007afc:	6032      	streq	r2, [r6, #0]
 8007afe:	605a      	strne	r2, [r3, #4]
 8007b00:	e7ec      	b.n	8007adc <_malloc_r+0xa0>
 8007b02:	4623      	mov	r3, r4
 8007b04:	6864      	ldr	r4, [r4, #4]
 8007b06:	e7b2      	b.n	8007a6e <_malloc_r+0x32>
 8007b08:	4634      	mov	r4, r6
 8007b0a:	6876      	ldr	r6, [r6, #4]
 8007b0c:	e7b9      	b.n	8007a82 <_malloc_r+0x46>
 8007b0e:	230c      	movs	r3, #12
 8007b10:	4638      	mov	r0, r7
 8007b12:	603b      	str	r3, [r7, #0]
 8007b14:	f000 f9ea 	bl	8007eec <__malloc_unlock>
 8007b18:	e7a1      	b.n	8007a5e <_malloc_r+0x22>
 8007b1a:	6025      	str	r5, [r4, #0]
 8007b1c:	e7de      	b.n	8007adc <_malloc_r+0xa0>
 8007b1e:	bf00      	nop
 8007b20:	200002dc 	.word	0x200002dc

08007b24 <__ssputs_r>:
 8007b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b28:	688e      	ldr	r6, [r1, #8]
 8007b2a:	4682      	mov	sl, r0
 8007b2c:	429e      	cmp	r6, r3
 8007b2e:	460c      	mov	r4, r1
 8007b30:	4690      	mov	r8, r2
 8007b32:	461f      	mov	r7, r3
 8007b34:	d838      	bhi.n	8007ba8 <__ssputs_r+0x84>
 8007b36:	898a      	ldrh	r2, [r1, #12]
 8007b38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b3c:	d032      	beq.n	8007ba4 <__ssputs_r+0x80>
 8007b3e:	6825      	ldr	r5, [r4, #0]
 8007b40:	6909      	ldr	r1, [r1, #16]
 8007b42:	3301      	adds	r3, #1
 8007b44:	eba5 0901 	sub.w	r9, r5, r1
 8007b48:	6965      	ldr	r5, [r4, #20]
 8007b4a:	444b      	add	r3, r9
 8007b4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b54:	106d      	asrs	r5, r5, #1
 8007b56:	429d      	cmp	r5, r3
 8007b58:	bf38      	it	cc
 8007b5a:	461d      	movcc	r5, r3
 8007b5c:	0553      	lsls	r3, r2, #21
 8007b5e:	d531      	bpl.n	8007bc4 <__ssputs_r+0xa0>
 8007b60:	4629      	mov	r1, r5
 8007b62:	f7ff ff6b 	bl	8007a3c <_malloc_r>
 8007b66:	4606      	mov	r6, r0
 8007b68:	b950      	cbnz	r0, 8007b80 <__ssputs_r+0x5c>
 8007b6a:	230c      	movs	r3, #12
 8007b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b70:	f8ca 3000 	str.w	r3, [sl]
 8007b74:	89a3      	ldrh	r3, [r4, #12]
 8007b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b7a:	81a3      	strh	r3, [r4, #12]
 8007b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b80:	464a      	mov	r2, r9
 8007b82:	6921      	ldr	r1, [r4, #16]
 8007b84:	f7ff fa18 	bl	8006fb8 <memcpy>
 8007b88:	89a3      	ldrh	r3, [r4, #12]
 8007b8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b92:	81a3      	strh	r3, [r4, #12]
 8007b94:	6126      	str	r6, [r4, #16]
 8007b96:	444e      	add	r6, r9
 8007b98:	6026      	str	r6, [r4, #0]
 8007b9a:	463e      	mov	r6, r7
 8007b9c:	6165      	str	r5, [r4, #20]
 8007b9e:	eba5 0509 	sub.w	r5, r5, r9
 8007ba2:	60a5      	str	r5, [r4, #8]
 8007ba4:	42be      	cmp	r6, r7
 8007ba6:	d900      	bls.n	8007baa <__ssputs_r+0x86>
 8007ba8:	463e      	mov	r6, r7
 8007baa:	4632      	mov	r2, r6
 8007bac:	4641      	mov	r1, r8
 8007bae:	6820      	ldr	r0, [r4, #0]
 8007bb0:	f000 f97c 	bl	8007eac <memmove>
 8007bb4:	68a3      	ldr	r3, [r4, #8]
 8007bb6:	2000      	movs	r0, #0
 8007bb8:	1b9b      	subs	r3, r3, r6
 8007bba:	60a3      	str	r3, [r4, #8]
 8007bbc:	6823      	ldr	r3, [r4, #0]
 8007bbe:	4433      	add	r3, r6
 8007bc0:	6023      	str	r3, [r4, #0]
 8007bc2:	e7db      	b.n	8007b7c <__ssputs_r+0x58>
 8007bc4:	462a      	mov	r2, r5
 8007bc6:	f000 f997 	bl	8007ef8 <_realloc_r>
 8007bca:	4606      	mov	r6, r0
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	d1e1      	bne.n	8007b94 <__ssputs_r+0x70>
 8007bd0:	4650      	mov	r0, sl
 8007bd2:	6921      	ldr	r1, [r4, #16]
 8007bd4:	f7ff feca 	bl	800796c <_free_r>
 8007bd8:	e7c7      	b.n	8007b6a <__ssputs_r+0x46>
	...

08007bdc <_svfiprintf_r>:
 8007bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be0:	4698      	mov	r8, r3
 8007be2:	898b      	ldrh	r3, [r1, #12]
 8007be4:	4607      	mov	r7, r0
 8007be6:	061b      	lsls	r3, r3, #24
 8007be8:	460d      	mov	r5, r1
 8007bea:	4614      	mov	r4, r2
 8007bec:	b09d      	sub	sp, #116	; 0x74
 8007bee:	d50e      	bpl.n	8007c0e <_svfiprintf_r+0x32>
 8007bf0:	690b      	ldr	r3, [r1, #16]
 8007bf2:	b963      	cbnz	r3, 8007c0e <_svfiprintf_r+0x32>
 8007bf4:	2140      	movs	r1, #64	; 0x40
 8007bf6:	f7ff ff21 	bl	8007a3c <_malloc_r>
 8007bfa:	6028      	str	r0, [r5, #0]
 8007bfc:	6128      	str	r0, [r5, #16]
 8007bfe:	b920      	cbnz	r0, 8007c0a <_svfiprintf_r+0x2e>
 8007c00:	230c      	movs	r3, #12
 8007c02:	603b      	str	r3, [r7, #0]
 8007c04:	f04f 30ff 	mov.w	r0, #4294967295
 8007c08:	e0d1      	b.n	8007dae <_svfiprintf_r+0x1d2>
 8007c0a:	2340      	movs	r3, #64	; 0x40
 8007c0c:	616b      	str	r3, [r5, #20]
 8007c0e:	2300      	movs	r3, #0
 8007c10:	9309      	str	r3, [sp, #36]	; 0x24
 8007c12:	2320      	movs	r3, #32
 8007c14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c18:	2330      	movs	r3, #48	; 0x30
 8007c1a:	f04f 0901 	mov.w	r9, #1
 8007c1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c22:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007dc8 <_svfiprintf_r+0x1ec>
 8007c26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c2a:	4623      	mov	r3, r4
 8007c2c:	469a      	mov	sl, r3
 8007c2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c32:	b10a      	cbz	r2, 8007c38 <_svfiprintf_r+0x5c>
 8007c34:	2a25      	cmp	r2, #37	; 0x25
 8007c36:	d1f9      	bne.n	8007c2c <_svfiprintf_r+0x50>
 8007c38:	ebba 0b04 	subs.w	fp, sl, r4
 8007c3c:	d00b      	beq.n	8007c56 <_svfiprintf_r+0x7a>
 8007c3e:	465b      	mov	r3, fp
 8007c40:	4622      	mov	r2, r4
 8007c42:	4629      	mov	r1, r5
 8007c44:	4638      	mov	r0, r7
 8007c46:	f7ff ff6d 	bl	8007b24 <__ssputs_r>
 8007c4a:	3001      	adds	r0, #1
 8007c4c:	f000 80aa 	beq.w	8007da4 <_svfiprintf_r+0x1c8>
 8007c50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c52:	445a      	add	r2, fp
 8007c54:	9209      	str	r2, [sp, #36]	; 0x24
 8007c56:	f89a 3000 	ldrb.w	r3, [sl]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	f000 80a2 	beq.w	8007da4 <_svfiprintf_r+0x1c8>
 8007c60:	2300      	movs	r3, #0
 8007c62:	f04f 32ff 	mov.w	r2, #4294967295
 8007c66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c6a:	f10a 0a01 	add.w	sl, sl, #1
 8007c6e:	9304      	str	r3, [sp, #16]
 8007c70:	9307      	str	r3, [sp, #28]
 8007c72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c76:	931a      	str	r3, [sp, #104]	; 0x68
 8007c78:	4654      	mov	r4, sl
 8007c7a:	2205      	movs	r2, #5
 8007c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c80:	4851      	ldr	r0, [pc, #324]	; (8007dc8 <_svfiprintf_r+0x1ec>)
 8007c82:	f7ff f98b 	bl	8006f9c <memchr>
 8007c86:	9a04      	ldr	r2, [sp, #16]
 8007c88:	b9d8      	cbnz	r0, 8007cc2 <_svfiprintf_r+0xe6>
 8007c8a:	06d0      	lsls	r0, r2, #27
 8007c8c:	bf44      	itt	mi
 8007c8e:	2320      	movmi	r3, #32
 8007c90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c94:	0711      	lsls	r1, r2, #28
 8007c96:	bf44      	itt	mi
 8007c98:	232b      	movmi	r3, #43	; 0x2b
 8007c9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c9e:	f89a 3000 	ldrb.w	r3, [sl]
 8007ca2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ca4:	d015      	beq.n	8007cd2 <_svfiprintf_r+0xf6>
 8007ca6:	4654      	mov	r4, sl
 8007ca8:	2000      	movs	r0, #0
 8007caa:	f04f 0c0a 	mov.w	ip, #10
 8007cae:	9a07      	ldr	r2, [sp, #28]
 8007cb0:	4621      	mov	r1, r4
 8007cb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cb6:	3b30      	subs	r3, #48	; 0x30
 8007cb8:	2b09      	cmp	r3, #9
 8007cba:	d94e      	bls.n	8007d5a <_svfiprintf_r+0x17e>
 8007cbc:	b1b0      	cbz	r0, 8007cec <_svfiprintf_r+0x110>
 8007cbe:	9207      	str	r2, [sp, #28]
 8007cc0:	e014      	b.n	8007cec <_svfiprintf_r+0x110>
 8007cc2:	eba0 0308 	sub.w	r3, r0, r8
 8007cc6:	fa09 f303 	lsl.w	r3, r9, r3
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	46a2      	mov	sl, r4
 8007cce:	9304      	str	r3, [sp, #16]
 8007cd0:	e7d2      	b.n	8007c78 <_svfiprintf_r+0x9c>
 8007cd2:	9b03      	ldr	r3, [sp, #12]
 8007cd4:	1d19      	adds	r1, r3, #4
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	9103      	str	r1, [sp, #12]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	bfbb      	ittet	lt
 8007cde:	425b      	neglt	r3, r3
 8007ce0:	f042 0202 	orrlt.w	r2, r2, #2
 8007ce4:	9307      	strge	r3, [sp, #28]
 8007ce6:	9307      	strlt	r3, [sp, #28]
 8007ce8:	bfb8      	it	lt
 8007cea:	9204      	strlt	r2, [sp, #16]
 8007cec:	7823      	ldrb	r3, [r4, #0]
 8007cee:	2b2e      	cmp	r3, #46	; 0x2e
 8007cf0:	d10c      	bne.n	8007d0c <_svfiprintf_r+0x130>
 8007cf2:	7863      	ldrb	r3, [r4, #1]
 8007cf4:	2b2a      	cmp	r3, #42	; 0x2a
 8007cf6:	d135      	bne.n	8007d64 <_svfiprintf_r+0x188>
 8007cf8:	9b03      	ldr	r3, [sp, #12]
 8007cfa:	3402      	adds	r4, #2
 8007cfc:	1d1a      	adds	r2, r3, #4
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	9203      	str	r2, [sp, #12]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	bfb8      	it	lt
 8007d06:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d0a:	9305      	str	r3, [sp, #20]
 8007d0c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007dcc <_svfiprintf_r+0x1f0>
 8007d10:	2203      	movs	r2, #3
 8007d12:	4650      	mov	r0, sl
 8007d14:	7821      	ldrb	r1, [r4, #0]
 8007d16:	f7ff f941 	bl	8006f9c <memchr>
 8007d1a:	b140      	cbz	r0, 8007d2e <_svfiprintf_r+0x152>
 8007d1c:	2340      	movs	r3, #64	; 0x40
 8007d1e:	eba0 000a 	sub.w	r0, r0, sl
 8007d22:	fa03 f000 	lsl.w	r0, r3, r0
 8007d26:	9b04      	ldr	r3, [sp, #16]
 8007d28:	3401      	adds	r4, #1
 8007d2a:	4303      	orrs	r3, r0
 8007d2c:	9304      	str	r3, [sp, #16]
 8007d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d32:	2206      	movs	r2, #6
 8007d34:	4826      	ldr	r0, [pc, #152]	; (8007dd0 <_svfiprintf_r+0x1f4>)
 8007d36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d3a:	f7ff f92f 	bl	8006f9c <memchr>
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	d038      	beq.n	8007db4 <_svfiprintf_r+0x1d8>
 8007d42:	4b24      	ldr	r3, [pc, #144]	; (8007dd4 <_svfiprintf_r+0x1f8>)
 8007d44:	bb1b      	cbnz	r3, 8007d8e <_svfiprintf_r+0x1b2>
 8007d46:	9b03      	ldr	r3, [sp, #12]
 8007d48:	3307      	adds	r3, #7
 8007d4a:	f023 0307 	bic.w	r3, r3, #7
 8007d4e:	3308      	adds	r3, #8
 8007d50:	9303      	str	r3, [sp, #12]
 8007d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d54:	4433      	add	r3, r6
 8007d56:	9309      	str	r3, [sp, #36]	; 0x24
 8007d58:	e767      	b.n	8007c2a <_svfiprintf_r+0x4e>
 8007d5a:	460c      	mov	r4, r1
 8007d5c:	2001      	movs	r0, #1
 8007d5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d62:	e7a5      	b.n	8007cb0 <_svfiprintf_r+0xd4>
 8007d64:	2300      	movs	r3, #0
 8007d66:	f04f 0c0a 	mov.w	ip, #10
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	3401      	adds	r4, #1
 8007d6e:	9305      	str	r3, [sp, #20]
 8007d70:	4620      	mov	r0, r4
 8007d72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d76:	3a30      	subs	r2, #48	; 0x30
 8007d78:	2a09      	cmp	r2, #9
 8007d7a:	d903      	bls.n	8007d84 <_svfiprintf_r+0x1a8>
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d0c5      	beq.n	8007d0c <_svfiprintf_r+0x130>
 8007d80:	9105      	str	r1, [sp, #20]
 8007d82:	e7c3      	b.n	8007d0c <_svfiprintf_r+0x130>
 8007d84:	4604      	mov	r4, r0
 8007d86:	2301      	movs	r3, #1
 8007d88:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d8c:	e7f0      	b.n	8007d70 <_svfiprintf_r+0x194>
 8007d8e:	ab03      	add	r3, sp, #12
 8007d90:	9300      	str	r3, [sp, #0]
 8007d92:	462a      	mov	r2, r5
 8007d94:	4638      	mov	r0, r7
 8007d96:	4b10      	ldr	r3, [pc, #64]	; (8007dd8 <_svfiprintf_r+0x1fc>)
 8007d98:	a904      	add	r1, sp, #16
 8007d9a:	f7fc fa7d 	bl	8004298 <_printf_float>
 8007d9e:	1c42      	adds	r2, r0, #1
 8007da0:	4606      	mov	r6, r0
 8007da2:	d1d6      	bne.n	8007d52 <_svfiprintf_r+0x176>
 8007da4:	89ab      	ldrh	r3, [r5, #12]
 8007da6:	065b      	lsls	r3, r3, #25
 8007da8:	f53f af2c 	bmi.w	8007c04 <_svfiprintf_r+0x28>
 8007dac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dae:	b01d      	add	sp, #116	; 0x74
 8007db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007db4:	ab03      	add	r3, sp, #12
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	462a      	mov	r2, r5
 8007dba:	4638      	mov	r0, r7
 8007dbc:	4b06      	ldr	r3, [pc, #24]	; (8007dd8 <_svfiprintf_r+0x1fc>)
 8007dbe:	a904      	add	r1, sp, #16
 8007dc0:	f7fc fd06 	bl	80047d0 <_printf_i>
 8007dc4:	e7eb      	b.n	8007d9e <_svfiprintf_r+0x1c2>
 8007dc6:	bf00      	nop
 8007dc8:	0800970c 	.word	0x0800970c
 8007dcc:	08009712 	.word	0x08009712
 8007dd0:	08009716 	.word	0x08009716
 8007dd4:	08004299 	.word	0x08004299
 8007dd8:	08007b25 	.word	0x08007b25

08007ddc <nan>:
 8007ddc:	2000      	movs	r0, #0
 8007dde:	4901      	ldr	r1, [pc, #4]	; (8007de4 <nan+0x8>)
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	7ff80000 	.word	0x7ff80000

08007de8 <_sbrk_r>:
 8007de8:	b538      	push	{r3, r4, r5, lr}
 8007dea:	2300      	movs	r3, #0
 8007dec:	4d05      	ldr	r5, [pc, #20]	; (8007e04 <_sbrk_r+0x1c>)
 8007dee:	4604      	mov	r4, r0
 8007df0:	4608      	mov	r0, r1
 8007df2:	602b      	str	r3, [r5, #0]
 8007df4:	f7f9 fc68 	bl	80016c8 <_sbrk>
 8007df8:	1c43      	adds	r3, r0, #1
 8007dfa:	d102      	bne.n	8007e02 <_sbrk_r+0x1a>
 8007dfc:	682b      	ldr	r3, [r5, #0]
 8007dfe:	b103      	cbz	r3, 8007e02 <_sbrk_r+0x1a>
 8007e00:	6023      	str	r3, [r4, #0]
 8007e02:	bd38      	pop	{r3, r4, r5, pc}
 8007e04:	200002e4 	.word	0x200002e4

08007e08 <strncmp>:
 8007e08:	4603      	mov	r3, r0
 8007e0a:	b510      	push	{r4, lr}
 8007e0c:	b172      	cbz	r2, 8007e2c <strncmp+0x24>
 8007e0e:	3901      	subs	r1, #1
 8007e10:	1884      	adds	r4, r0, r2
 8007e12:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007e16:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007e1a:	4290      	cmp	r0, r2
 8007e1c:	d101      	bne.n	8007e22 <strncmp+0x1a>
 8007e1e:	42a3      	cmp	r3, r4
 8007e20:	d101      	bne.n	8007e26 <strncmp+0x1e>
 8007e22:	1a80      	subs	r0, r0, r2
 8007e24:	bd10      	pop	{r4, pc}
 8007e26:	2800      	cmp	r0, #0
 8007e28:	d1f3      	bne.n	8007e12 <strncmp+0xa>
 8007e2a:	e7fa      	b.n	8007e22 <strncmp+0x1a>
 8007e2c:	4610      	mov	r0, r2
 8007e2e:	e7f9      	b.n	8007e24 <strncmp+0x1c>

08007e30 <__ascii_wctomb>:
 8007e30:	4603      	mov	r3, r0
 8007e32:	4608      	mov	r0, r1
 8007e34:	b141      	cbz	r1, 8007e48 <__ascii_wctomb+0x18>
 8007e36:	2aff      	cmp	r2, #255	; 0xff
 8007e38:	d904      	bls.n	8007e44 <__ascii_wctomb+0x14>
 8007e3a:	228a      	movs	r2, #138	; 0x8a
 8007e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e40:	601a      	str	r2, [r3, #0]
 8007e42:	4770      	bx	lr
 8007e44:	2001      	movs	r0, #1
 8007e46:	700a      	strb	r2, [r1, #0]
 8007e48:	4770      	bx	lr
	...

08007e4c <__assert_func>:
 8007e4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e4e:	4614      	mov	r4, r2
 8007e50:	461a      	mov	r2, r3
 8007e52:	4b09      	ldr	r3, [pc, #36]	; (8007e78 <__assert_func+0x2c>)
 8007e54:	4605      	mov	r5, r0
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68d8      	ldr	r0, [r3, #12]
 8007e5a:	b14c      	cbz	r4, 8007e70 <__assert_func+0x24>
 8007e5c:	4b07      	ldr	r3, [pc, #28]	; (8007e7c <__assert_func+0x30>)
 8007e5e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e62:	9100      	str	r1, [sp, #0]
 8007e64:	462b      	mov	r3, r5
 8007e66:	4906      	ldr	r1, [pc, #24]	; (8007e80 <__assert_func+0x34>)
 8007e68:	f000 f80e 	bl	8007e88 <fiprintf>
 8007e6c:	f000 fa8a 	bl	8008384 <abort>
 8007e70:	4b04      	ldr	r3, [pc, #16]	; (8007e84 <__assert_func+0x38>)
 8007e72:	461c      	mov	r4, r3
 8007e74:	e7f3      	b.n	8007e5e <__assert_func+0x12>
 8007e76:	bf00      	nop
 8007e78:	2000007c 	.word	0x2000007c
 8007e7c:	0800971d 	.word	0x0800971d
 8007e80:	0800972a 	.word	0x0800972a
 8007e84:	08009758 	.word	0x08009758

08007e88 <fiprintf>:
 8007e88:	b40e      	push	{r1, r2, r3}
 8007e8a:	b503      	push	{r0, r1, lr}
 8007e8c:	4601      	mov	r1, r0
 8007e8e:	ab03      	add	r3, sp, #12
 8007e90:	4805      	ldr	r0, [pc, #20]	; (8007ea8 <fiprintf+0x20>)
 8007e92:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e96:	6800      	ldr	r0, [r0, #0]
 8007e98:	9301      	str	r3, [sp, #4]
 8007e9a:	f000 f883 	bl	8007fa4 <_vfiprintf_r>
 8007e9e:	b002      	add	sp, #8
 8007ea0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ea4:	b003      	add	sp, #12
 8007ea6:	4770      	bx	lr
 8007ea8:	2000007c 	.word	0x2000007c

08007eac <memmove>:
 8007eac:	4288      	cmp	r0, r1
 8007eae:	b510      	push	{r4, lr}
 8007eb0:	eb01 0402 	add.w	r4, r1, r2
 8007eb4:	d902      	bls.n	8007ebc <memmove+0x10>
 8007eb6:	4284      	cmp	r4, r0
 8007eb8:	4623      	mov	r3, r4
 8007eba:	d807      	bhi.n	8007ecc <memmove+0x20>
 8007ebc:	1e43      	subs	r3, r0, #1
 8007ebe:	42a1      	cmp	r1, r4
 8007ec0:	d008      	beq.n	8007ed4 <memmove+0x28>
 8007ec2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ec6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007eca:	e7f8      	b.n	8007ebe <memmove+0x12>
 8007ecc:	4601      	mov	r1, r0
 8007ece:	4402      	add	r2, r0
 8007ed0:	428a      	cmp	r2, r1
 8007ed2:	d100      	bne.n	8007ed6 <memmove+0x2a>
 8007ed4:	bd10      	pop	{r4, pc}
 8007ed6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007eda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ede:	e7f7      	b.n	8007ed0 <memmove+0x24>

08007ee0 <__malloc_lock>:
 8007ee0:	4801      	ldr	r0, [pc, #4]	; (8007ee8 <__malloc_lock+0x8>)
 8007ee2:	f000 bc0b 	b.w	80086fc <__retarget_lock_acquire_recursive>
 8007ee6:	bf00      	nop
 8007ee8:	200002e8 	.word	0x200002e8

08007eec <__malloc_unlock>:
 8007eec:	4801      	ldr	r0, [pc, #4]	; (8007ef4 <__malloc_unlock+0x8>)
 8007eee:	f000 bc06 	b.w	80086fe <__retarget_lock_release_recursive>
 8007ef2:	bf00      	nop
 8007ef4:	200002e8 	.word	0x200002e8

08007ef8 <_realloc_r>:
 8007ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007efc:	4680      	mov	r8, r0
 8007efe:	4614      	mov	r4, r2
 8007f00:	460e      	mov	r6, r1
 8007f02:	b921      	cbnz	r1, 8007f0e <_realloc_r+0x16>
 8007f04:	4611      	mov	r1, r2
 8007f06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f0a:	f7ff bd97 	b.w	8007a3c <_malloc_r>
 8007f0e:	b92a      	cbnz	r2, 8007f1c <_realloc_r+0x24>
 8007f10:	f7ff fd2c 	bl	800796c <_free_r>
 8007f14:	4625      	mov	r5, r4
 8007f16:	4628      	mov	r0, r5
 8007f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f1c:	f000 fc56 	bl	80087cc <_malloc_usable_size_r>
 8007f20:	4284      	cmp	r4, r0
 8007f22:	4607      	mov	r7, r0
 8007f24:	d802      	bhi.n	8007f2c <_realloc_r+0x34>
 8007f26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f2a:	d812      	bhi.n	8007f52 <_realloc_r+0x5a>
 8007f2c:	4621      	mov	r1, r4
 8007f2e:	4640      	mov	r0, r8
 8007f30:	f7ff fd84 	bl	8007a3c <_malloc_r>
 8007f34:	4605      	mov	r5, r0
 8007f36:	2800      	cmp	r0, #0
 8007f38:	d0ed      	beq.n	8007f16 <_realloc_r+0x1e>
 8007f3a:	42bc      	cmp	r4, r7
 8007f3c:	4622      	mov	r2, r4
 8007f3e:	4631      	mov	r1, r6
 8007f40:	bf28      	it	cs
 8007f42:	463a      	movcs	r2, r7
 8007f44:	f7ff f838 	bl	8006fb8 <memcpy>
 8007f48:	4631      	mov	r1, r6
 8007f4a:	4640      	mov	r0, r8
 8007f4c:	f7ff fd0e 	bl	800796c <_free_r>
 8007f50:	e7e1      	b.n	8007f16 <_realloc_r+0x1e>
 8007f52:	4635      	mov	r5, r6
 8007f54:	e7df      	b.n	8007f16 <_realloc_r+0x1e>

08007f56 <__sfputc_r>:
 8007f56:	6893      	ldr	r3, [r2, #8]
 8007f58:	b410      	push	{r4}
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	6093      	str	r3, [r2, #8]
 8007f60:	da07      	bge.n	8007f72 <__sfputc_r+0x1c>
 8007f62:	6994      	ldr	r4, [r2, #24]
 8007f64:	42a3      	cmp	r3, r4
 8007f66:	db01      	blt.n	8007f6c <__sfputc_r+0x16>
 8007f68:	290a      	cmp	r1, #10
 8007f6a:	d102      	bne.n	8007f72 <__sfputc_r+0x1c>
 8007f6c:	bc10      	pop	{r4}
 8007f6e:	f000 b949 	b.w	8008204 <__swbuf_r>
 8007f72:	6813      	ldr	r3, [r2, #0]
 8007f74:	1c58      	adds	r0, r3, #1
 8007f76:	6010      	str	r0, [r2, #0]
 8007f78:	7019      	strb	r1, [r3, #0]
 8007f7a:	4608      	mov	r0, r1
 8007f7c:	bc10      	pop	{r4}
 8007f7e:	4770      	bx	lr

08007f80 <__sfputs_r>:
 8007f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f82:	4606      	mov	r6, r0
 8007f84:	460f      	mov	r7, r1
 8007f86:	4614      	mov	r4, r2
 8007f88:	18d5      	adds	r5, r2, r3
 8007f8a:	42ac      	cmp	r4, r5
 8007f8c:	d101      	bne.n	8007f92 <__sfputs_r+0x12>
 8007f8e:	2000      	movs	r0, #0
 8007f90:	e007      	b.n	8007fa2 <__sfputs_r+0x22>
 8007f92:	463a      	mov	r2, r7
 8007f94:	4630      	mov	r0, r6
 8007f96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f9a:	f7ff ffdc 	bl	8007f56 <__sfputc_r>
 8007f9e:	1c43      	adds	r3, r0, #1
 8007fa0:	d1f3      	bne.n	8007f8a <__sfputs_r+0xa>
 8007fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007fa4 <_vfiprintf_r>:
 8007fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa8:	460d      	mov	r5, r1
 8007faa:	4614      	mov	r4, r2
 8007fac:	4698      	mov	r8, r3
 8007fae:	4606      	mov	r6, r0
 8007fb0:	b09d      	sub	sp, #116	; 0x74
 8007fb2:	b118      	cbz	r0, 8007fbc <_vfiprintf_r+0x18>
 8007fb4:	6983      	ldr	r3, [r0, #24]
 8007fb6:	b90b      	cbnz	r3, 8007fbc <_vfiprintf_r+0x18>
 8007fb8:	f000 fb02 	bl	80085c0 <__sinit>
 8007fbc:	4b89      	ldr	r3, [pc, #548]	; (80081e4 <_vfiprintf_r+0x240>)
 8007fbe:	429d      	cmp	r5, r3
 8007fc0:	d11b      	bne.n	8007ffa <_vfiprintf_r+0x56>
 8007fc2:	6875      	ldr	r5, [r6, #4]
 8007fc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fc6:	07d9      	lsls	r1, r3, #31
 8007fc8:	d405      	bmi.n	8007fd6 <_vfiprintf_r+0x32>
 8007fca:	89ab      	ldrh	r3, [r5, #12]
 8007fcc:	059a      	lsls	r2, r3, #22
 8007fce:	d402      	bmi.n	8007fd6 <_vfiprintf_r+0x32>
 8007fd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fd2:	f000 fb93 	bl	80086fc <__retarget_lock_acquire_recursive>
 8007fd6:	89ab      	ldrh	r3, [r5, #12]
 8007fd8:	071b      	lsls	r3, r3, #28
 8007fda:	d501      	bpl.n	8007fe0 <_vfiprintf_r+0x3c>
 8007fdc:	692b      	ldr	r3, [r5, #16]
 8007fde:	b9eb      	cbnz	r3, 800801c <_vfiprintf_r+0x78>
 8007fe0:	4629      	mov	r1, r5
 8007fe2:	4630      	mov	r0, r6
 8007fe4:	f000 f960 	bl	80082a8 <__swsetup_r>
 8007fe8:	b1c0      	cbz	r0, 800801c <_vfiprintf_r+0x78>
 8007fea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fec:	07dc      	lsls	r4, r3, #31
 8007fee:	d50e      	bpl.n	800800e <_vfiprintf_r+0x6a>
 8007ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ff4:	b01d      	add	sp, #116	; 0x74
 8007ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ffa:	4b7b      	ldr	r3, [pc, #492]	; (80081e8 <_vfiprintf_r+0x244>)
 8007ffc:	429d      	cmp	r5, r3
 8007ffe:	d101      	bne.n	8008004 <_vfiprintf_r+0x60>
 8008000:	68b5      	ldr	r5, [r6, #8]
 8008002:	e7df      	b.n	8007fc4 <_vfiprintf_r+0x20>
 8008004:	4b79      	ldr	r3, [pc, #484]	; (80081ec <_vfiprintf_r+0x248>)
 8008006:	429d      	cmp	r5, r3
 8008008:	bf08      	it	eq
 800800a:	68f5      	ldreq	r5, [r6, #12]
 800800c:	e7da      	b.n	8007fc4 <_vfiprintf_r+0x20>
 800800e:	89ab      	ldrh	r3, [r5, #12]
 8008010:	0598      	lsls	r0, r3, #22
 8008012:	d4ed      	bmi.n	8007ff0 <_vfiprintf_r+0x4c>
 8008014:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008016:	f000 fb72 	bl	80086fe <__retarget_lock_release_recursive>
 800801a:	e7e9      	b.n	8007ff0 <_vfiprintf_r+0x4c>
 800801c:	2300      	movs	r3, #0
 800801e:	9309      	str	r3, [sp, #36]	; 0x24
 8008020:	2320      	movs	r3, #32
 8008022:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008026:	2330      	movs	r3, #48	; 0x30
 8008028:	f04f 0901 	mov.w	r9, #1
 800802c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008030:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80081f0 <_vfiprintf_r+0x24c>
 8008034:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008038:	4623      	mov	r3, r4
 800803a:	469a      	mov	sl, r3
 800803c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008040:	b10a      	cbz	r2, 8008046 <_vfiprintf_r+0xa2>
 8008042:	2a25      	cmp	r2, #37	; 0x25
 8008044:	d1f9      	bne.n	800803a <_vfiprintf_r+0x96>
 8008046:	ebba 0b04 	subs.w	fp, sl, r4
 800804a:	d00b      	beq.n	8008064 <_vfiprintf_r+0xc0>
 800804c:	465b      	mov	r3, fp
 800804e:	4622      	mov	r2, r4
 8008050:	4629      	mov	r1, r5
 8008052:	4630      	mov	r0, r6
 8008054:	f7ff ff94 	bl	8007f80 <__sfputs_r>
 8008058:	3001      	adds	r0, #1
 800805a:	f000 80aa 	beq.w	80081b2 <_vfiprintf_r+0x20e>
 800805e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008060:	445a      	add	r2, fp
 8008062:	9209      	str	r2, [sp, #36]	; 0x24
 8008064:	f89a 3000 	ldrb.w	r3, [sl]
 8008068:	2b00      	cmp	r3, #0
 800806a:	f000 80a2 	beq.w	80081b2 <_vfiprintf_r+0x20e>
 800806e:	2300      	movs	r3, #0
 8008070:	f04f 32ff 	mov.w	r2, #4294967295
 8008074:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008078:	f10a 0a01 	add.w	sl, sl, #1
 800807c:	9304      	str	r3, [sp, #16]
 800807e:	9307      	str	r3, [sp, #28]
 8008080:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008084:	931a      	str	r3, [sp, #104]	; 0x68
 8008086:	4654      	mov	r4, sl
 8008088:	2205      	movs	r2, #5
 800808a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800808e:	4858      	ldr	r0, [pc, #352]	; (80081f0 <_vfiprintf_r+0x24c>)
 8008090:	f7fe ff84 	bl	8006f9c <memchr>
 8008094:	9a04      	ldr	r2, [sp, #16]
 8008096:	b9d8      	cbnz	r0, 80080d0 <_vfiprintf_r+0x12c>
 8008098:	06d1      	lsls	r1, r2, #27
 800809a:	bf44      	itt	mi
 800809c:	2320      	movmi	r3, #32
 800809e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080a2:	0713      	lsls	r3, r2, #28
 80080a4:	bf44      	itt	mi
 80080a6:	232b      	movmi	r3, #43	; 0x2b
 80080a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080ac:	f89a 3000 	ldrb.w	r3, [sl]
 80080b0:	2b2a      	cmp	r3, #42	; 0x2a
 80080b2:	d015      	beq.n	80080e0 <_vfiprintf_r+0x13c>
 80080b4:	4654      	mov	r4, sl
 80080b6:	2000      	movs	r0, #0
 80080b8:	f04f 0c0a 	mov.w	ip, #10
 80080bc:	9a07      	ldr	r2, [sp, #28]
 80080be:	4621      	mov	r1, r4
 80080c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080c4:	3b30      	subs	r3, #48	; 0x30
 80080c6:	2b09      	cmp	r3, #9
 80080c8:	d94e      	bls.n	8008168 <_vfiprintf_r+0x1c4>
 80080ca:	b1b0      	cbz	r0, 80080fa <_vfiprintf_r+0x156>
 80080cc:	9207      	str	r2, [sp, #28]
 80080ce:	e014      	b.n	80080fa <_vfiprintf_r+0x156>
 80080d0:	eba0 0308 	sub.w	r3, r0, r8
 80080d4:	fa09 f303 	lsl.w	r3, r9, r3
 80080d8:	4313      	orrs	r3, r2
 80080da:	46a2      	mov	sl, r4
 80080dc:	9304      	str	r3, [sp, #16]
 80080de:	e7d2      	b.n	8008086 <_vfiprintf_r+0xe2>
 80080e0:	9b03      	ldr	r3, [sp, #12]
 80080e2:	1d19      	adds	r1, r3, #4
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	9103      	str	r1, [sp, #12]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	bfbb      	ittet	lt
 80080ec:	425b      	neglt	r3, r3
 80080ee:	f042 0202 	orrlt.w	r2, r2, #2
 80080f2:	9307      	strge	r3, [sp, #28]
 80080f4:	9307      	strlt	r3, [sp, #28]
 80080f6:	bfb8      	it	lt
 80080f8:	9204      	strlt	r2, [sp, #16]
 80080fa:	7823      	ldrb	r3, [r4, #0]
 80080fc:	2b2e      	cmp	r3, #46	; 0x2e
 80080fe:	d10c      	bne.n	800811a <_vfiprintf_r+0x176>
 8008100:	7863      	ldrb	r3, [r4, #1]
 8008102:	2b2a      	cmp	r3, #42	; 0x2a
 8008104:	d135      	bne.n	8008172 <_vfiprintf_r+0x1ce>
 8008106:	9b03      	ldr	r3, [sp, #12]
 8008108:	3402      	adds	r4, #2
 800810a:	1d1a      	adds	r2, r3, #4
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	9203      	str	r2, [sp, #12]
 8008110:	2b00      	cmp	r3, #0
 8008112:	bfb8      	it	lt
 8008114:	f04f 33ff 	movlt.w	r3, #4294967295
 8008118:	9305      	str	r3, [sp, #20]
 800811a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80081f4 <_vfiprintf_r+0x250>
 800811e:	2203      	movs	r2, #3
 8008120:	4650      	mov	r0, sl
 8008122:	7821      	ldrb	r1, [r4, #0]
 8008124:	f7fe ff3a 	bl	8006f9c <memchr>
 8008128:	b140      	cbz	r0, 800813c <_vfiprintf_r+0x198>
 800812a:	2340      	movs	r3, #64	; 0x40
 800812c:	eba0 000a 	sub.w	r0, r0, sl
 8008130:	fa03 f000 	lsl.w	r0, r3, r0
 8008134:	9b04      	ldr	r3, [sp, #16]
 8008136:	3401      	adds	r4, #1
 8008138:	4303      	orrs	r3, r0
 800813a:	9304      	str	r3, [sp, #16]
 800813c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008140:	2206      	movs	r2, #6
 8008142:	482d      	ldr	r0, [pc, #180]	; (80081f8 <_vfiprintf_r+0x254>)
 8008144:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008148:	f7fe ff28 	bl	8006f9c <memchr>
 800814c:	2800      	cmp	r0, #0
 800814e:	d03f      	beq.n	80081d0 <_vfiprintf_r+0x22c>
 8008150:	4b2a      	ldr	r3, [pc, #168]	; (80081fc <_vfiprintf_r+0x258>)
 8008152:	bb1b      	cbnz	r3, 800819c <_vfiprintf_r+0x1f8>
 8008154:	9b03      	ldr	r3, [sp, #12]
 8008156:	3307      	adds	r3, #7
 8008158:	f023 0307 	bic.w	r3, r3, #7
 800815c:	3308      	adds	r3, #8
 800815e:	9303      	str	r3, [sp, #12]
 8008160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008162:	443b      	add	r3, r7
 8008164:	9309      	str	r3, [sp, #36]	; 0x24
 8008166:	e767      	b.n	8008038 <_vfiprintf_r+0x94>
 8008168:	460c      	mov	r4, r1
 800816a:	2001      	movs	r0, #1
 800816c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008170:	e7a5      	b.n	80080be <_vfiprintf_r+0x11a>
 8008172:	2300      	movs	r3, #0
 8008174:	f04f 0c0a 	mov.w	ip, #10
 8008178:	4619      	mov	r1, r3
 800817a:	3401      	adds	r4, #1
 800817c:	9305      	str	r3, [sp, #20]
 800817e:	4620      	mov	r0, r4
 8008180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008184:	3a30      	subs	r2, #48	; 0x30
 8008186:	2a09      	cmp	r2, #9
 8008188:	d903      	bls.n	8008192 <_vfiprintf_r+0x1ee>
 800818a:	2b00      	cmp	r3, #0
 800818c:	d0c5      	beq.n	800811a <_vfiprintf_r+0x176>
 800818e:	9105      	str	r1, [sp, #20]
 8008190:	e7c3      	b.n	800811a <_vfiprintf_r+0x176>
 8008192:	4604      	mov	r4, r0
 8008194:	2301      	movs	r3, #1
 8008196:	fb0c 2101 	mla	r1, ip, r1, r2
 800819a:	e7f0      	b.n	800817e <_vfiprintf_r+0x1da>
 800819c:	ab03      	add	r3, sp, #12
 800819e:	9300      	str	r3, [sp, #0]
 80081a0:	462a      	mov	r2, r5
 80081a2:	4630      	mov	r0, r6
 80081a4:	4b16      	ldr	r3, [pc, #88]	; (8008200 <_vfiprintf_r+0x25c>)
 80081a6:	a904      	add	r1, sp, #16
 80081a8:	f7fc f876 	bl	8004298 <_printf_float>
 80081ac:	4607      	mov	r7, r0
 80081ae:	1c78      	adds	r0, r7, #1
 80081b0:	d1d6      	bne.n	8008160 <_vfiprintf_r+0x1bc>
 80081b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081b4:	07d9      	lsls	r1, r3, #31
 80081b6:	d405      	bmi.n	80081c4 <_vfiprintf_r+0x220>
 80081b8:	89ab      	ldrh	r3, [r5, #12]
 80081ba:	059a      	lsls	r2, r3, #22
 80081bc:	d402      	bmi.n	80081c4 <_vfiprintf_r+0x220>
 80081be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081c0:	f000 fa9d 	bl	80086fe <__retarget_lock_release_recursive>
 80081c4:	89ab      	ldrh	r3, [r5, #12]
 80081c6:	065b      	lsls	r3, r3, #25
 80081c8:	f53f af12 	bmi.w	8007ff0 <_vfiprintf_r+0x4c>
 80081cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081ce:	e711      	b.n	8007ff4 <_vfiprintf_r+0x50>
 80081d0:	ab03      	add	r3, sp, #12
 80081d2:	9300      	str	r3, [sp, #0]
 80081d4:	462a      	mov	r2, r5
 80081d6:	4630      	mov	r0, r6
 80081d8:	4b09      	ldr	r3, [pc, #36]	; (8008200 <_vfiprintf_r+0x25c>)
 80081da:	a904      	add	r1, sp, #16
 80081dc:	f7fc faf8 	bl	80047d0 <_printf_i>
 80081e0:	e7e4      	b.n	80081ac <_vfiprintf_r+0x208>
 80081e2:	bf00      	nop
 80081e4:	0800977c 	.word	0x0800977c
 80081e8:	0800979c 	.word	0x0800979c
 80081ec:	0800975c 	.word	0x0800975c
 80081f0:	0800970c 	.word	0x0800970c
 80081f4:	08009712 	.word	0x08009712
 80081f8:	08009716 	.word	0x08009716
 80081fc:	08004299 	.word	0x08004299
 8008200:	08007f81 	.word	0x08007f81

08008204 <__swbuf_r>:
 8008204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008206:	460e      	mov	r6, r1
 8008208:	4614      	mov	r4, r2
 800820a:	4605      	mov	r5, r0
 800820c:	b118      	cbz	r0, 8008216 <__swbuf_r+0x12>
 800820e:	6983      	ldr	r3, [r0, #24]
 8008210:	b90b      	cbnz	r3, 8008216 <__swbuf_r+0x12>
 8008212:	f000 f9d5 	bl	80085c0 <__sinit>
 8008216:	4b21      	ldr	r3, [pc, #132]	; (800829c <__swbuf_r+0x98>)
 8008218:	429c      	cmp	r4, r3
 800821a:	d12b      	bne.n	8008274 <__swbuf_r+0x70>
 800821c:	686c      	ldr	r4, [r5, #4]
 800821e:	69a3      	ldr	r3, [r4, #24]
 8008220:	60a3      	str	r3, [r4, #8]
 8008222:	89a3      	ldrh	r3, [r4, #12]
 8008224:	071a      	lsls	r2, r3, #28
 8008226:	d52f      	bpl.n	8008288 <__swbuf_r+0x84>
 8008228:	6923      	ldr	r3, [r4, #16]
 800822a:	b36b      	cbz	r3, 8008288 <__swbuf_r+0x84>
 800822c:	6923      	ldr	r3, [r4, #16]
 800822e:	6820      	ldr	r0, [r4, #0]
 8008230:	b2f6      	uxtb	r6, r6
 8008232:	1ac0      	subs	r0, r0, r3
 8008234:	6963      	ldr	r3, [r4, #20]
 8008236:	4637      	mov	r7, r6
 8008238:	4283      	cmp	r3, r0
 800823a:	dc04      	bgt.n	8008246 <__swbuf_r+0x42>
 800823c:	4621      	mov	r1, r4
 800823e:	4628      	mov	r0, r5
 8008240:	f000 f92a 	bl	8008498 <_fflush_r>
 8008244:	bb30      	cbnz	r0, 8008294 <__swbuf_r+0x90>
 8008246:	68a3      	ldr	r3, [r4, #8]
 8008248:	3001      	adds	r0, #1
 800824a:	3b01      	subs	r3, #1
 800824c:	60a3      	str	r3, [r4, #8]
 800824e:	6823      	ldr	r3, [r4, #0]
 8008250:	1c5a      	adds	r2, r3, #1
 8008252:	6022      	str	r2, [r4, #0]
 8008254:	701e      	strb	r6, [r3, #0]
 8008256:	6963      	ldr	r3, [r4, #20]
 8008258:	4283      	cmp	r3, r0
 800825a:	d004      	beq.n	8008266 <__swbuf_r+0x62>
 800825c:	89a3      	ldrh	r3, [r4, #12]
 800825e:	07db      	lsls	r3, r3, #31
 8008260:	d506      	bpl.n	8008270 <__swbuf_r+0x6c>
 8008262:	2e0a      	cmp	r6, #10
 8008264:	d104      	bne.n	8008270 <__swbuf_r+0x6c>
 8008266:	4621      	mov	r1, r4
 8008268:	4628      	mov	r0, r5
 800826a:	f000 f915 	bl	8008498 <_fflush_r>
 800826e:	b988      	cbnz	r0, 8008294 <__swbuf_r+0x90>
 8008270:	4638      	mov	r0, r7
 8008272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008274:	4b0a      	ldr	r3, [pc, #40]	; (80082a0 <__swbuf_r+0x9c>)
 8008276:	429c      	cmp	r4, r3
 8008278:	d101      	bne.n	800827e <__swbuf_r+0x7a>
 800827a:	68ac      	ldr	r4, [r5, #8]
 800827c:	e7cf      	b.n	800821e <__swbuf_r+0x1a>
 800827e:	4b09      	ldr	r3, [pc, #36]	; (80082a4 <__swbuf_r+0xa0>)
 8008280:	429c      	cmp	r4, r3
 8008282:	bf08      	it	eq
 8008284:	68ec      	ldreq	r4, [r5, #12]
 8008286:	e7ca      	b.n	800821e <__swbuf_r+0x1a>
 8008288:	4621      	mov	r1, r4
 800828a:	4628      	mov	r0, r5
 800828c:	f000 f80c 	bl	80082a8 <__swsetup_r>
 8008290:	2800      	cmp	r0, #0
 8008292:	d0cb      	beq.n	800822c <__swbuf_r+0x28>
 8008294:	f04f 37ff 	mov.w	r7, #4294967295
 8008298:	e7ea      	b.n	8008270 <__swbuf_r+0x6c>
 800829a:	bf00      	nop
 800829c:	0800977c 	.word	0x0800977c
 80082a0:	0800979c 	.word	0x0800979c
 80082a4:	0800975c 	.word	0x0800975c

080082a8 <__swsetup_r>:
 80082a8:	4b32      	ldr	r3, [pc, #200]	; (8008374 <__swsetup_r+0xcc>)
 80082aa:	b570      	push	{r4, r5, r6, lr}
 80082ac:	681d      	ldr	r5, [r3, #0]
 80082ae:	4606      	mov	r6, r0
 80082b0:	460c      	mov	r4, r1
 80082b2:	b125      	cbz	r5, 80082be <__swsetup_r+0x16>
 80082b4:	69ab      	ldr	r3, [r5, #24]
 80082b6:	b913      	cbnz	r3, 80082be <__swsetup_r+0x16>
 80082b8:	4628      	mov	r0, r5
 80082ba:	f000 f981 	bl	80085c0 <__sinit>
 80082be:	4b2e      	ldr	r3, [pc, #184]	; (8008378 <__swsetup_r+0xd0>)
 80082c0:	429c      	cmp	r4, r3
 80082c2:	d10f      	bne.n	80082e4 <__swsetup_r+0x3c>
 80082c4:	686c      	ldr	r4, [r5, #4]
 80082c6:	89a3      	ldrh	r3, [r4, #12]
 80082c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082cc:	0719      	lsls	r1, r3, #28
 80082ce:	d42c      	bmi.n	800832a <__swsetup_r+0x82>
 80082d0:	06dd      	lsls	r5, r3, #27
 80082d2:	d411      	bmi.n	80082f8 <__swsetup_r+0x50>
 80082d4:	2309      	movs	r3, #9
 80082d6:	6033      	str	r3, [r6, #0]
 80082d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80082dc:	f04f 30ff 	mov.w	r0, #4294967295
 80082e0:	81a3      	strh	r3, [r4, #12]
 80082e2:	e03e      	b.n	8008362 <__swsetup_r+0xba>
 80082e4:	4b25      	ldr	r3, [pc, #148]	; (800837c <__swsetup_r+0xd4>)
 80082e6:	429c      	cmp	r4, r3
 80082e8:	d101      	bne.n	80082ee <__swsetup_r+0x46>
 80082ea:	68ac      	ldr	r4, [r5, #8]
 80082ec:	e7eb      	b.n	80082c6 <__swsetup_r+0x1e>
 80082ee:	4b24      	ldr	r3, [pc, #144]	; (8008380 <__swsetup_r+0xd8>)
 80082f0:	429c      	cmp	r4, r3
 80082f2:	bf08      	it	eq
 80082f4:	68ec      	ldreq	r4, [r5, #12]
 80082f6:	e7e6      	b.n	80082c6 <__swsetup_r+0x1e>
 80082f8:	0758      	lsls	r0, r3, #29
 80082fa:	d512      	bpl.n	8008322 <__swsetup_r+0x7a>
 80082fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082fe:	b141      	cbz	r1, 8008312 <__swsetup_r+0x6a>
 8008300:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008304:	4299      	cmp	r1, r3
 8008306:	d002      	beq.n	800830e <__swsetup_r+0x66>
 8008308:	4630      	mov	r0, r6
 800830a:	f7ff fb2f 	bl	800796c <_free_r>
 800830e:	2300      	movs	r3, #0
 8008310:	6363      	str	r3, [r4, #52]	; 0x34
 8008312:	89a3      	ldrh	r3, [r4, #12]
 8008314:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008318:	81a3      	strh	r3, [r4, #12]
 800831a:	2300      	movs	r3, #0
 800831c:	6063      	str	r3, [r4, #4]
 800831e:	6923      	ldr	r3, [r4, #16]
 8008320:	6023      	str	r3, [r4, #0]
 8008322:	89a3      	ldrh	r3, [r4, #12]
 8008324:	f043 0308 	orr.w	r3, r3, #8
 8008328:	81a3      	strh	r3, [r4, #12]
 800832a:	6923      	ldr	r3, [r4, #16]
 800832c:	b94b      	cbnz	r3, 8008342 <__swsetup_r+0x9a>
 800832e:	89a3      	ldrh	r3, [r4, #12]
 8008330:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008338:	d003      	beq.n	8008342 <__swsetup_r+0x9a>
 800833a:	4621      	mov	r1, r4
 800833c:	4630      	mov	r0, r6
 800833e:	f000 fa05 	bl	800874c <__smakebuf_r>
 8008342:	89a0      	ldrh	r0, [r4, #12]
 8008344:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008348:	f010 0301 	ands.w	r3, r0, #1
 800834c:	d00a      	beq.n	8008364 <__swsetup_r+0xbc>
 800834e:	2300      	movs	r3, #0
 8008350:	60a3      	str	r3, [r4, #8]
 8008352:	6963      	ldr	r3, [r4, #20]
 8008354:	425b      	negs	r3, r3
 8008356:	61a3      	str	r3, [r4, #24]
 8008358:	6923      	ldr	r3, [r4, #16]
 800835a:	b943      	cbnz	r3, 800836e <__swsetup_r+0xc6>
 800835c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008360:	d1ba      	bne.n	80082d8 <__swsetup_r+0x30>
 8008362:	bd70      	pop	{r4, r5, r6, pc}
 8008364:	0781      	lsls	r1, r0, #30
 8008366:	bf58      	it	pl
 8008368:	6963      	ldrpl	r3, [r4, #20]
 800836a:	60a3      	str	r3, [r4, #8]
 800836c:	e7f4      	b.n	8008358 <__swsetup_r+0xb0>
 800836e:	2000      	movs	r0, #0
 8008370:	e7f7      	b.n	8008362 <__swsetup_r+0xba>
 8008372:	bf00      	nop
 8008374:	2000007c 	.word	0x2000007c
 8008378:	0800977c 	.word	0x0800977c
 800837c:	0800979c 	.word	0x0800979c
 8008380:	0800975c 	.word	0x0800975c

08008384 <abort>:
 8008384:	2006      	movs	r0, #6
 8008386:	b508      	push	{r3, lr}
 8008388:	f000 fa50 	bl	800882c <raise>
 800838c:	2001      	movs	r0, #1
 800838e:	f7f9 f927 	bl	80015e0 <_exit>
	...

08008394 <__sflush_r>:
 8008394:	898a      	ldrh	r2, [r1, #12]
 8008396:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008398:	4605      	mov	r5, r0
 800839a:	0710      	lsls	r0, r2, #28
 800839c:	460c      	mov	r4, r1
 800839e:	d457      	bmi.n	8008450 <__sflush_r+0xbc>
 80083a0:	684b      	ldr	r3, [r1, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	dc04      	bgt.n	80083b0 <__sflush_r+0x1c>
 80083a6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	dc01      	bgt.n	80083b0 <__sflush_r+0x1c>
 80083ac:	2000      	movs	r0, #0
 80083ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083b2:	2e00      	cmp	r6, #0
 80083b4:	d0fa      	beq.n	80083ac <__sflush_r+0x18>
 80083b6:	2300      	movs	r3, #0
 80083b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80083bc:	682f      	ldr	r7, [r5, #0]
 80083be:	602b      	str	r3, [r5, #0]
 80083c0:	d032      	beq.n	8008428 <__sflush_r+0x94>
 80083c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80083c4:	89a3      	ldrh	r3, [r4, #12]
 80083c6:	075a      	lsls	r2, r3, #29
 80083c8:	d505      	bpl.n	80083d6 <__sflush_r+0x42>
 80083ca:	6863      	ldr	r3, [r4, #4]
 80083cc:	1ac0      	subs	r0, r0, r3
 80083ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80083d0:	b10b      	cbz	r3, 80083d6 <__sflush_r+0x42>
 80083d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80083d4:	1ac0      	subs	r0, r0, r3
 80083d6:	2300      	movs	r3, #0
 80083d8:	4602      	mov	r2, r0
 80083da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083dc:	4628      	mov	r0, r5
 80083de:	6a21      	ldr	r1, [r4, #32]
 80083e0:	47b0      	blx	r6
 80083e2:	1c43      	adds	r3, r0, #1
 80083e4:	89a3      	ldrh	r3, [r4, #12]
 80083e6:	d106      	bne.n	80083f6 <__sflush_r+0x62>
 80083e8:	6829      	ldr	r1, [r5, #0]
 80083ea:	291d      	cmp	r1, #29
 80083ec:	d82c      	bhi.n	8008448 <__sflush_r+0xb4>
 80083ee:	4a29      	ldr	r2, [pc, #164]	; (8008494 <__sflush_r+0x100>)
 80083f0:	40ca      	lsrs	r2, r1
 80083f2:	07d6      	lsls	r6, r2, #31
 80083f4:	d528      	bpl.n	8008448 <__sflush_r+0xb4>
 80083f6:	2200      	movs	r2, #0
 80083f8:	6062      	str	r2, [r4, #4]
 80083fa:	6922      	ldr	r2, [r4, #16]
 80083fc:	04d9      	lsls	r1, r3, #19
 80083fe:	6022      	str	r2, [r4, #0]
 8008400:	d504      	bpl.n	800840c <__sflush_r+0x78>
 8008402:	1c42      	adds	r2, r0, #1
 8008404:	d101      	bne.n	800840a <__sflush_r+0x76>
 8008406:	682b      	ldr	r3, [r5, #0]
 8008408:	b903      	cbnz	r3, 800840c <__sflush_r+0x78>
 800840a:	6560      	str	r0, [r4, #84]	; 0x54
 800840c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800840e:	602f      	str	r7, [r5, #0]
 8008410:	2900      	cmp	r1, #0
 8008412:	d0cb      	beq.n	80083ac <__sflush_r+0x18>
 8008414:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008418:	4299      	cmp	r1, r3
 800841a:	d002      	beq.n	8008422 <__sflush_r+0x8e>
 800841c:	4628      	mov	r0, r5
 800841e:	f7ff faa5 	bl	800796c <_free_r>
 8008422:	2000      	movs	r0, #0
 8008424:	6360      	str	r0, [r4, #52]	; 0x34
 8008426:	e7c2      	b.n	80083ae <__sflush_r+0x1a>
 8008428:	6a21      	ldr	r1, [r4, #32]
 800842a:	2301      	movs	r3, #1
 800842c:	4628      	mov	r0, r5
 800842e:	47b0      	blx	r6
 8008430:	1c41      	adds	r1, r0, #1
 8008432:	d1c7      	bne.n	80083c4 <__sflush_r+0x30>
 8008434:	682b      	ldr	r3, [r5, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d0c4      	beq.n	80083c4 <__sflush_r+0x30>
 800843a:	2b1d      	cmp	r3, #29
 800843c:	d001      	beq.n	8008442 <__sflush_r+0xae>
 800843e:	2b16      	cmp	r3, #22
 8008440:	d101      	bne.n	8008446 <__sflush_r+0xb2>
 8008442:	602f      	str	r7, [r5, #0]
 8008444:	e7b2      	b.n	80083ac <__sflush_r+0x18>
 8008446:	89a3      	ldrh	r3, [r4, #12]
 8008448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800844c:	81a3      	strh	r3, [r4, #12]
 800844e:	e7ae      	b.n	80083ae <__sflush_r+0x1a>
 8008450:	690f      	ldr	r7, [r1, #16]
 8008452:	2f00      	cmp	r7, #0
 8008454:	d0aa      	beq.n	80083ac <__sflush_r+0x18>
 8008456:	0793      	lsls	r3, r2, #30
 8008458:	bf18      	it	ne
 800845a:	2300      	movne	r3, #0
 800845c:	680e      	ldr	r6, [r1, #0]
 800845e:	bf08      	it	eq
 8008460:	694b      	ldreq	r3, [r1, #20]
 8008462:	1bf6      	subs	r6, r6, r7
 8008464:	600f      	str	r7, [r1, #0]
 8008466:	608b      	str	r3, [r1, #8]
 8008468:	2e00      	cmp	r6, #0
 800846a:	dd9f      	ble.n	80083ac <__sflush_r+0x18>
 800846c:	4633      	mov	r3, r6
 800846e:	463a      	mov	r2, r7
 8008470:	4628      	mov	r0, r5
 8008472:	6a21      	ldr	r1, [r4, #32]
 8008474:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008478:	47e0      	blx	ip
 800847a:	2800      	cmp	r0, #0
 800847c:	dc06      	bgt.n	800848c <__sflush_r+0xf8>
 800847e:	89a3      	ldrh	r3, [r4, #12]
 8008480:	f04f 30ff 	mov.w	r0, #4294967295
 8008484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008488:	81a3      	strh	r3, [r4, #12]
 800848a:	e790      	b.n	80083ae <__sflush_r+0x1a>
 800848c:	4407      	add	r7, r0
 800848e:	1a36      	subs	r6, r6, r0
 8008490:	e7ea      	b.n	8008468 <__sflush_r+0xd4>
 8008492:	bf00      	nop
 8008494:	20400001 	.word	0x20400001

08008498 <_fflush_r>:
 8008498:	b538      	push	{r3, r4, r5, lr}
 800849a:	690b      	ldr	r3, [r1, #16]
 800849c:	4605      	mov	r5, r0
 800849e:	460c      	mov	r4, r1
 80084a0:	b913      	cbnz	r3, 80084a8 <_fflush_r+0x10>
 80084a2:	2500      	movs	r5, #0
 80084a4:	4628      	mov	r0, r5
 80084a6:	bd38      	pop	{r3, r4, r5, pc}
 80084a8:	b118      	cbz	r0, 80084b2 <_fflush_r+0x1a>
 80084aa:	6983      	ldr	r3, [r0, #24]
 80084ac:	b90b      	cbnz	r3, 80084b2 <_fflush_r+0x1a>
 80084ae:	f000 f887 	bl	80085c0 <__sinit>
 80084b2:	4b14      	ldr	r3, [pc, #80]	; (8008504 <_fflush_r+0x6c>)
 80084b4:	429c      	cmp	r4, r3
 80084b6:	d11b      	bne.n	80084f0 <_fflush_r+0x58>
 80084b8:	686c      	ldr	r4, [r5, #4]
 80084ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d0ef      	beq.n	80084a2 <_fflush_r+0xa>
 80084c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80084c4:	07d0      	lsls	r0, r2, #31
 80084c6:	d404      	bmi.n	80084d2 <_fflush_r+0x3a>
 80084c8:	0599      	lsls	r1, r3, #22
 80084ca:	d402      	bmi.n	80084d2 <_fflush_r+0x3a>
 80084cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084ce:	f000 f915 	bl	80086fc <__retarget_lock_acquire_recursive>
 80084d2:	4628      	mov	r0, r5
 80084d4:	4621      	mov	r1, r4
 80084d6:	f7ff ff5d 	bl	8008394 <__sflush_r>
 80084da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084dc:	4605      	mov	r5, r0
 80084de:	07da      	lsls	r2, r3, #31
 80084e0:	d4e0      	bmi.n	80084a4 <_fflush_r+0xc>
 80084e2:	89a3      	ldrh	r3, [r4, #12]
 80084e4:	059b      	lsls	r3, r3, #22
 80084e6:	d4dd      	bmi.n	80084a4 <_fflush_r+0xc>
 80084e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084ea:	f000 f908 	bl	80086fe <__retarget_lock_release_recursive>
 80084ee:	e7d9      	b.n	80084a4 <_fflush_r+0xc>
 80084f0:	4b05      	ldr	r3, [pc, #20]	; (8008508 <_fflush_r+0x70>)
 80084f2:	429c      	cmp	r4, r3
 80084f4:	d101      	bne.n	80084fa <_fflush_r+0x62>
 80084f6:	68ac      	ldr	r4, [r5, #8]
 80084f8:	e7df      	b.n	80084ba <_fflush_r+0x22>
 80084fa:	4b04      	ldr	r3, [pc, #16]	; (800850c <_fflush_r+0x74>)
 80084fc:	429c      	cmp	r4, r3
 80084fe:	bf08      	it	eq
 8008500:	68ec      	ldreq	r4, [r5, #12]
 8008502:	e7da      	b.n	80084ba <_fflush_r+0x22>
 8008504:	0800977c 	.word	0x0800977c
 8008508:	0800979c 	.word	0x0800979c
 800850c:	0800975c 	.word	0x0800975c

08008510 <std>:
 8008510:	2300      	movs	r3, #0
 8008512:	b510      	push	{r4, lr}
 8008514:	4604      	mov	r4, r0
 8008516:	e9c0 3300 	strd	r3, r3, [r0]
 800851a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800851e:	6083      	str	r3, [r0, #8]
 8008520:	8181      	strh	r1, [r0, #12]
 8008522:	6643      	str	r3, [r0, #100]	; 0x64
 8008524:	81c2      	strh	r2, [r0, #14]
 8008526:	6183      	str	r3, [r0, #24]
 8008528:	4619      	mov	r1, r3
 800852a:	2208      	movs	r2, #8
 800852c:	305c      	adds	r0, #92	; 0x5c
 800852e:	f7fb fe0d 	bl	800414c <memset>
 8008532:	4b05      	ldr	r3, [pc, #20]	; (8008548 <std+0x38>)
 8008534:	6224      	str	r4, [r4, #32]
 8008536:	6263      	str	r3, [r4, #36]	; 0x24
 8008538:	4b04      	ldr	r3, [pc, #16]	; (800854c <std+0x3c>)
 800853a:	62a3      	str	r3, [r4, #40]	; 0x28
 800853c:	4b04      	ldr	r3, [pc, #16]	; (8008550 <std+0x40>)
 800853e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008540:	4b04      	ldr	r3, [pc, #16]	; (8008554 <std+0x44>)
 8008542:	6323      	str	r3, [r4, #48]	; 0x30
 8008544:	bd10      	pop	{r4, pc}
 8008546:	bf00      	nop
 8008548:	08008865 	.word	0x08008865
 800854c:	08008887 	.word	0x08008887
 8008550:	080088bf 	.word	0x080088bf
 8008554:	080088e3 	.word	0x080088e3

08008558 <_cleanup_r>:
 8008558:	4901      	ldr	r1, [pc, #4]	; (8008560 <_cleanup_r+0x8>)
 800855a:	f000 b8af 	b.w	80086bc <_fwalk_reent>
 800855e:	bf00      	nop
 8008560:	08008499 	.word	0x08008499

08008564 <__sfmoreglue>:
 8008564:	2268      	movs	r2, #104	; 0x68
 8008566:	b570      	push	{r4, r5, r6, lr}
 8008568:	1e4d      	subs	r5, r1, #1
 800856a:	4355      	muls	r5, r2
 800856c:	460e      	mov	r6, r1
 800856e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008572:	f7ff fa63 	bl	8007a3c <_malloc_r>
 8008576:	4604      	mov	r4, r0
 8008578:	b140      	cbz	r0, 800858c <__sfmoreglue+0x28>
 800857a:	2100      	movs	r1, #0
 800857c:	e9c0 1600 	strd	r1, r6, [r0]
 8008580:	300c      	adds	r0, #12
 8008582:	60a0      	str	r0, [r4, #8]
 8008584:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008588:	f7fb fde0 	bl	800414c <memset>
 800858c:	4620      	mov	r0, r4
 800858e:	bd70      	pop	{r4, r5, r6, pc}

08008590 <__sfp_lock_acquire>:
 8008590:	4801      	ldr	r0, [pc, #4]	; (8008598 <__sfp_lock_acquire+0x8>)
 8008592:	f000 b8b3 	b.w	80086fc <__retarget_lock_acquire_recursive>
 8008596:	bf00      	nop
 8008598:	200002e9 	.word	0x200002e9

0800859c <__sfp_lock_release>:
 800859c:	4801      	ldr	r0, [pc, #4]	; (80085a4 <__sfp_lock_release+0x8>)
 800859e:	f000 b8ae 	b.w	80086fe <__retarget_lock_release_recursive>
 80085a2:	bf00      	nop
 80085a4:	200002e9 	.word	0x200002e9

080085a8 <__sinit_lock_acquire>:
 80085a8:	4801      	ldr	r0, [pc, #4]	; (80085b0 <__sinit_lock_acquire+0x8>)
 80085aa:	f000 b8a7 	b.w	80086fc <__retarget_lock_acquire_recursive>
 80085ae:	bf00      	nop
 80085b0:	200002ea 	.word	0x200002ea

080085b4 <__sinit_lock_release>:
 80085b4:	4801      	ldr	r0, [pc, #4]	; (80085bc <__sinit_lock_release+0x8>)
 80085b6:	f000 b8a2 	b.w	80086fe <__retarget_lock_release_recursive>
 80085ba:	bf00      	nop
 80085bc:	200002ea 	.word	0x200002ea

080085c0 <__sinit>:
 80085c0:	b510      	push	{r4, lr}
 80085c2:	4604      	mov	r4, r0
 80085c4:	f7ff fff0 	bl	80085a8 <__sinit_lock_acquire>
 80085c8:	69a3      	ldr	r3, [r4, #24]
 80085ca:	b11b      	cbz	r3, 80085d4 <__sinit+0x14>
 80085cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085d0:	f7ff bff0 	b.w	80085b4 <__sinit_lock_release>
 80085d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80085d8:	6523      	str	r3, [r4, #80]	; 0x50
 80085da:	4b13      	ldr	r3, [pc, #76]	; (8008628 <__sinit+0x68>)
 80085dc:	4a13      	ldr	r2, [pc, #76]	; (800862c <__sinit+0x6c>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80085e2:	42a3      	cmp	r3, r4
 80085e4:	bf08      	it	eq
 80085e6:	2301      	moveq	r3, #1
 80085e8:	4620      	mov	r0, r4
 80085ea:	bf08      	it	eq
 80085ec:	61a3      	streq	r3, [r4, #24]
 80085ee:	f000 f81f 	bl	8008630 <__sfp>
 80085f2:	6060      	str	r0, [r4, #4]
 80085f4:	4620      	mov	r0, r4
 80085f6:	f000 f81b 	bl	8008630 <__sfp>
 80085fa:	60a0      	str	r0, [r4, #8]
 80085fc:	4620      	mov	r0, r4
 80085fe:	f000 f817 	bl	8008630 <__sfp>
 8008602:	2200      	movs	r2, #0
 8008604:	2104      	movs	r1, #4
 8008606:	60e0      	str	r0, [r4, #12]
 8008608:	6860      	ldr	r0, [r4, #4]
 800860a:	f7ff ff81 	bl	8008510 <std>
 800860e:	2201      	movs	r2, #1
 8008610:	2109      	movs	r1, #9
 8008612:	68a0      	ldr	r0, [r4, #8]
 8008614:	f7ff ff7c 	bl	8008510 <std>
 8008618:	2202      	movs	r2, #2
 800861a:	2112      	movs	r1, #18
 800861c:	68e0      	ldr	r0, [r4, #12]
 800861e:	f7ff ff77 	bl	8008510 <std>
 8008622:	2301      	movs	r3, #1
 8008624:	61a3      	str	r3, [r4, #24]
 8008626:	e7d1      	b.n	80085cc <__sinit+0xc>
 8008628:	08009314 	.word	0x08009314
 800862c:	08008559 	.word	0x08008559

08008630 <__sfp>:
 8008630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008632:	4607      	mov	r7, r0
 8008634:	f7ff ffac 	bl	8008590 <__sfp_lock_acquire>
 8008638:	4b1e      	ldr	r3, [pc, #120]	; (80086b4 <__sfp+0x84>)
 800863a:	681e      	ldr	r6, [r3, #0]
 800863c:	69b3      	ldr	r3, [r6, #24]
 800863e:	b913      	cbnz	r3, 8008646 <__sfp+0x16>
 8008640:	4630      	mov	r0, r6
 8008642:	f7ff ffbd 	bl	80085c0 <__sinit>
 8008646:	3648      	adds	r6, #72	; 0x48
 8008648:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800864c:	3b01      	subs	r3, #1
 800864e:	d503      	bpl.n	8008658 <__sfp+0x28>
 8008650:	6833      	ldr	r3, [r6, #0]
 8008652:	b30b      	cbz	r3, 8008698 <__sfp+0x68>
 8008654:	6836      	ldr	r6, [r6, #0]
 8008656:	e7f7      	b.n	8008648 <__sfp+0x18>
 8008658:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800865c:	b9d5      	cbnz	r5, 8008694 <__sfp+0x64>
 800865e:	4b16      	ldr	r3, [pc, #88]	; (80086b8 <__sfp+0x88>)
 8008660:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008664:	60e3      	str	r3, [r4, #12]
 8008666:	6665      	str	r5, [r4, #100]	; 0x64
 8008668:	f000 f847 	bl	80086fa <__retarget_lock_init_recursive>
 800866c:	f7ff ff96 	bl	800859c <__sfp_lock_release>
 8008670:	2208      	movs	r2, #8
 8008672:	4629      	mov	r1, r5
 8008674:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008678:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800867c:	6025      	str	r5, [r4, #0]
 800867e:	61a5      	str	r5, [r4, #24]
 8008680:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008684:	f7fb fd62 	bl	800414c <memset>
 8008688:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800868c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008690:	4620      	mov	r0, r4
 8008692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008694:	3468      	adds	r4, #104	; 0x68
 8008696:	e7d9      	b.n	800864c <__sfp+0x1c>
 8008698:	2104      	movs	r1, #4
 800869a:	4638      	mov	r0, r7
 800869c:	f7ff ff62 	bl	8008564 <__sfmoreglue>
 80086a0:	4604      	mov	r4, r0
 80086a2:	6030      	str	r0, [r6, #0]
 80086a4:	2800      	cmp	r0, #0
 80086a6:	d1d5      	bne.n	8008654 <__sfp+0x24>
 80086a8:	f7ff ff78 	bl	800859c <__sfp_lock_release>
 80086ac:	230c      	movs	r3, #12
 80086ae:	603b      	str	r3, [r7, #0]
 80086b0:	e7ee      	b.n	8008690 <__sfp+0x60>
 80086b2:	bf00      	nop
 80086b4:	08009314 	.word	0x08009314
 80086b8:	ffff0001 	.word	0xffff0001

080086bc <_fwalk_reent>:
 80086bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086c0:	4606      	mov	r6, r0
 80086c2:	4688      	mov	r8, r1
 80086c4:	2700      	movs	r7, #0
 80086c6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80086ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80086ce:	f1b9 0901 	subs.w	r9, r9, #1
 80086d2:	d505      	bpl.n	80086e0 <_fwalk_reent+0x24>
 80086d4:	6824      	ldr	r4, [r4, #0]
 80086d6:	2c00      	cmp	r4, #0
 80086d8:	d1f7      	bne.n	80086ca <_fwalk_reent+0xe>
 80086da:	4638      	mov	r0, r7
 80086dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086e0:	89ab      	ldrh	r3, [r5, #12]
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d907      	bls.n	80086f6 <_fwalk_reent+0x3a>
 80086e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086ea:	3301      	adds	r3, #1
 80086ec:	d003      	beq.n	80086f6 <_fwalk_reent+0x3a>
 80086ee:	4629      	mov	r1, r5
 80086f0:	4630      	mov	r0, r6
 80086f2:	47c0      	blx	r8
 80086f4:	4307      	orrs	r7, r0
 80086f6:	3568      	adds	r5, #104	; 0x68
 80086f8:	e7e9      	b.n	80086ce <_fwalk_reent+0x12>

080086fa <__retarget_lock_init_recursive>:
 80086fa:	4770      	bx	lr

080086fc <__retarget_lock_acquire_recursive>:
 80086fc:	4770      	bx	lr

080086fe <__retarget_lock_release_recursive>:
 80086fe:	4770      	bx	lr

08008700 <__swhatbuf_r>:
 8008700:	b570      	push	{r4, r5, r6, lr}
 8008702:	460e      	mov	r6, r1
 8008704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008708:	4614      	mov	r4, r2
 800870a:	2900      	cmp	r1, #0
 800870c:	461d      	mov	r5, r3
 800870e:	b096      	sub	sp, #88	; 0x58
 8008710:	da08      	bge.n	8008724 <__swhatbuf_r+0x24>
 8008712:	2200      	movs	r2, #0
 8008714:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008718:	602a      	str	r2, [r5, #0]
 800871a:	061a      	lsls	r2, r3, #24
 800871c:	d410      	bmi.n	8008740 <__swhatbuf_r+0x40>
 800871e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008722:	e00e      	b.n	8008742 <__swhatbuf_r+0x42>
 8008724:	466a      	mov	r2, sp
 8008726:	f000 f903 	bl	8008930 <_fstat_r>
 800872a:	2800      	cmp	r0, #0
 800872c:	dbf1      	blt.n	8008712 <__swhatbuf_r+0x12>
 800872e:	9a01      	ldr	r2, [sp, #4]
 8008730:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008734:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008738:	425a      	negs	r2, r3
 800873a:	415a      	adcs	r2, r3
 800873c:	602a      	str	r2, [r5, #0]
 800873e:	e7ee      	b.n	800871e <__swhatbuf_r+0x1e>
 8008740:	2340      	movs	r3, #64	; 0x40
 8008742:	2000      	movs	r0, #0
 8008744:	6023      	str	r3, [r4, #0]
 8008746:	b016      	add	sp, #88	; 0x58
 8008748:	bd70      	pop	{r4, r5, r6, pc}
	...

0800874c <__smakebuf_r>:
 800874c:	898b      	ldrh	r3, [r1, #12]
 800874e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008750:	079d      	lsls	r5, r3, #30
 8008752:	4606      	mov	r6, r0
 8008754:	460c      	mov	r4, r1
 8008756:	d507      	bpl.n	8008768 <__smakebuf_r+0x1c>
 8008758:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800875c:	6023      	str	r3, [r4, #0]
 800875e:	6123      	str	r3, [r4, #16]
 8008760:	2301      	movs	r3, #1
 8008762:	6163      	str	r3, [r4, #20]
 8008764:	b002      	add	sp, #8
 8008766:	bd70      	pop	{r4, r5, r6, pc}
 8008768:	466a      	mov	r2, sp
 800876a:	ab01      	add	r3, sp, #4
 800876c:	f7ff ffc8 	bl	8008700 <__swhatbuf_r>
 8008770:	9900      	ldr	r1, [sp, #0]
 8008772:	4605      	mov	r5, r0
 8008774:	4630      	mov	r0, r6
 8008776:	f7ff f961 	bl	8007a3c <_malloc_r>
 800877a:	b948      	cbnz	r0, 8008790 <__smakebuf_r+0x44>
 800877c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008780:	059a      	lsls	r2, r3, #22
 8008782:	d4ef      	bmi.n	8008764 <__smakebuf_r+0x18>
 8008784:	f023 0303 	bic.w	r3, r3, #3
 8008788:	f043 0302 	orr.w	r3, r3, #2
 800878c:	81a3      	strh	r3, [r4, #12]
 800878e:	e7e3      	b.n	8008758 <__smakebuf_r+0xc>
 8008790:	4b0d      	ldr	r3, [pc, #52]	; (80087c8 <__smakebuf_r+0x7c>)
 8008792:	62b3      	str	r3, [r6, #40]	; 0x28
 8008794:	89a3      	ldrh	r3, [r4, #12]
 8008796:	6020      	str	r0, [r4, #0]
 8008798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800879c:	81a3      	strh	r3, [r4, #12]
 800879e:	9b00      	ldr	r3, [sp, #0]
 80087a0:	6120      	str	r0, [r4, #16]
 80087a2:	6163      	str	r3, [r4, #20]
 80087a4:	9b01      	ldr	r3, [sp, #4]
 80087a6:	b15b      	cbz	r3, 80087c0 <__smakebuf_r+0x74>
 80087a8:	4630      	mov	r0, r6
 80087aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087ae:	f000 f8d1 	bl	8008954 <_isatty_r>
 80087b2:	b128      	cbz	r0, 80087c0 <__smakebuf_r+0x74>
 80087b4:	89a3      	ldrh	r3, [r4, #12]
 80087b6:	f023 0303 	bic.w	r3, r3, #3
 80087ba:	f043 0301 	orr.w	r3, r3, #1
 80087be:	81a3      	strh	r3, [r4, #12]
 80087c0:	89a0      	ldrh	r0, [r4, #12]
 80087c2:	4305      	orrs	r5, r0
 80087c4:	81a5      	strh	r5, [r4, #12]
 80087c6:	e7cd      	b.n	8008764 <__smakebuf_r+0x18>
 80087c8:	08008559 	.word	0x08008559

080087cc <_malloc_usable_size_r>:
 80087cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087d0:	1f18      	subs	r0, r3, #4
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	bfbc      	itt	lt
 80087d6:	580b      	ldrlt	r3, [r1, r0]
 80087d8:	18c0      	addlt	r0, r0, r3
 80087da:	4770      	bx	lr

080087dc <_raise_r>:
 80087dc:	291f      	cmp	r1, #31
 80087de:	b538      	push	{r3, r4, r5, lr}
 80087e0:	4604      	mov	r4, r0
 80087e2:	460d      	mov	r5, r1
 80087e4:	d904      	bls.n	80087f0 <_raise_r+0x14>
 80087e6:	2316      	movs	r3, #22
 80087e8:	6003      	str	r3, [r0, #0]
 80087ea:	f04f 30ff 	mov.w	r0, #4294967295
 80087ee:	bd38      	pop	{r3, r4, r5, pc}
 80087f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80087f2:	b112      	cbz	r2, 80087fa <_raise_r+0x1e>
 80087f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80087f8:	b94b      	cbnz	r3, 800880e <_raise_r+0x32>
 80087fa:	4620      	mov	r0, r4
 80087fc:	f000 f830 	bl	8008860 <_getpid_r>
 8008800:	462a      	mov	r2, r5
 8008802:	4601      	mov	r1, r0
 8008804:	4620      	mov	r0, r4
 8008806:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800880a:	f000 b817 	b.w	800883c <_kill_r>
 800880e:	2b01      	cmp	r3, #1
 8008810:	d00a      	beq.n	8008828 <_raise_r+0x4c>
 8008812:	1c59      	adds	r1, r3, #1
 8008814:	d103      	bne.n	800881e <_raise_r+0x42>
 8008816:	2316      	movs	r3, #22
 8008818:	6003      	str	r3, [r0, #0]
 800881a:	2001      	movs	r0, #1
 800881c:	e7e7      	b.n	80087ee <_raise_r+0x12>
 800881e:	2400      	movs	r4, #0
 8008820:	4628      	mov	r0, r5
 8008822:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008826:	4798      	blx	r3
 8008828:	2000      	movs	r0, #0
 800882a:	e7e0      	b.n	80087ee <_raise_r+0x12>

0800882c <raise>:
 800882c:	4b02      	ldr	r3, [pc, #8]	; (8008838 <raise+0xc>)
 800882e:	4601      	mov	r1, r0
 8008830:	6818      	ldr	r0, [r3, #0]
 8008832:	f7ff bfd3 	b.w	80087dc <_raise_r>
 8008836:	bf00      	nop
 8008838:	2000007c 	.word	0x2000007c

0800883c <_kill_r>:
 800883c:	b538      	push	{r3, r4, r5, lr}
 800883e:	2300      	movs	r3, #0
 8008840:	4d06      	ldr	r5, [pc, #24]	; (800885c <_kill_r+0x20>)
 8008842:	4604      	mov	r4, r0
 8008844:	4608      	mov	r0, r1
 8008846:	4611      	mov	r1, r2
 8008848:	602b      	str	r3, [r5, #0]
 800884a:	f7f8 feb9 	bl	80015c0 <_kill>
 800884e:	1c43      	adds	r3, r0, #1
 8008850:	d102      	bne.n	8008858 <_kill_r+0x1c>
 8008852:	682b      	ldr	r3, [r5, #0]
 8008854:	b103      	cbz	r3, 8008858 <_kill_r+0x1c>
 8008856:	6023      	str	r3, [r4, #0]
 8008858:	bd38      	pop	{r3, r4, r5, pc}
 800885a:	bf00      	nop
 800885c:	200002e4 	.word	0x200002e4

08008860 <_getpid_r>:
 8008860:	f7f8 bea7 	b.w	80015b2 <_getpid>

08008864 <__sread>:
 8008864:	b510      	push	{r4, lr}
 8008866:	460c      	mov	r4, r1
 8008868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800886c:	f000 f894 	bl	8008998 <_read_r>
 8008870:	2800      	cmp	r0, #0
 8008872:	bfab      	itete	ge
 8008874:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008876:	89a3      	ldrhlt	r3, [r4, #12]
 8008878:	181b      	addge	r3, r3, r0
 800887a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800887e:	bfac      	ite	ge
 8008880:	6563      	strge	r3, [r4, #84]	; 0x54
 8008882:	81a3      	strhlt	r3, [r4, #12]
 8008884:	bd10      	pop	{r4, pc}

08008886 <__swrite>:
 8008886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800888a:	461f      	mov	r7, r3
 800888c:	898b      	ldrh	r3, [r1, #12]
 800888e:	4605      	mov	r5, r0
 8008890:	05db      	lsls	r3, r3, #23
 8008892:	460c      	mov	r4, r1
 8008894:	4616      	mov	r6, r2
 8008896:	d505      	bpl.n	80088a4 <__swrite+0x1e>
 8008898:	2302      	movs	r3, #2
 800889a:	2200      	movs	r2, #0
 800889c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088a0:	f000 f868 	bl	8008974 <_lseek_r>
 80088a4:	89a3      	ldrh	r3, [r4, #12]
 80088a6:	4632      	mov	r2, r6
 80088a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088ac:	81a3      	strh	r3, [r4, #12]
 80088ae:	4628      	mov	r0, r5
 80088b0:	463b      	mov	r3, r7
 80088b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088ba:	f000 b817 	b.w	80088ec <_write_r>

080088be <__sseek>:
 80088be:	b510      	push	{r4, lr}
 80088c0:	460c      	mov	r4, r1
 80088c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088c6:	f000 f855 	bl	8008974 <_lseek_r>
 80088ca:	1c43      	adds	r3, r0, #1
 80088cc:	89a3      	ldrh	r3, [r4, #12]
 80088ce:	bf15      	itete	ne
 80088d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80088d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80088d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80088da:	81a3      	strheq	r3, [r4, #12]
 80088dc:	bf18      	it	ne
 80088de:	81a3      	strhne	r3, [r4, #12]
 80088e0:	bd10      	pop	{r4, pc}

080088e2 <__sclose>:
 80088e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088e6:	f000 b813 	b.w	8008910 <_close_r>
	...

080088ec <_write_r>:
 80088ec:	b538      	push	{r3, r4, r5, lr}
 80088ee:	4604      	mov	r4, r0
 80088f0:	4608      	mov	r0, r1
 80088f2:	4611      	mov	r1, r2
 80088f4:	2200      	movs	r2, #0
 80088f6:	4d05      	ldr	r5, [pc, #20]	; (800890c <_write_r+0x20>)
 80088f8:	602a      	str	r2, [r5, #0]
 80088fa:	461a      	mov	r2, r3
 80088fc:	f7f8 fe97 	bl	800162e <_write>
 8008900:	1c43      	adds	r3, r0, #1
 8008902:	d102      	bne.n	800890a <_write_r+0x1e>
 8008904:	682b      	ldr	r3, [r5, #0]
 8008906:	b103      	cbz	r3, 800890a <_write_r+0x1e>
 8008908:	6023      	str	r3, [r4, #0]
 800890a:	bd38      	pop	{r3, r4, r5, pc}
 800890c:	200002e4 	.word	0x200002e4

08008910 <_close_r>:
 8008910:	b538      	push	{r3, r4, r5, lr}
 8008912:	2300      	movs	r3, #0
 8008914:	4d05      	ldr	r5, [pc, #20]	; (800892c <_close_r+0x1c>)
 8008916:	4604      	mov	r4, r0
 8008918:	4608      	mov	r0, r1
 800891a:	602b      	str	r3, [r5, #0]
 800891c:	f7f8 fea3 	bl	8001666 <_close>
 8008920:	1c43      	adds	r3, r0, #1
 8008922:	d102      	bne.n	800892a <_close_r+0x1a>
 8008924:	682b      	ldr	r3, [r5, #0]
 8008926:	b103      	cbz	r3, 800892a <_close_r+0x1a>
 8008928:	6023      	str	r3, [r4, #0]
 800892a:	bd38      	pop	{r3, r4, r5, pc}
 800892c:	200002e4 	.word	0x200002e4

08008930 <_fstat_r>:
 8008930:	b538      	push	{r3, r4, r5, lr}
 8008932:	2300      	movs	r3, #0
 8008934:	4d06      	ldr	r5, [pc, #24]	; (8008950 <_fstat_r+0x20>)
 8008936:	4604      	mov	r4, r0
 8008938:	4608      	mov	r0, r1
 800893a:	4611      	mov	r1, r2
 800893c:	602b      	str	r3, [r5, #0]
 800893e:	f7f8 fe9d 	bl	800167c <_fstat>
 8008942:	1c43      	adds	r3, r0, #1
 8008944:	d102      	bne.n	800894c <_fstat_r+0x1c>
 8008946:	682b      	ldr	r3, [r5, #0]
 8008948:	b103      	cbz	r3, 800894c <_fstat_r+0x1c>
 800894a:	6023      	str	r3, [r4, #0]
 800894c:	bd38      	pop	{r3, r4, r5, pc}
 800894e:	bf00      	nop
 8008950:	200002e4 	.word	0x200002e4

08008954 <_isatty_r>:
 8008954:	b538      	push	{r3, r4, r5, lr}
 8008956:	2300      	movs	r3, #0
 8008958:	4d05      	ldr	r5, [pc, #20]	; (8008970 <_isatty_r+0x1c>)
 800895a:	4604      	mov	r4, r0
 800895c:	4608      	mov	r0, r1
 800895e:	602b      	str	r3, [r5, #0]
 8008960:	f7f8 fe9b 	bl	800169a <_isatty>
 8008964:	1c43      	adds	r3, r0, #1
 8008966:	d102      	bne.n	800896e <_isatty_r+0x1a>
 8008968:	682b      	ldr	r3, [r5, #0]
 800896a:	b103      	cbz	r3, 800896e <_isatty_r+0x1a>
 800896c:	6023      	str	r3, [r4, #0]
 800896e:	bd38      	pop	{r3, r4, r5, pc}
 8008970:	200002e4 	.word	0x200002e4

08008974 <_lseek_r>:
 8008974:	b538      	push	{r3, r4, r5, lr}
 8008976:	4604      	mov	r4, r0
 8008978:	4608      	mov	r0, r1
 800897a:	4611      	mov	r1, r2
 800897c:	2200      	movs	r2, #0
 800897e:	4d05      	ldr	r5, [pc, #20]	; (8008994 <_lseek_r+0x20>)
 8008980:	602a      	str	r2, [r5, #0]
 8008982:	461a      	mov	r2, r3
 8008984:	f7f8 fe93 	bl	80016ae <_lseek>
 8008988:	1c43      	adds	r3, r0, #1
 800898a:	d102      	bne.n	8008992 <_lseek_r+0x1e>
 800898c:	682b      	ldr	r3, [r5, #0]
 800898e:	b103      	cbz	r3, 8008992 <_lseek_r+0x1e>
 8008990:	6023      	str	r3, [r4, #0]
 8008992:	bd38      	pop	{r3, r4, r5, pc}
 8008994:	200002e4 	.word	0x200002e4

08008998 <_read_r>:
 8008998:	b538      	push	{r3, r4, r5, lr}
 800899a:	4604      	mov	r4, r0
 800899c:	4608      	mov	r0, r1
 800899e:	4611      	mov	r1, r2
 80089a0:	2200      	movs	r2, #0
 80089a2:	4d05      	ldr	r5, [pc, #20]	; (80089b8 <_read_r+0x20>)
 80089a4:	602a      	str	r2, [r5, #0]
 80089a6:	461a      	mov	r2, r3
 80089a8:	f7f8 fe24 	bl	80015f4 <_read>
 80089ac:	1c43      	adds	r3, r0, #1
 80089ae:	d102      	bne.n	80089b6 <_read_r+0x1e>
 80089b0:	682b      	ldr	r3, [r5, #0]
 80089b2:	b103      	cbz	r3, 80089b6 <_read_r+0x1e>
 80089b4:	6023      	str	r3, [r4, #0]
 80089b6:	bd38      	pop	{r3, r4, r5, pc}
 80089b8:	200002e4 	.word	0x200002e4

080089bc <powf>:
 80089bc:	b570      	push	{r4, r5, r6, lr}
 80089be:	460c      	mov	r4, r1
 80089c0:	4606      	mov	r6, r0
 80089c2:	f000 f849 	bl	8008a58 <__ieee754_powf>
 80089c6:	4621      	mov	r1, r4
 80089c8:	4605      	mov	r5, r0
 80089ca:	4620      	mov	r0, r4
 80089cc:	f7f8 fba0 	bl	8001110 <__aeabi_fcmpun>
 80089d0:	bb68      	cbnz	r0, 8008a2e <powf+0x72>
 80089d2:	2100      	movs	r1, #0
 80089d4:	4630      	mov	r0, r6
 80089d6:	f7f8 fb69 	bl	80010ac <__aeabi_fcmpeq>
 80089da:	b190      	cbz	r0, 8008a02 <powf+0x46>
 80089dc:	2100      	movs	r1, #0
 80089de:	4620      	mov	r0, r4
 80089e0:	f7f8 fb64 	bl	80010ac <__aeabi_fcmpeq>
 80089e4:	2800      	cmp	r0, #0
 80089e6:	d133      	bne.n	8008a50 <powf+0x94>
 80089e8:	4620      	mov	r0, r4
 80089ea:	f000 fc0e 	bl	800920a <finitef>
 80089ee:	b1f0      	cbz	r0, 8008a2e <powf+0x72>
 80089f0:	2100      	movs	r1, #0
 80089f2:	4620      	mov	r0, r4
 80089f4:	f7f8 fb64 	bl	80010c0 <__aeabi_fcmplt>
 80089f8:	b1c8      	cbz	r0, 8008a2e <powf+0x72>
 80089fa:	f7fb fb7d 	bl	80040f8 <__errno>
 80089fe:	2322      	movs	r3, #34	; 0x22
 8008a00:	e014      	b.n	8008a2c <powf+0x70>
 8008a02:	4628      	mov	r0, r5
 8008a04:	f000 fc01 	bl	800920a <finitef>
 8008a08:	b998      	cbnz	r0, 8008a32 <powf+0x76>
 8008a0a:	4630      	mov	r0, r6
 8008a0c:	f000 fbfd 	bl	800920a <finitef>
 8008a10:	b178      	cbz	r0, 8008a32 <powf+0x76>
 8008a12:	4620      	mov	r0, r4
 8008a14:	f000 fbf9 	bl	800920a <finitef>
 8008a18:	b158      	cbz	r0, 8008a32 <powf+0x76>
 8008a1a:	4629      	mov	r1, r5
 8008a1c:	4628      	mov	r0, r5
 8008a1e:	f7f8 fb77 	bl	8001110 <__aeabi_fcmpun>
 8008a22:	2800      	cmp	r0, #0
 8008a24:	d0e9      	beq.n	80089fa <powf+0x3e>
 8008a26:	f7fb fb67 	bl	80040f8 <__errno>
 8008a2a:	2321      	movs	r3, #33	; 0x21
 8008a2c:	6003      	str	r3, [r0, #0]
 8008a2e:	4628      	mov	r0, r5
 8008a30:	bd70      	pop	{r4, r5, r6, pc}
 8008a32:	2100      	movs	r1, #0
 8008a34:	4628      	mov	r0, r5
 8008a36:	f7f8 fb39 	bl	80010ac <__aeabi_fcmpeq>
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	d0f7      	beq.n	8008a2e <powf+0x72>
 8008a3e:	4630      	mov	r0, r6
 8008a40:	f000 fbe3 	bl	800920a <finitef>
 8008a44:	2800      	cmp	r0, #0
 8008a46:	d0f2      	beq.n	8008a2e <powf+0x72>
 8008a48:	4620      	mov	r0, r4
 8008a4a:	f000 fbde 	bl	800920a <finitef>
 8008a4e:	e7d3      	b.n	80089f8 <powf+0x3c>
 8008a50:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 8008a54:	e7eb      	b.n	8008a2e <powf+0x72>
	...

08008a58 <__ieee754_powf>:
 8008a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a5c:	f031 4a00 	bics.w	sl, r1, #2147483648	; 0x80000000
 8008a60:	4681      	mov	r9, r0
 8008a62:	460f      	mov	r7, r1
 8008a64:	4680      	mov	r8, r0
 8008a66:	460c      	mov	r4, r1
 8008a68:	b087      	sub	sp, #28
 8008a6a:	d10d      	bne.n	8008a88 <__ieee754_powf+0x30>
 8008a6c:	f480 0880 	eor.w	r8, r0, #4194304	; 0x400000
 8008a70:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8008a74:	f518 0f00 	cmn.w	r8, #8388608	; 0x800000
 8008a78:	f240 8338 	bls.w	80090ec <__ieee754_powf+0x694>
 8008a7c:	4639      	mov	r1, r7
 8008a7e:	4648      	mov	r0, r9
 8008a80:	f7f8 f878 	bl	8000b74 <__addsf3>
 8008a84:	4601      	mov	r1, r0
 8008a86:	e040      	b.n	8008b0a <__ieee754_powf+0xb2>
 8008a88:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8008a8c:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8008a90:	dcf4      	bgt.n	8008a7c <__ieee754_powf+0x24>
 8008a92:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
 8008a96:	dd08      	ble.n	8008aaa <__ieee754_powf+0x52>
 8008a98:	f1b0 5f7e 	cmp.w	r0, #1065353216	; 0x3f800000
 8008a9c:	d1ee      	bne.n	8008a7c <__ieee754_powf+0x24>
 8008a9e:	f481 0480 	eor.w	r4, r1, #4194304	; 0x400000
 8008aa2:	0064      	lsls	r4, r4, #1
 8008aa4:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8008aa8:	e7e6      	b.n	8008a78 <__ieee754_powf+0x20>
 8008aaa:	2800      	cmp	r0, #0
 8008aac:	da20      	bge.n	8008af0 <__ieee754_powf+0x98>
 8008aae:	f1ba 4f97 	cmp.w	sl, #1266679808	; 0x4b800000
 8008ab2:	da2e      	bge.n	8008b12 <__ieee754_powf+0xba>
 8008ab4:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
 8008ab8:	f2c0 831d 	blt.w	80090f6 <__ieee754_powf+0x69e>
 8008abc:	ea4f 53ea 	mov.w	r3, sl, asr #23
 8008ac0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8008ac4:	fa4a f503 	asr.w	r5, sl, r3
 8008ac8:	fa05 f303 	lsl.w	r3, r5, r3
 8008acc:	4553      	cmp	r3, sl
 8008ace:	f040 8312 	bne.w	80090f6 <__ieee754_powf+0x69e>
 8008ad2:	f005 0501 	and.w	r5, r5, #1
 8008ad6:	f1c5 0502 	rsb	r5, r5, #2
 8008ada:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
 8008ade:	d120      	bne.n	8008b22 <__ieee754_powf+0xca>
 8008ae0:	2c00      	cmp	r4, #0
 8008ae2:	4649      	mov	r1, r9
 8008ae4:	da11      	bge.n	8008b0a <__ieee754_powf+0xb2>
 8008ae6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008aea:	f7f8 f9ff 	bl	8000eec <__aeabi_fdiv>
 8008aee:	e7c9      	b.n	8008a84 <__ieee754_powf+0x2c>
 8008af0:	2500      	movs	r5, #0
 8008af2:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
 8008af6:	d1f0      	bne.n	8008ada <__ieee754_powf+0x82>
 8008af8:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8008afc:	f000 82f6 	beq.w	80090ec <__ieee754_powf+0x694>
 8008b00:	dd09      	ble.n	8008b16 <__ieee754_powf+0xbe>
 8008b02:	2c00      	cmp	r4, #0
 8008b04:	f2c0 82f5 	blt.w	80090f2 <__ieee754_powf+0x69a>
 8008b08:	4639      	mov	r1, r7
 8008b0a:	4608      	mov	r0, r1
 8008b0c:	b007      	add	sp, #28
 8008b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b12:	2502      	movs	r5, #2
 8008b14:	e7ed      	b.n	8008af2 <__ieee754_powf+0x9a>
 8008b16:	2c00      	cmp	r4, #0
 8008b18:	f280 82eb 	bge.w	80090f2 <__ieee754_powf+0x69a>
 8008b1c:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 8008b20:	e7f3      	b.n	8008b0a <__ieee754_powf+0xb2>
 8008b22:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8008b26:	d104      	bne.n	8008b32 <__ieee754_powf+0xda>
 8008b28:	4649      	mov	r1, r9
 8008b2a:	4648      	mov	r0, r9
 8008b2c:	f7f8 f92a 	bl	8000d84 <__aeabi_fmul>
 8008b30:	e7a8      	b.n	8008a84 <__ieee754_powf+0x2c>
 8008b32:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8008b36:	4648      	mov	r0, r9
 8008b38:	d107      	bne.n	8008b4a <__ieee754_powf+0xf2>
 8008b3a:	f1b8 0f00 	cmp.w	r8, #0
 8008b3e:	db04      	blt.n	8008b4a <__ieee754_powf+0xf2>
 8008b40:	b007      	add	sp, #28
 8008b42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b46:	f000 baef 	b.w	8009128 <__ieee754_sqrtf>
 8008b4a:	f000 fb5b 	bl	8009204 <fabsf>
 8008b4e:	4601      	mov	r1, r0
 8008b50:	b126      	cbz	r6, 8008b5c <__ieee754_powf+0x104>
 8008b52:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8008b56:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8008b5a:	d118      	bne.n	8008b8e <__ieee754_powf+0x136>
 8008b5c:	2c00      	cmp	r4, #0
 8008b5e:	da04      	bge.n	8008b6a <__ieee754_powf+0x112>
 8008b60:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008b64:	f7f8 f9c2 	bl	8000eec <__aeabi_fdiv>
 8008b68:	4601      	mov	r1, r0
 8008b6a:	f1b8 0f00 	cmp.w	r8, #0
 8008b6e:	dacc      	bge.n	8008b0a <__ieee754_powf+0xb2>
 8008b70:	f1a6 567e 	sub.w	r6, r6, #1065353216	; 0x3f800000
 8008b74:	ea56 0305 	orrs.w	r3, r6, r5
 8008b78:	d104      	bne.n	8008b84 <__ieee754_powf+0x12c>
 8008b7a:	4608      	mov	r0, r1
 8008b7c:	f7f7 fff8 	bl	8000b70 <__aeabi_fsub>
 8008b80:	4601      	mov	r1, r0
 8008b82:	e7b2      	b.n	8008aea <__ieee754_powf+0x92>
 8008b84:	2d01      	cmp	r5, #1
 8008b86:	d1c0      	bne.n	8008b0a <__ieee754_powf+0xb2>
 8008b88:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 8008b8c:	e77a      	b.n	8008a84 <__ieee754_powf+0x2c>
 8008b8e:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8008b92:	3b01      	subs	r3, #1
 8008b94:	9302      	str	r3, [sp, #8]
 8008b96:	432b      	orrs	r3, r5
 8008b98:	d101      	bne.n	8008b9e <__ieee754_powf+0x146>
 8008b9a:	4649      	mov	r1, r9
 8008b9c:	e7ed      	b.n	8008b7a <__ieee754_powf+0x122>
 8008b9e:	f1ba 4f9a 	cmp.w	sl, #1291845632	; 0x4d000000
 8008ba2:	f340 809f 	ble.w	8008ce4 <__ieee754_powf+0x28c>
 8008ba6:	4b48      	ldr	r3, [pc, #288]	; (8008cc8 <__ieee754_powf+0x270>)
 8008ba8:	429e      	cmp	r6, r3
 8008baa:	dc07      	bgt.n	8008bbc <__ieee754_powf+0x164>
 8008bac:	2c00      	cmp	r4, #0
 8008bae:	da0a      	bge.n	8008bc6 <__ieee754_powf+0x16e>
 8008bb0:	2000      	movs	r0, #0
 8008bb2:	b007      	add	sp, #28
 8008bb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb8:	f000 bb20 	b.w	80091fc <__math_oflowf>
 8008bbc:	4b43      	ldr	r3, [pc, #268]	; (8008ccc <__ieee754_powf+0x274>)
 8008bbe:	429e      	cmp	r6, r3
 8008bc0:	dd07      	ble.n	8008bd2 <__ieee754_powf+0x17a>
 8008bc2:	2c00      	cmp	r4, #0
 8008bc4:	dcf4      	bgt.n	8008bb0 <__ieee754_powf+0x158>
 8008bc6:	2000      	movs	r0, #0
 8008bc8:	b007      	add	sp, #28
 8008bca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bce:	f000 bb11 	b.w	80091f4 <__math_uflowf>
 8008bd2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008bd6:	f7f7 ffcb 	bl	8000b70 <__aeabi_fsub>
 8008bda:	493d      	ldr	r1, [pc, #244]	; (8008cd0 <__ieee754_powf+0x278>)
 8008bdc:	4606      	mov	r6, r0
 8008bde:	f7f8 f8d1 	bl	8000d84 <__aeabi_fmul>
 8008be2:	493c      	ldr	r1, [pc, #240]	; (8008cd4 <__ieee754_powf+0x27c>)
 8008be4:	4680      	mov	r8, r0
 8008be6:	4630      	mov	r0, r6
 8008be8:	f7f8 f8cc 	bl	8000d84 <__aeabi_fmul>
 8008bec:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8008bf0:	4681      	mov	r9, r0
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	f7f8 f8c6 	bl	8000d84 <__aeabi_fmul>
 8008bf8:	4601      	mov	r1, r0
 8008bfa:	4837      	ldr	r0, [pc, #220]	; (8008cd8 <__ieee754_powf+0x280>)
 8008bfc:	f7f7 ffb8 	bl	8000b70 <__aeabi_fsub>
 8008c00:	4631      	mov	r1, r6
 8008c02:	f7f8 f8bf 	bl	8000d84 <__aeabi_fmul>
 8008c06:	4601      	mov	r1, r0
 8008c08:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8008c0c:	f7f7 ffb0 	bl	8000b70 <__aeabi_fsub>
 8008c10:	4631      	mov	r1, r6
 8008c12:	4682      	mov	sl, r0
 8008c14:	4630      	mov	r0, r6
 8008c16:	f7f8 f8b5 	bl	8000d84 <__aeabi_fmul>
 8008c1a:	4601      	mov	r1, r0
 8008c1c:	4650      	mov	r0, sl
 8008c1e:	f7f8 f8b1 	bl	8000d84 <__aeabi_fmul>
 8008c22:	492e      	ldr	r1, [pc, #184]	; (8008cdc <__ieee754_powf+0x284>)
 8008c24:	f7f8 f8ae 	bl	8000d84 <__aeabi_fmul>
 8008c28:	4601      	mov	r1, r0
 8008c2a:	4648      	mov	r0, r9
 8008c2c:	f7f7 ffa0 	bl	8000b70 <__aeabi_fsub>
 8008c30:	4601      	mov	r1, r0
 8008c32:	4606      	mov	r6, r0
 8008c34:	4640      	mov	r0, r8
 8008c36:	f7f7 ff9d 	bl	8000b74 <__addsf3>
 8008c3a:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8008c3e:	f029 090f 	bic.w	r9, r9, #15
 8008c42:	4641      	mov	r1, r8
 8008c44:	4648      	mov	r0, r9
 8008c46:	f7f7 ff93 	bl	8000b70 <__aeabi_fsub>
 8008c4a:	4601      	mov	r1, r0
 8008c4c:	4630      	mov	r0, r6
 8008c4e:	f7f7 ff8f 	bl	8000b70 <__aeabi_fsub>
 8008c52:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8008c56:	9b02      	ldr	r3, [sp, #8]
 8008c58:	3d01      	subs	r5, #1
 8008c5a:	f024 040f 	bic.w	r4, r4, #15
 8008c5e:	432b      	orrs	r3, r5
 8008c60:	4606      	mov	r6, r0
 8008c62:	4621      	mov	r1, r4
 8008c64:	4638      	mov	r0, r7
 8008c66:	bf14      	ite	ne
 8008c68:	f04f 557e 	movne.w	r5, #1065353216	; 0x3f800000
 8008c6c:	4d1c      	ldreq	r5, [pc, #112]	; (8008ce0 <__ieee754_powf+0x288>)
 8008c6e:	f7f7 ff7f 	bl	8000b70 <__aeabi_fsub>
 8008c72:	4649      	mov	r1, r9
 8008c74:	f7f8 f886 	bl	8000d84 <__aeabi_fmul>
 8008c78:	4639      	mov	r1, r7
 8008c7a:	4680      	mov	r8, r0
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	f7f8 f881 	bl	8000d84 <__aeabi_fmul>
 8008c82:	4601      	mov	r1, r0
 8008c84:	4640      	mov	r0, r8
 8008c86:	f7f7 ff75 	bl	8000b74 <__addsf3>
 8008c8a:	4621      	mov	r1, r4
 8008c8c:	4606      	mov	r6, r0
 8008c8e:	4648      	mov	r0, r9
 8008c90:	f7f8 f878 	bl	8000d84 <__aeabi_fmul>
 8008c94:	4601      	mov	r1, r0
 8008c96:	4607      	mov	r7, r0
 8008c98:	4681      	mov	r9, r0
 8008c9a:	4630      	mov	r0, r6
 8008c9c:	f7f7 ff6a 	bl	8000b74 <__addsf3>
 8008ca0:	2800      	cmp	r0, #0
 8008ca2:	4682      	mov	sl, r0
 8008ca4:	4680      	mov	r8, r0
 8008ca6:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8008caa:	f340 8201 	ble.w	80090b0 <__ieee754_powf+0x658>
 8008cae:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
 8008cb2:	f340 814f 	ble.w	8008f54 <__ieee754_powf+0x4fc>
 8008cb6:	2100      	movs	r1, #0
 8008cb8:	4628      	mov	r0, r5
 8008cba:	f7f8 fa01 	bl	80010c0 <__aeabi_fcmplt>
 8008cbe:	3800      	subs	r0, #0
 8008cc0:	bf18      	it	ne
 8008cc2:	2001      	movne	r0, #1
 8008cc4:	e775      	b.n	8008bb2 <__ieee754_powf+0x15a>
 8008cc6:	bf00      	nop
 8008cc8:	3f7ffff3 	.word	0x3f7ffff3
 8008ccc:	3f800007 	.word	0x3f800007
 8008cd0:	3fb8aa00 	.word	0x3fb8aa00
 8008cd4:	36eca570 	.word	0x36eca570
 8008cd8:	3eaaaaab 	.word	0x3eaaaaab
 8008cdc:	3fb8aa3b 	.word	0x3fb8aa3b
 8008ce0:	bf800000 	.word	0xbf800000
 8008ce4:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8008ce8:	f040 8111 	bne.w	8008f0e <__ieee754_powf+0x4b6>
 8008cec:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 8008cf0:	f7f8 f848 	bl	8000d84 <__aeabi_fmul>
 8008cf4:	f06f 0217 	mvn.w	r2, #23
 8008cf8:	4606      	mov	r6, r0
 8008cfa:	15f3      	asrs	r3, r6, #23
 8008cfc:	3b7f      	subs	r3, #127	; 0x7f
 8008cfe:	4413      	add	r3, r2
 8008d00:	9301      	str	r3, [sp, #4]
 8008d02:	4b85      	ldr	r3, [pc, #532]	; (8008f18 <__ieee754_powf+0x4c0>)
 8008d04:	f3c6 0016 	ubfx	r0, r6, #0, #23
 8008d08:	4298      	cmp	r0, r3
 8008d0a:	f040 567e 	orr.w	r6, r0, #1065353216	; 0x3f800000
 8008d0e:	dd08      	ble.n	8008d22 <__ieee754_powf+0x2ca>
 8008d10:	4b82      	ldr	r3, [pc, #520]	; (8008f1c <__ieee754_powf+0x4c4>)
 8008d12:	4298      	cmp	r0, r3
 8008d14:	f340 80fd 	ble.w	8008f12 <__ieee754_powf+0x4ba>
 8008d18:	9b01      	ldr	r3, [sp, #4]
 8008d1a:	f5a6 0600 	sub.w	r6, r6, #8388608	; 0x800000
 8008d1e:	3301      	adds	r3, #1
 8008d20:	9301      	str	r3, [sp, #4]
 8008d22:	2300      	movs	r3, #0
 8008d24:	9300      	str	r3, [sp, #0]
 8008d26:	9900      	ldr	r1, [sp, #0]
 8008d28:	4a7d      	ldr	r2, [pc, #500]	; (8008f20 <__ieee754_powf+0x4c8>)
 8008d2a:	4630      	mov	r0, r6
 8008d2c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008d30:	9603      	str	r6, [sp, #12]
 8008d32:	4611      	mov	r1, r2
 8008d34:	9205      	str	r2, [sp, #20]
 8008d36:	f7f7 ff1b 	bl	8000b70 <__aeabi_fsub>
 8008d3a:	9a05      	ldr	r2, [sp, #20]
 8008d3c:	9b03      	ldr	r3, [sp, #12]
 8008d3e:	4683      	mov	fp, r0
 8008d40:	4619      	mov	r1, r3
 8008d42:	4610      	mov	r0, r2
 8008d44:	9203      	str	r2, [sp, #12]
 8008d46:	9304      	str	r3, [sp, #16]
 8008d48:	f7f7 ff14 	bl	8000b74 <__addsf3>
 8008d4c:	4601      	mov	r1, r0
 8008d4e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008d52:	f7f8 f8cb 	bl	8000eec <__aeabi_fdiv>
 8008d56:	4682      	mov	sl, r0
 8008d58:	4601      	mov	r1, r0
 8008d5a:	4658      	mov	r0, fp
 8008d5c:	f7f8 f812 	bl	8000d84 <__aeabi_fmul>
 8008d60:	1076      	asrs	r6, r6, #1
 8008d62:	9b00      	ldr	r3, [sp, #0]
 8008d64:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8008d68:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8008d6c:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
 8008d70:	f029 090f 	bic.w	r9, r9, #15
 8008d74:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 8008d78:	4680      	mov	r8, r0
 8008d7a:	4631      	mov	r1, r6
 8008d7c:	4648      	mov	r0, r9
 8008d7e:	f7f8 f801 	bl	8000d84 <__aeabi_fmul>
 8008d82:	4601      	mov	r1, r0
 8008d84:	4658      	mov	r0, fp
 8008d86:	f7f7 fef3 	bl	8000b70 <__aeabi_fsub>
 8008d8a:	9a03      	ldr	r2, [sp, #12]
 8008d8c:	4683      	mov	fp, r0
 8008d8e:	4611      	mov	r1, r2
 8008d90:	4630      	mov	r0, r6
 8008d92:	f7f7 feed 	bl	8000b70 <__aeabi_fsub>
 8008d96:	9b04      	ldr	r3, [sp, #16]
 8008d98:	4601      	mov	r1, r0
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7f7 fee8 	bl	8000b70 <__aeabi_fsub>
 8008da0:	4649      	mov	r1, r9
 8008da2:	f7f7 ffef 	bl	8000d84 <__aeabi_fmul>
 8008da6:	4601      	mov	r1, r0
 8008da8:	4658      	mov	r0, fp
 8008daa:	f7f7 fee1 	bl	8000b70 <__aeabi_fsub>
 8008dae:	4651      	mov	r1, sl
 8008db0:	f7f7 ffe8 	bl	8000d84 <__aeabi_fmul>
 8008db4:	4641      	mov	r1, r8
 8008db6:	4682      	mov	sl, r0
 8008db8:	4640      	mov	r0, r8
 8008dba:	f7f7 ffe3 	bl	8000d84 <__aeabi_fmul>
 8008dbe:	4606      	mov	r6, r0
 8008dc0:	4958      	ldr	r1, [pc, #352]	; (8008f24 <__ieee754_powf+0x4cc>)
 8008dc2:	f7f7 ffdf 	bl	8000d84 <__aeabi_fmul>
 8008dc6:	4958      	ldr	r1, [pc, #352]	; (8008f28 <__ieee754_powf+0x4d0>)
 8008dc8:	f7f7 fed4 	bl	8000b74 <__addsf3>
 8008dcc:	4631      	mov	r1, r6
 8008dce:	f7f7 ffd9 	bl	8000d84 <__aeabi_fmul>
 8008dd2:	4956      	ldr	r1, [pc, #344]	; (8008f2c <__ieee754_powf+0x4d4>)
 8008dd4:	f7f7 fece 	bl	8000b74 <__addsf3>
 8008dd8:	4631      	mov	r1, r6
 8008dda:	f7f7 ffd3 	bl	8000d84 <__aeabi_fmul>
 8008dde:	4954      	ldr	r1, [pc, #336]	; (8008f30 <__ieee754_powf+0x4d8>)
 8008de0:	f7f7 fec8 	bl	8000b74 <__addsf3>
 8008de4:	4631      	mov	r1, r6
 8008de6:	f7f7 ffcd 	bl	8000d84 <__aeabi_fmul>
 8008dea:	4952      	ldr	r1, [pc, #328]	; (8008f34 <__ieee754_powf+0x4dc>)
 8008dec:	f7f7 fec2 	bl	8000b74 <__addsf3>
 8008df0:	4631      	mov	r1, r6
 8008df2:	f7f7 ffc7 	bl	8000d84 <__aeabi_fmul>
 8008df6:	4950      	ldr	r1, [pc, #320]	; (8008f38 <__ieee754_powf+0x4e0>)
 8008df8:	f7f7 febc 	bl	8000b74 <__addsf3>
 8008dfc:	4631      	mov	r1, r6
 8008dfe:	4683      	mov	fp, r0
 8008e00:	4630      	mov	r0, r6
 8008e02:	f7f7 ffbf 	bl	8000d84 <__aeabi_fmul>
 8008e06:	4601      	mov	r1, r0
 8008e08:	4658      	mov	r0, fp
 8008e0a:	f7f7 ffbb 	bl	8000d84 <__aeabi_fmul>
 8008e0e:	4606      	mov	r6, r0
 8008e10:	4649      	mov	r1, r9
 8008e12:	4640      	mov	r0, r8
 8008e14:	f7f7 feae 	bl	8000b74 <__addsf3>
 8008e18:	4651      	mov	r1, sl
 8008e1a:	f7f7 ffb3 	bl	8000d84 <__aeabi_fmul>
 8008e1e:	4631      	mov	r1, r6
 8008e20:	f7f7 fea8 	bl	8000b74 <__addsf3>
 8008e24:	4649      	mov	r1, r9
 8008e26:	4683      	mov	fp, r0
 8008e28:	4648      	mov	r0, r9
 8008e2a:	f7f7 ffab 	bl	8000d84 <__aeabi_fmul>
 8008e2e:	4943      	ldr	r1, [pc, #268]	; (8008f3c <__ieee754_powf+0x4e4>)
 8008e30:	9003      	str	r0, [sp, #12]
 8008e32:	f7f7 fe9f 	bl	8000b74 <__addsf3>
 8008e36:	4659      	mov	r1, fp
 8008e38:	f7f7 fe9c 	bl	8000b74 <__addsf3>
 8008e3c:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 8008e40:	f026 060f 	bic.w	r6, r6, #15
 8008e44:	4631      	mov	r1, r6
 8008e46:	4648      	mov	r0, r9
 8008e48:	f7f7 ff9c 	bl	8000d84 <__aeabi_fmul>
 8008e4c:	493b      	ldr	r1, [pc, #236]	; (8008f3c <__ieee754_powf+0x4e4>)
 8008e4e:	4681      	mov	r9, r0
 8008e50:	4630      	mov	r0, r6
 8008e52:	f7f7 fe8d 	bl	8000b70 <__aeabi_fsub>
 8008e56:	9b03      	ldr	r3, [sp, #12]
 8008e58:	4619      	mov	r1, r3
 8008e5a:	f7f7 fe89 	bl	8000b70 <__aeabi_fsub>
 8008e5e:	4601      	mov	r1, r0
 8008e60:	4658      	mov	r0, fp
 8008e62:	f7f7 fe85 	bl	8000b70 <__aeabi_fsub>
 8008e66:	4641      	mov	r1, r8
 8008e68:	f7f7 ff8c 	bl	8000d84 <__aeabi_fmul>
 8008e6c:	4631      	mov	r1, r6
 8008e6e:	4680      	mov	r8, r0
 8008e70:	4650      	mov	r0, sl
 8008e72:	f7f7 ff87 	bl	8000d84 <__aeabi_fmul>
 8008e76:	4601      	mov	r1, r0
 8008e78:	4640      	mov	r0, r8
 8008e7a:	f7f7 fe7b 	bl	8000b74 <__addsf3>
 8008e7e:	4682      	mov	sl, r0
 8008e80:	4601      	mov	r1, r0
 8008e82:	4648      	mov	r0, r9
 8008e84:	f7f7 fe76 	bl	8000b74 <__addsf3>
 8008e88:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 8008e8c:	f026 060f 	bic.w	r6, r6, #15
 8008e90:	4630      	mov	r0, r6
 8008e92:	492b      	ldr	r1, [pc, #172]	; (8008f40 <__ieee754_powf+0x4e8>)
 8008e94:	f7f7 ff76 	bl	8000d84 <__aeabi_fmul>
 8008e98:	4649      	mov	r1, r9
 8008e9a:	4680      	mov	r8, r0
 8008e9c:	4630      	mov	r0, r6
 8008e9e:	f7f7 fe67 	bl	8000b70 <__aeabi_fsub>
 8008ea2:	4601      	mov	r1, r0
 8008ea4:	4650      	mov	r0, sl
 8008ea6:	f7f7 fe63 	bl	8000b70 <__aeabi_fsub>
 8008eaa:	4926      	ldr	r1, [pc, #152]	; (8008f44 <__ieee754_powf+0x4ec>)
 8008eac:	f7f7 ff6a 	bl	8000d84 <__aeabi_fmul>
 8008eb0:	4925      	ldr	r1, [pc, #148]	; (8008f48 <__ieee754_powf+0x4f0>)
 8008eb2:	4681      	mov	r9, r0
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	f7f7 ff65 	bl	8000d84 <__aeabi_fmul>
 8008eba:	4601      	mov	r1, r0
 8008ebc:	4648      	mov	r0, r9
 8008ebe:	f7f7 fe59 	bl	8000b74 <__addsf3>
 8008ec2:	4b22      	ldr	r3, [pc, #136]	; (8008f4c <__ieee754_powf+0x4f4>)
 8008ec4:	9a00      	ldr	r2, [sp, #0]
 8008ec6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008eca:	f7f7 fe53 	bl	8000b74 <__addsf3>
 8008ece:	4606      	mov	r6, r0
 8008ed0:	9801      	ldr	r0, [sp, #4]
 8008ed2:	f7f7 ff03 	bl	8000cdc <__aeabi_i2f>
 8008ed6:	4682      	mov	sl, r0
 8008ed8:	4b1d      	ldr	r3, [pc, #116]	; (8008f50 <__ieee754_powf+0x4f8>)
 8008eda:	9a00      	ldr	r2, [sp, #0]
 8008edc:	4631      	mov	r1, r6
 8008ede:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 8008ee2:	4640      	mov	r0, r8
 8008ee4:	f7f7 fe46 	bl	8000b74 <__addsf3>
 8008ee8:	4659      	mov	r1, fp
 8008eea:	f7f7 fe43 	bl	8000b74 <__addsf3>
 8008eee:	4651      	mov	r1, sl
 8008ef0:	f7f7 fe40 	bl	8000b74 <__addsf3>
 8008ef4:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8008ef8:	f029 090f 	bic.w	r9, r9, #15
 8008efc:	4651      	mov	r1, sl
 8008efe:	4648      	mov	r0, r9
 8008f00:	f7f7 fe36 	bl	8000b70 <__aeabi_fsub>
 8008f04:	4659      	mov	r1, fp
 8008f06:	f7f7 fe33 	bl	8000b70 <__aeabi_fsub>
 8008f0a:	4641      	mov	r1, r8
 8008f0c:	e69b      	b.n	8008c46 <__ieee754_powf+0x1ee>
 8008f0e:	2200      	movs	r2, #0
 8008f10:	e6f3      	b.n	8008cfa <__ieee754_powf+0x2a2>
 8008f12:	2301      	movs	r3, #1
 8008f14:	e706      	b.n	8008d24 <__ieee754_powf+0x2cc>
 8008f16:	bf00      	nop
 8008f18:	001cc471 	.word	0x001cc471
 8008f1c:	005db3d6 	.word	0x005db3d6
 8008f20:	080097bc 	.word	0x080097bc
 8008f24:	3e53f142 	.word	0x3e53f142
 8008f28:	3e6c3255 	.word	0x3e6c3255
 8008f2c:	3e8ba305 	.word	0x3e8ba305
 8008f30:	3eaaaaab 	.word	0x3eaaaaab
 8008f34:	3edb6db7 	.word	0x3edb6db7
 8008f38:	3f19999a 	.word	0x3f19999a
 8008f3c:	40400000 	.word	0x40400000
 8008f40:	3f763800 	.word	0x3f763800
 8008f44:	3f76384f 	.word	0x3f76384f
 8008f48:	369dc3a0 	.word	0x369dc3a0
 8008f4c:	080097cc 	.word	0x080097cc
 8008f50:	080097c4 	.word	0x080097c4
 8008f54:	f040 80c2 	bne.w	80090dc <__ieee754_powf+0x684>
 8008f58:	4968      	ldr	r1, [pc, #416]	; (80090fc <__ieee754_powf+0x6a4>)
 8008f5a:	4630      	mov	r0, r6
 8008f5c:	f7f7 fe0a 	bl	8000b74 <__addsf3>
 8008f60:	4639      	mov	r1, r7
 8008f62:	4681      	mov	r9, r0
 8008f64:	4650      	mov	r0, sl
 8008f66:	f7f7 fe03 	bl	8000b70 <__aeabi_fsub>
 8008f6a:	4601      	mov	r1, r0
 8008f6c:	4648      	mov	r0, r9
 8008f6e:	f7f8 f8c5 	bl	80010fc <__aeabi_fcmpgt>
 8008f72:	2800      	cmp	r0, #0
 8008f74:	f47f ae9f 	bne.w	8008cb6 <__ieee754_powf+0x25e>
 8008f78:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008f7c:	15e4      	asrs	r4, r4, #23
 8008f7e:	3c7e      	subs	r4, #126	; 0x7e
 8008f80:	4123      	asrs	r3, r4
 8008f82:	4443      	add	r3, r8
 8008f84:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008f88:	495d      	ldr	r1, [pc, #372]	; (8009100 <__ieee754_powf+0x6a8>)
 8008f8a:	3a7f      	subs	r2, #127	; 0x7f
 8008f8c:	f3c3 0416 	ubfx	r4, r3, #0, #23
 8008f90:	4111      	asrs	r1, r2
 8008f92:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 8008f96:	f1c2 0217 	rsb	r2, r2, #23
 8008f9a:	4114      	asrs	r4, r2
 8008f9c:	f1b8 0f00 	cmp.w	r8, #0
 8008fa0:	4638      	mov	r0, r7
 8008fa2:	ea23 0101 	bic.w	r1, r3, r1
 8008fa6:	bfb8      	it	lt
 8008fa8:	4264      	neglt	r4, r4
 8008faa:	f7f7 fde1 	bl	8000b70 <__aeabi_fsub>
 8008fae:	4681      	mov	r9, r0
 8008fb0:	4631      	mov	r1, r6
 8008fb2:	4648      	mov	r0, r9
 8008fb4:	f7f7 fdde 	bl	8000b74 <__addsf3>
 8008fb8:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 8008fbc:	f027 070f 	bic.w	r7, r7, #15
 8008fc0:	4638      	mov	r0, r7
 8008fc2:	4950      	ldr	r1, [pc, #320]	; (8009104 <__ieee754_powf+0x6ac>)
 8008fc4:	f7f7 fede 	bl	8000d84 <__aeabi_fmul>
 8008fc8:	4649      	mov	r1, r9
 8008fca:	4680      	mov	r8, r0
 8008fcc:	4638      	mov	r0, r7
 8008fce:	f7f7 fdcf 	bl	8000b70 <__aeabi_fsub>
 8008fd2:	4601      	mov	r1, r0
 8008fd4:	4630      	mov	r0, r6
 8008fd6:	f7f7 fdcb 	bl	8000b70 <__aeabi_fsub>
 8008fda:	494b      	ldr	r1, [pc, #300]	; (8009108 <__ieee754_powf+0x6b0>)
 8008fdc:	f7f7 fed2 	bl	8000d84 <__aeabi_fmul>
 8008fe0:	494a      	ldr	r1, [pc, #296]	; (800910c <__ieee754_powf+0x6b4>)
 8008fe2:	4606      	mov	r6, r0
 8008fe4:	4638      	mov	r0, r7
 8008fe6:	f7f7 fecd 	bl	8000d84 <__aeabi_fmul>
 8008fea:	4601      	mov	r1, r0
 8008fec:	4630      	mov	r0, r6
 8008fee:	f7f7 fdc1 	bl	8000b74 <__addsf3>
 8008ff2:	4607      	mov	r7, r0
 8008ff4:	4601      	mov	r1, r0
 8008ff6:	4640      	mov	r0, r8
 8008ff8:	f7f7 fdbc 	bl	8000b74 <__addsf3>
 8008ffc:	4641      	mov	r1, r8
 8008ffe:	4606      	mov	r6, r0
 8009000:	f7f7 fdb6 	bl	8000b70 <__aeabi_fsub>
 8009004:	4601      	mov	r1, r0
 8009006:	4638      	mov	r0, r7
 8009008:	f7f7 fdb2 	bl	8000b70 <__aeabi_fsub>
 800900c:	4631      	mov	r1, r6
 800900e:	4680      	mov	r8, r0
 8009010:	4630      	mov	r0, r6
 8009012:	f7f7 feb7 	bl	8000d84 <__aeabi_fmul>
 8009016:	4607      	mov	r7, r0
 8009018:	493d      	ldr	r1, [pc, #244]	; (8009110 <__ieee754_powf+0x6b8>)
 800901a:	f7f7 feb3 	bl	8000d84 <__aeabi_fmul>
 800901e:	493d      	ldr	r1, [pc, #244]	; (8009114 <__ieee754_powf+0x6bc>)
 8009020:	f7f7 fda6 	bl	8000b70 <__aeabi_fsub>
 8009024:	4639      	mov	r1, r7
 8009026:	f7f7 fead 	bl	8000d84 <__aeabi_fmul>
 800902a:	493b      	ldr	r1, [pc, #236]	; (8009118 <__ieee754_powf+0x6c0>)
 800902c:	f7f7 fda2 	bl	8000b74 <__addsf3>
 8009030:	4639      	mov	r1, r7
 8009032:	f7f7 fea7 	bl	8000d84 <__aeabi_fmul>
 8009036:	4939      	ldr	r1, [pc, #228]	; (800911c <__ieee754_powf+0x6c4>)
 8009038:	f7f7 fd9a 	bl	8000b70 <__aeabi_fsub>
 800903c:	4639      	mov	r1, r7
 800903e:	f7f7 fea1 	bl	8000d84 <__aeabi_fmul>
 8009042:	4937      	ldr	r1, [pc, #220]	; (8009120 <__ieee754_powf+0x6c8>)
 8009044:	f7f7 fd96 	bl	8000b74 <__addsf3>
 8009048:	4639      	mov	r1, r7
 800904a:	f7f7 fe9b 	bl	8000d84 <__aeabi_fmul>
 800904e:	4601      	mov	r1, r0
 8009050:	4630      	mov	r0, r6
 8009052:	f7f7 fd8d 	bl	8000b70 <__aeabi_fsub>
 8009056:	4607      	mov	r7, r0
 8009058:	4601      	mov	r1, r0
 800905a:	4630      	mov	r0, r6
 800905c:	f7f7 fe92 	bl	8000d84 <__aeabi_fmul>
 8009060:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009064:	4681      	mov	r9, r0
 8009066:	4638      	mov	r0, r7
 8009068:	f7f7 fd82 	bl	8000b70 <__aeabi_fsub>
 800906c:	4601      	mov	r1, r0
 800906e:	4648      	mov	r0, r9
 8009070:	f7f7 ff3c 	bl	8000eec <__aeabi_fdiv>
 8009074:	4641      	mov	r1, r8
 8009076:	4607      	mov	r7, r0
 8009078:	4630      	mov	r0, r6
 800907a:	f7f7 fe83 	bl	8000d84 <__aeabi_fmul>
 800907e:	4641      	mov	r1, r8
 8009080:	f7f7 fd78 	bl	8000b74 <__addsf3>
 8009084:	4601      	mov	r1, r0
 8009086:	4638      	mov	r0, r7
 8009088:	f7f7 fd72 	bl	8000b70 <__aeabi_fsub>
 800908c:	4631      	mov	r1, r6
 800908e:	f7f7 fd6f 	bl	8000b70 <__aeabi_fsub>
 8009092:	4601      	mov	r1, r0
 8009094:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009098:	f7f7 fd6a 	bl	8000b70 <__aeabi_fsub>
 800909c:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 80090a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80090a4:	da20      	bge.n	80090e8 <__ieee754_powf+0x690>
 80090a6:	4621      	mov	r1, r4
 80090a8:	f000 f8b8 	bl	800921c <scalbnf>
 80090ac:	4629      	mov	r1, r5
 80090ae:	e53d      	b.n	8008b2c <__ieee754_powf+0xd4>
 80090b0:	4b1c      	ldr	r3, [pc, #112]	; (8009124 <__ieee754_powf+0x6cc>)
 80090b2:	429c      	cmp	r4, r3
 80090b4:	dd07      	ble.n	80090c6 <__ieee754_powf+0x66e>
 80090b6:	2100      	movs	r1, #0
 80090b8:	4628      	mov	r0, r5
 80090ba:	f7f8 f801 	bl	80010c0 <__aeabi_fcmplt>
 80090be:	3800      	subs	r0, #0
 80090c0:	bf18      	it	ne
 80090c2:	2001      	movne	r0, #1
 80090c4:	e580      	b.n	8008bc8 <__ieee754_powf+0x170>
 80090c6:	d109      	bne.n	80090dc <__ieee754_powf+0x684>
 80090c8:	4639      	mov	r1, r7
 80090ca:	f7f7 fd51 	bl	8000b70 <__aeabi_fsub>
 80090ce:	4631      	mov	r1, r6
 80090d0:	f7f8 f80a 	bl	80010e8 <__aeabi_fcmpge>
 80090d4:	2800      	cmp	r0, #0
 80090d6:	f43f af4f 	beq.w	8008f78 <__ieee754_powf+0x520>
 80090da:	e7ec      	b.n	80090b6 <__ieee754_powf+0x65e>
 80090dc:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80090e0:	f73f af4a 	bgt.w	8008f78 <__ieee754_powf+0x520>
 80090e4:	2400      	movs	r4, #0
 80090e6:	e763      	b.n	8008fb0 <__ieee754_powf+0x558>
 80090e8:	4618      	mov	r0, r3
 80090ea:	e7df      	b.n	80090ac <__ieee754_powf+0x654>
 80090ec:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80090f0:	e50b      	b.n	8008b0a <__ieee754_powf+0xb2>
 80090f2:	2100      	movs	r1, #0
 80090f4:	e509      	b.n	8008b0a <__ieee754_powf+0xb2>
 80090f6:	2500      	movs	r5, #0
 80090f8:	e4ef      	b.n	8008ada <__ieee754_powf+0x82>
 80090fa:	bf00      	nop
 80090fc:	3338aa3c 	.word	0x3338aa3c
 8009100:	007fffff 	.word	0x007fffff
 8009104:	3f317200 	.word	0x3f317200
 8009108:	3f317218 	.word	0x3f317218
 800910c:	35bfbe8c 	.word	0x35bfbe8c
 8009110:	3331bb4c 	.word	0x3331bb4c
 8009114:	35ddea0e 	.word	0x35ddea0e
 8009118:	388ab355 	.word	0x388ab355
 800911c:	3b360b61 	.word	0x3b360b61
 8009120:	3e2aaaab 	.word	0x3e2aaaab
 8009124:	43160000 	.word	0x43160000

08009128 <__ieee754_sqrtf>:
 8009128:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800912c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009130:	b570      	push	{r4, r5, r6, lr}
 8009132:	4603      	mov	r3, r0
 8009134:	4604      	mov	r4, r0
 8009136:	d309      	bcc.n	800914c <__ieee754_sqrtf+0x24>
 8009138:	4601      	mov	r1, r0
 800913a:	f7f7 fe23 	bl	8000d84 <__aeabi_fmul>
 800913e:	4601      	mov	r1, r0
 8009140:	4620      	mov	r0, r4
 8009142:	f7f7 fd17 	bl	8000b74 <__addsf3>
 8009146:	4604      	mov	r4, r0
 8009148:	4620      	mov	r0, r4
 800914a:	bd70      	pop	{r4, r5, r6, pc}
 800914c:	2a00      	cmp	r2, #0
 800914e:	d0fb      	beq.n	8009148 <__ieee754_sqrtf+0x20>
 8009150:	2800      	cmp	r0, #0
 8009152:	da06      	bge.n	8009162 <__ieee754_sqrtf+0x3a>
 8009154:	4601      	mov	r1, r0
 8009156:	f7f7 fd0b 	bl	8000b70 <__aeabi_fsub>
 800915a:	4601      	mov	r1, r0
 800915c:	f7f7 fec6 	bl	8000eec <__aeabi_fdiv>
 8009160:	e7f1      	b.n	8009146 <__ieee754_sqrtf+0x1e>
 8009162:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8009166:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800916a:	d029      	beq.n	80091c0 <__ieee754_sqrtf+0x98>
 800916c:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8009170:	07cb      	lsls	r3, r1, #31
 8009172:	f04f 0300 	mov.w	r3, #0
 8009176:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800917a:	f04f 0419 	mov.w	r4, #25
 800917e:	461e      	mov	r6, r3
 8009180:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8009184:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8009188:	bf58      	it	pl
 800918a:	0052      	lslpl	r2, r2, #1
 800918c:	1040      	asrs	r0, r0, #1
 800918e:	0052      	lsls	r2, r2, #1
 8009190:	1875      	adds	r5, r6, r1
 8009192:	4295      	cmp	r5, r2
 8009194:	bfde      	ittt	le
 8009196:	186e      	addle	r6, r5, r1
 8009198:	1b52      	suble	r2, r2, r5
 800919a:	185b      	addle	r3, r3, r1
 800919c:	3c01      	subs	r4, #1
 800919e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80091a2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80091a6:	d1f3      	bne.n	8009190 <__ieee754_sqrtf+0x68>
 80091a8:	b112      	cbz	r2, 80091b0 <__ieee754_sqrtf+0x88>
 80091aa:	3301      	adds	r3, #1
 80091ac:	f023 0301 	bic.w	r3, r3, #1
 80091b0:	105c      	asrs	r4, r3, #1
 80091b2:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 80091b6:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 80091ba:	e7c5      	b.n	8009148 <__ieee754_sqrtf+0x20>
 80091bc:	005b      	lsls	r3, r3, #1
 80091be:	3201      	adds	r2, #1
 80091c0:	0218      	lsls	r0, r3, #8
 80091c2:	d5fb      	bpl.n	80091bc <__ieee754_sqrtf+0x94>
 80091c4:	3a01      	subs	r2, #1
 80091c6:	1a89      	subs	r1, r1, r2
 80091c8:	e7d0      	b.n	800916c <__ieee754_sqrtf+0x44>

080091ca <with_errnof>:
 80091ca:	b538      	push	{r3, r4, r5, lr}
 80091cc:	4604      	mov	r4, r0
 80091ce:	460d      	mov	r5, r1
 80091d0:	f7fa ff92 	bl	80040f8 <__errno>
 80091d4:	6005      	str	r5, [r0, #0]
 80091d6:	4620      	mov	r0, r4
 80091d8:	bd38      	pop	{r3, r4, r5, pc}

080091da <xflowf>:
 80091da:	b508      	push	{r3, lr}
 80091dc:	b140      	cbz	r0, 80091f0 <xflowf+0x16>
 80091de:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 80091e2:	f7f7 fdcf 	bl	8000d84 <__aeabi_fmul>
 80091e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80091ea:	2122      	movs	r1, #34	; 0x22
 80091ec:	f7ff bfed 	b.w	80091ca <with_errnof>
 80091f0:	4608      	mov	r0, r1
 80091f2:	e7f6      	b.n	80091e2 <xflowf+0x8>

080091f4 <__math_uflowf>:
 80091f4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 80091f8:	f7ff bfef 	b.w	80091da <xflowf>

080091fc <__math_oflowf>:
 80091fc:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8009200:	f7ff bfeb 	b.w	80091da <xflowf>

08009204 <fabsf>:
 8009204:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009208:	4770      	bx	lr

0800920a <finitef>:
 800920a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800920e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8009212:	bfac      	ite	ge
 8009214:	2000      	movge	r0, #0
 8009216:	2001      	movlt	r0, #1
 8009218:	4770      	bx	lr
	...

0800921c <scalbnf>:
 800921c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8009220:	b538      	push	{r3, r4, r5, lr}
 8009222:	4603      	mov	r3, r0
 8009224:	460d      	mov	r5, r1
 8009226:	4604      	mov	r4, r0
 8009228:	d02a      	beq.n	8009280 <scalbnf+0x64>
 800922a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800922e:	d304      	bcc.n	800923a <scalbnf+0x1e>
 8009230:	4601      	mov	r1, r0
 8009232:	f7f7 fc9f 	bl	8000b74 <__addsf3>
 8009236:	4603      	mov	r3, r0
 8009238:	e022      	b.n	8009280 <scalbnf+0x64>
 800923a:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800923e:	d117      	bne.n	8009270 <scalbnf+0x54>
 8009240:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8009244:	f7f7 fd9e 	bl	8000d84 <__aeabi_fmul>
 8009248:	4a17      	ldr	r2, [pc, #92]	; (80092a8 <scalbnf+0x8c>)
 800924a:	4603      	mov	r3, r0
 800924c:	4295      	cmp	r5, r2
 800924e:	db0b      	blt.n	8009268 <scalbnf+0x4c>
 8009250:	4604      	mov	r4, r0
 8009252:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8009256:	3a19      	subs	r2, #25
 8009258:	442a      	add	r2, r5
 800925a:	2afe      	cmp	r2, #254	; 0xfe
 800925c:	dd0a      	ble.n	8009274 <scalbnf+0x58>
 800925e:	4913      	ldr	r1, [pc, #76]	; (80092ac <scalbnf+0x90>)
 8009260:	4618      	mov	r0, r3
 8009262:	f361 001e 	bfi	r0, r1, #0, #31
 8009266:	e000      	b.n	800926a <scalbnf+0x4e>
 8009268:	4911      	ldr	r1, [pc, #68]	; (80092b0 <scalbnf+0x94>)
 800926a:	f7f7 fd8b 	bl	8000d84 <__aeabi_fmul>
 800926e:	e7e2      	b.n	8009236 <scalbnf+0x1a>
 8009270:	0dd2      	lsrs	r2, r2, #23
 8009272:	e7f1      	b.n	8009258 <scalbnf+0x3c>
 8009274:	2a00      	cmp	r2, #0
 8009276:	dd05      	ble.n	8009284 <scalbnf+0x68>
 8009278:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 800927c:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 8009280:	4618      	mov	r0, r3
 8009282:	bd38      	pop	{r3, r4, r5, pc}
 8009284:	f112 0f16 	cmn.w	r2, #22
 8009288:	da05      	bge.n	8009296 <scalbnf+0x7a>
 800928a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800928e:	4295      	cmp	r5, r2
 8009290:	dce5      	bgt.n	800925e <scalbnf+0x42>
 8009292:	4907      	ldr	r1, [pc, #28]	; (80092b0 <scalbnf+0x94>)
 8009294:	e7e4      	b.n	8009260 <scalbnf+0x44>
 8009296:	3219      	adds	r2, #25
 8009298:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800929c:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 80092a0:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 80092a4:	e7e1      	b.n	800926a <scalbnf+0x4e>
 80092a6:	bf00      	nop
 80092a8:	ffff3cb0 	.word	0xffff3cb0
 80092ac:	7149f2ca 	.word	0x7149f2ca
 80092b0:	0da24260 	.word	0x0da24260

080092b4 <_init>:
 80092b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b6:	bf00      	nop
 80092b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ba:	bc08      	pop	{r3}
 80092bc:	469e      	mov	lr, r3
 80092be:	4770      	bx	lr

080092c0 <_fini>:
 80092c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092c2:	bf00      	nop
 80092c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092c6:	bc08      	pop	{r3}
 80092c8:	469e      	mov	lr, r3
 80092ca:	4770      	bx	lr
